// Code generated by protoc-gen-go. DO NOT EDIT.
// source: JournalRecords.proto

package or

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type JournalDirTableLogHeader_WriteType int32

const (
	JournalDirTableLogHeader_PUT_KEY    JournalDirTableLogHeader_WriteType = 0
	JournalDirTableLogHeader_REMOVE_KEY JournalDirTableLogHeader_WriteType = 1
	// remove prefix is obsolete, should not be used.
	JournalDirTableLogHeader_REMOVE_PREFIX_KEYS JournalDirTableLogHeader_WriteType = 2
	// The dummy entry inserted for DT to update its journal liveness
	JournalDirTableLogHeader_DUMMY_ENTRY JournalDirTableLogHeader_WriteType = 3
)

var JournalDirTableLogHeader_WriteType_name = map[int32]string{
	0: "PUT_KEY",
	1: "REMOVE_KEY",
	2: "REMOVE_PREFIX_KEYS",
	3: "DUMMY_ENTRY",
}
var JournalDirTableLogHeader_WriteType_value = map[string]int32{
	"PUT_KEY":            0,
	"REMOVE_KEY":         1,
	"REMOVE_PREFIX_KEYS": 2,
	"DUMMY_ENTRY":        3,
}

func (x JournalDirTableLogHeader_WriteType) Enum() *JournalDirTableLogHeader_WriteType {
	p := new(JournalDirTableLogHeader_WriteType)
	*p = x
	return p
}
func (x JournalDirTableLogHeader_WriteType) String() string {
	return proto.EnumName(JournalDirTableLogHeader_WriteType_name, int32(x))
}
func (x *JournalDirTableLogHeader_WriteType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(JournalDirTableLogHeader_WriteType_value, data, "JournalDirTableLogHeader_WriteType")
	if err != nil {
		return err
	}
	*x = JournalDirTableLogHeader_WriteType(value)
	return nil
}
func (JournalDirTableLogHeader_WriteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor2, []int{2, 0}
}

// prolog to journal file
type JournalHeader struct {
	// block size journal has been configured with
	BlockSize        *int32 `protobuf:"varint,1,req,name=blockSize" json:"blockSize,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *JournalHeader) Reset()                    { *m = JournalHeader{} }
func (m *JournalHeader) String() string            { return proto.CompactTextString(m) }
func (*JournalHeader) ProtoMessage()               {}
func (*JournalHeader) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *JournalHeader) GetBlockSize() int32 {
	if m != nil && m.BlockSize != nil {
		return *m.BlockSize
	}
	return 0
}

// the unique id for one DT instance
type DirTableInstanceID struct {
	// the DirectoryTable id this journal belongs to.
	DirectoryId *string `protobuf:"bytes,1,req,name=directoryId" json:"directoryId,omitempty"`
	// the uuid for the DT instance that writes this log.
	OwnerInstanceId  *string `protobuf:"bytes,2,req,name=ownerInstanceId" json:"ownerInstanceId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DirTableInstanceID) Reset()                    { *m = DirTableInstanceID{} }
func (m *DirTableInstanceID) String() string            { return proto.CompactTextString(m) }
func (*DirTableInstanceID) ProtoMessage()               {}
func (*DirTableInstanceID) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *DirTableInstanceID) GetDirectoryId() string {
	if m != nil && m.DirectoryId != nil {
		return *m.DirectoryId
	}
	return ""
}

func (m *DirTableInstanceID) GetOwnerInstanceId() string {
	if m != nil && m.OwnerInstanceId != nil {
		return *m.OwnerInstanceId
	}
	return ""
}

// The detail DirectoryTable log header.
// DT log is a Key-Value pair. The Key will be included in the header.
// The Value part is not included, as the Value may be big.
// The format of one log entry is:
//   header size + header + Value
type JournalDirTableLogHeader struct {
	Type      *JournalDirTableLogHeader_WriteType `protobuf:"varint,1,req,name=type,enum=or.JournalDirTableLogHeader_WriteType" json:"type,omitempty"`
	Timestamp *int64                              `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	// suppressed at v2
	Key *string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// size of the following payload
	PayloadLength *int32 `protobuf:"varint,4,opt,name=payloadLength" json:"payloadLength,omitempty"`
	// a unique DT instance id
	DtInstanceId *DirTableInstanceID `protobuf:"bytes,5,opt,name=dtInstanceId" json:"dtInstanceId,omitempty"`
	// new key for the SchemaKey
	SchemaKey        *SchemaKey `protobuf:"bytes,6,opt,name=schemaKey" json:"schemaKey,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *JournalDirTableLogHeader) Reset()                    { *m = JournalDirTableLogHeader{} }
func (m *JournalDirTableLogHeader) String() string            { return proto.CompactTextString(m) }
func (*JournalDirTableLogHeader) ProtoMessage()               {}
func (*JournalDirTableLogHeader) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *JournalDirTableLogHeader) GetType() JournalDirTableLogHeader_WriteType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return JournalDirTableLogHeader_PUT_KEY
}

func (m *JournalDirTableLogHeader) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *JournalDirTableLogHeader) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *JournalDirTableLogHeader) GetPayloadLength() int32 {
	if m != nil && m.PayloadLength != nil {
		return *m.PayloadLength
	}
	return 0
}

func (m *JournalDirTableLogHeader) GetDtInstanceId() *DirTableInstanceID {
	if m != nil {
		return m.DtInstanceId
	}
	return nil
}

func (m *JournalDirTableLogHeader) GetSchemaKey() *SchemaKey {
	if m != nil {
		return m.SchemaKey
	}
	return nil
}

func init() {
	proto.RegisterType((*JournalHeader)(nil), "or.JournalHeader")
	proto.RegisterType((*DirTableInstanceID)(nil), "or.DirTableInstanceID")
	proto.RegisterType((*JournalDirTableLogHeader)(nil), "or.JournalDirTableLogHeader")
	proto.RegisterEnum("or.JournalDirTableLogHeader_WriteType", JournalDirTableLogHeader_WriteType_name, JournalDirTableLogHeader_WriteType_value)
}

func init() { proto.RegisterFile("JournalRecords.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4f, 0xea, 0x40,
	0x10, 0xc6, 0x5f, 0x5b, 0x78, 0x2f, 0x9d, 0x3e, 0xa0, 0xd9, 0x18, 0xd2, 0x18, 0x0f, 0x4d, 0x63,
	0x4c, 0x13, 0x63, 0x0f, 0x1c, 0x39, 0x53, 0x63, 0x05, 0x14, 0x97, 0xa2, 0x72, 0xc2, 0xa5, 0xdd,
	0x40, 0x43, 0xe9, 0x36, 0xdb, 0x35, 0xa6, 0xfe, 0xc5, 0xfe, 0x19, 0xa6, 0xb5, 0x50, 0xd0, 0x78,
	0xdb, 0xf9, 0x66, 0x7e, 0x99, 0xef, 0xdb, 0x81, 0x93, 0x5b, 0xf6, 0xca, 0x13, 0x12, 0x63, 0x1a,
	0x30, 0x1e, 0x66, 0x4e, 0xca, 0x99, 0x60, 0x48, 0x66, 0xfc, 0xb4, 0x3b, 0x0d, 0xd6, 0x74, 0x4b,
	0x86, 0x34, 0x3f, 0xea, 0x59, 0x57, 0xd0, 0xaa, 0x98, 0x1b, 0x4a, 0x42, 0xca, 0xd1, 0x19, 0xa8,
	0xcb, 0x98, 0x05, 0x9b, 0x69, 0xf4, 0x4e, 0x0d, 0xc9, 0x94, 0xed, 0x26, 0xae, 0x05, 0xeb, 0x05,
	0xd0, 0x20, 0xe2, 0x3e, 0x59, 0xc6, 0xd4, 0x4b, 0x32, 0x41, 0x92, 0x80, 0x7a, 0x03, 0x64, 0x82,
	0x16, 0x46, 0x9c, 0x06, 0x82, 0xf1, 0xdc, 0x0b, 0x4b, 0x4a, 0xc5, 0x87, 0x12, 0xb2, 0xa1, 0xc3,
	0xde, 0x12, 0xca, 0xf7, 0x50, 0x68, 0xc8, 0xe5, 0xd4, 0x77, 0xd9, 0xfa, 0x90, 0xc1, 0xa8, 0x1c,
	0xed, 0x36, 0x8d, 0xd8, 0xaa, 0x32, 0xd7, 0x87, 0x86, 0xc8, 0xd3, 0x2f, 0x5f, 0xed, 0xde, 0x85,
	0xc3, 0xb8, 0xf3, 0xdb, 0xac, 0xf3, 0xc4, 0x23, 0x41, 0xfd, 0x3c, 0xa5, 0xb8, 0x64, 0x8a, 0x60,
	0x22, 0xda, 0xd2, 0x4c, 0x90, 0x6d, 0x5a, 0x2e, 0x57, 0x70, 0x2d, 0x20, 0x1d, 0x94, 0x0d, 0xcd,
	0x0d, 0xc5, 0x94, 0x6c, 0x15, 0x17, 0x4f, 0x74, 0x0e, 0xad, 0x94, 0xe4, 0x31, 0x23, 0xe1, 0x88,
	0x26, 0x2b, 0xb1, 0x36, 0x1a, 0xa6, 0x64, 0x37, 0xf1, 0xb1, 0x88, 0xfa, 0xf0, 0x3f, 0x14, 0x07,
	0xa9, 0x9a, 0xa6, 0x64, 0x6b, 0xbd, 0x6e, 0xe1, 0xec, 0xe7, 0x47, 0xe1, 0xa3, 0x59, 0x74, 0x09,
	0x6a, 0xb6, 0xbb, 0x8a, 0xf1, 0xb7, 0x04, 0x5b, 0x05, 0x58, 0x9f, 0xaa, 0xee, 0x5b, 0x0f, 0xa0,
	0xee, 0x13, 0x21, 0x0d, 0xfe, 0x4d, 0x66, 0xfe, 0x62, 0xe8, 0xce, 0xf5, 0x3f, 0xa8, 0x0d, 0x80,
	0xdd, 0xf1, 0xfd, 0xa3, 0x5b, 0xd6, 0x12, 0xea, 0x02, 0xaa, 0xea, 0x09, 0x76, 0xaf, 0xbd, 0xe7,
	0x42, 0x9e, 0xea, 0x32, 0xea, 0x80, 0x36, 0x98, 0x8d, 0xc7, 0xf3, 0x85, 0x7b, 0xe7, 0xe3, 0xb9,
	0xae, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xe8, 0xbd, 0xb7, 0x2e, 0x02, 0x00, 0x00,
}
