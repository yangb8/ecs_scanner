// Code generated by protoc-gen-go. DO NOT EDIT.
// source: SchemaKeyRecords.proto

package or

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// enumerate all type of SchemaKey.
// For every type, please add a related IndexKey class, which inherits
// SchemaKeyBase and implements the hasPrefix, compare and probably
// hash (for routing) functions.
// Also add the IndexKey creation function to TypeCoder.createIndexKey,
// which is for Btree to construct the corresponding IndexKey when loading
// the key from the persistent stored page.
//
// please minimize the number of types as much as possible.
type SchemaKeyType int32

const (
	SchemaKeyType_DEFAULT_KEY           SchemaKeyType = 0
	SchemaKeyType_DIRECTORYTABLE_RECORD SchemaKeyType = 1
	SchemaKeyType_DIRECTORYTABLE_OWNER  SchemaKeyType = 2
	SchemaKeyType_RM_TASK               SchemaKeyType = 3
	SchemaKeyType_DTBOOTSTRAP_TASK      SchemaKeyType = 4
	SchemaKeyType_CHUNK                 SchemaKeyType = 5
	SchemaKeyType_CM_TASK               SchemaKeyType = 6
	SchemaKeyType_CM_JOB                SchemaKeyType = 7
	SchemaKeyType_CM_PROGRESS           SchemaKeyType = 8
	SchemaKeyType_CHUNK_SEQUENCE        SchemaKeyType = 9
	SchemaKeyType_RG_RECONFIG_TASK      SchemaKeyType = 10
	SchemaKeyType_SSTABLE_KEY           SchemaKeyType = 11
	SchemaKeyType_SSTABLE_TASK_KEY      SchemaKeyType = 12
	SchemaKeyType_OBJECT_TABLE_KEY      SchemaKeyType = 13
	SchemaKeyType_DELETE_JOB_TABLE_KEY  SchemaKeyType = 14
	SchemaKeyType_MT_KEY                SchemaKeyType = 15
	SchemaKeyType_BTREE_REFERENCE       SchemaKeyType = 16
	SchemaKeyType_LIST_ENTRY            SchemaKeyType = 17
	SchemaKeyType_GC_REF_COLLECTION     SchemaKeyType = 18
	SchemaKeyType_REPO_REFERENCE        SchemaKeyType = 19
	// ==== RT DT KEYS ====
	SchemaKeyType_NAMESPACE_KEY     SchemaKeyType = 20
	SchemaKeyType_BUCKET_KEY        SchemaKeyType = 21
	SchemaKeyType_USER_KEY          SchemaKeyType = 22
	SchemaKeyType_REP_GROUP_KEY     SchemaKeyType = 23
	SchemaKeyType_REP_GROUP_UPD_KEY SchemaKeyType = 24
	SchemaKeyType_RT_BOOTSTRAP_TASK SchemaKeyType = 25
	SchemaKeyType_NK_ENTRY_KEY      SchemaKeyType = 26
	SchemaKeyType_NK_REPL_TASK_KEY  SchemaKeyType = 27
	SchemaKeyType_CONFIG_KEY        SchemaKeyType = 28
	SchemaKeyType_ZK_CONFIG_KEY     SchemaKeyType = 29
	SchemaKeyType_ZONE_INFO_KEY     SchemaKeyType = 30
)

var SchemaKeyType_name = map[int32]string{
	0:  "DEFAULT_KEY",
	1:  "DIRECTORYTABLE_RECORD",
	2:  "DIRECTORYTABLE_OWNER",
	3:  "RM_TASK",
	4:  "DTBOOTSTRAP_TASK",
	5:  "CHUNK",
	6:  "CM_TASK",
	7:  "CM_JOB",
	8:  "CM_PROGRESS",
	9:  "CHUNK_SEQUENCE",
	10: "RG_RECONFIG_TASK",
	11: "SSTABLE_KEY",
	12: "SSTABLE_TASK_KEY",
	13: "OBJECT_TABLE_KEY",
	14: "DELETE_JOB_TABLE_KEY",
	15: "MT_KEY",
	16: "BTREE_REFERENCE",
	17: "LIST_ENTRY",
	18: "GC_REF_COLLECTION",
	19: "REPO_REFERENCE",
	20: "NAMESPACE_KEY",
	21: "BUCKET_KEY",
	22: "USER_KEY",
	23: "REP_GROUP_KEY",
	24: "REP_GROUP_UPD_KEY",
	25: "RT_BOOTSTRAP_TASK",
	26: "NK_ENTRY_KEY",
	27: "NK_REPL_TASK_KEY",
	28: "CONFIG_KEY",
	29: "ZK_CONFIG_KEY",
	30: "ZONE_INFO_KEY",
}
var SchemaKeyType_value = map[string]int32{
	"DEFAULT_KEY":           0,
	"DIRECTORYTABLE_RECORD": 1,
	"DIRECTORYTABLE_OWNER":  2,
	"RM_TASK":               3,
	"DTBOOTSTRAP_TASK":      4,
	"CHUNK":                 5,
	"CM_TASK":               6,
	"CM_JOB":                7,
	"CM_PROGRESS":           8,
	"CHUNK_SEQUENCE":        9,
	"RG_RECONFIG_TASK":      10,
	"SSTABLE_KEY":           11,
	"SSTABLE_TASK_KEY":      12,
	"OBJECT_TABLE_KEY":      13,
	"DELETE_JOB_TABLE_KEY":  14,
	"MT_KEY":                15,
	"BTREE_REFERENCE":       16,
	"LIST_ENTRY":            17,
	"GC_REF_COLLECTION":     18,
	"REPO_REFERENCE":        19,
	"NAMESPACE_KEY":         20,
	"BUCKET_KEY":            21,
	"USER_KEY":              22,
	"REP_GROUP_KEY":         23,
	"REP_GROUP_UPD_KEY":     24,
	"RT_BOOTSTRAP_TASK":     25,
	"NK_ENTRY_KEY":          26,
	"NK_REPL_TASK_KEY":      27,
	"CONFIG_KEY":            28,
	"ZK_CONFIG_KEY":         29,
	"ZONE_INFO_KEY":         30,
}

func (x SchemaKeyType) Enum() *SchemaKeyType {
	p := new(SchemaKeyType)
	*p = x
	return p
}
func (x SchemaKeyType) String() string {
	return proto.EnumName(SchemaKeyType_name, int32(x))
}
func (x *SchemaKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SchemaKeyType_value, data, "SchemaKeyType")
	if err != nil {
		return err
	}
	*x = SchemaKeyType(value)
	return nil
}
func (SchemaKeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type DTRecordKey_DTRecordKeyType int32

const (
	DTRecordKey_JOURNAL_REGION              DTRecordKey_DTRecordKeyType = 0
	DTRecordKey_JOURNAL_PARSER_MARKER       DTRecordKey_DTRecordKeyType = 1
	DTRecordKey_JOURNAL_REGION_GEO_MARKER   DTRecordKey_DTRecordKeyType = 2
	DTRecordKey_JOURNAL_REGION_GC_MARKER    DTRecordKey_DTRecordKeyType = 3
	DTRecordKey_BPLUSTREE_INFO              DTRecordKey_DTRecordKeyType = 4
	DTRecordKey_BPLUSTREE_DUMP_MARKER       DTRecordKey_DTRecordKeyType = 5
	DTRecordKey_BPLUSTREE_PARSER_MARKER     DTRecordKey_DTRecordKeyType = 6
	DTRecordKey_OBJECT_INDEX_FORMAT_VERSION DTRecordKey_DTRecordKeyType = 7
	// geo related keys
	DTRecordKey_GEOREPLAYER_REPLICATION_CHECKER_MARKER         DTRecordKey_DTRecordKeyType = 8
	DTRecordKey_GEOREPLAYER_CONSISTENCY_CHECKER_MARKER         DTRecordKey_DTRecordKeyType = 9
	DTRecordKey_BPLUSTREE_REPLICATION_BOOTSTRAP_JOURNAL_MARKER DTRecordKey_DTRecordKeyType = 10
	DTRecordKey_BPLUSTREE_BOOTSTRAP_MARKER                     DTRecordKey_DTRecordKeyType = 11
	DTRecordKey_BPLUSTREE_RECOVERY_TRACKER                     DTRecordKey_DTRecordKeyType = 12
	DTRecordKey_OWNER_EPOCH                                    DTRecordKey_DTRecordKeyType = 13
)

var DTRecordKey_DTRecordKeyType_name = map[int32]string{
	0:  "JOURNAL_REGION",
	1:  "JOURNAL_PARSER_MARKER",
	2:  "JOURNAL_REGION_GEO_MARKER",
	3:  "JOURNAL_REGION_GC_MARKER",
	4:  "BPLUSTREE_INFO",
	5:  "BPLUSTREE_DUMP_MARKER",
	6:  "BPLUSTREE_PARSER_MARKER",
	7:  "OBJECT_INDEX_FORMAT_VERSION",
	8:  "GEOREPLAYER_REPLICATION_CHECKER_MARKER",
	9:  "GEOREPLAYER_CONSISTENCY_CHECKER_MARKER",
	10: "BPLUSTREE_REPLICATION_BOOTSTRAP_JOURNAL_MARKER",
	11: "BPLUSTREE_BOOTSTRAP_MARKER",
	12: "BPLUSTREE_RECOVERY_TRACKER",
	13: "OWNER_EPOCH",
}
var DTRecordKey_DTRecordKeyType_value = map[string]int32{
	"JOURNAL_REGION":                                 0,
	"JOURNAL_PARSER_MARKER":                          1,
	"JOURNAL_REGION_GEO_MARKER":                      2,
	"JOURNAL_REGION_GC_MARKER":                       3,
	"BPLUSTREE_INFO":                                 4,
	"BPLUSTREE_DUMP_MARKER":                          5,
	"BPLUSTREE_PARSER_MARKER":                        6,
	"OBJECT_INDEX_FORMAT_VERSION":                    7,
	"GEOREPLAYER_REPLICATION_CHECKER_MARKER":         8,
	"GEOREPLAYER_CONSISTENCY_CHECKER_MARKER":         9,
	"BPLUSTREE_REPLICATION_BOOTSTRAP_JOURNAL_MARKER": 10,
	"BPLUSTREE_BOOTSTRAP_MARKER":                     11,
	"BPLUSTREE_RECOVERY_TRACKER":                     12,
	"OWNER_EPOCH":                                    13,
}

func (x DTRecordKey_DTRecordKeyType) Enum() *DTRecordKey_DTRecordKeyType {
	p := new(DTRecordKey_DTRecordKeyType)
	*p = x
	return p
}
func (x DTRecordKey_DTRecordKeyType) String() string {
	return proto.EnumName(DTRecordKey_DTRecordKeyType_name, int32(x))
}
func (x *DTRecordKey_DTRecordKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DTRecordKey_DTRecordKeyType_value, data, "DTRecordKey_DTRecordKeyType")
	if err != nil {
		return err
	}
	*x = DTRecordKey_DTRecordKeyType(value)
	return nil
}
func (DTRecordKey_DTRecordKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{2, 0}
}

type MTTableRecordKey_Type int32

const (
	MTTableRecordKey_STORAGE_STAT     MTTableRecordKey_Type = 0
	MTTableRecordKey_AGG_STORAGE_STAT MTTableRecordKey_Type = 2
	MTTableRecordKey_BW_STAT          MTTableRecordKey_Type = 3
	MTTableRecordKey_AGG_BW_STAT      MTTableRecordKey_Type = 4
)

var MTTableRecordKey_Type_name = map[int32]string{
	0: "STORAGE_STAT",
	2: "AGG_STORAGE_STAT",
	3: "BW_STAT",
	4: "AGG_BW_STAT",
}
var MTTableRecordKey_Type_value = map[string]int32{
	"STORAGE_STAT":     0,
	"AGG_STORAGE_STAT": 2,
	"BW_STAT":          3,
	"AGG_BW_STAT":      4,
}

func (x MTTableRecordKey_Type) Enum() *MTTableRecordKey_Type {
	p := new(MTTableRecordKey_Type)
	*p = x
	return p
}
func (x MTTableRecordKey_Type) String() string {
	return proto.EnumName(MTTableRecordKey_Type_name, int32(x))
}
func (x *MTTableRecordKey_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MTTableRecordKey_Type_value, data, "MTTableRecordKey_Type")
	if err != nil {
		return err
	}
	*x = MTTableRecordKey_Type(value)
	return nil
}
func (MTTableRecordKey_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{9, 0} }

type MTStorageStatKey_State int32

const (
	MTStorageStatKey_InProgress MTStorageStatKey_State = 0
	MTStorageStatKey_Completed  MTStorageStatKey_State = 1
)

var MTStorageStatKey_State_name = map[int32]string{
	0: "InProgress",
	1: "Completed",
}
var MTStorageStatKey_State_value = map[string]int32{
	"InProgress": 0,
	"Completed":  1,
}

func (x MTStorageStatKey_State) Enum() *MTStorageStatKey_State {
	p := new(MTStorageStatKey_State)
	*p = x
	return p
}
func (x MTStorageStatKey_State) String() string {
	return proto.EnumName(MTStorageStatKey_State_name, int32(x))
}
func (x *MTStorageStatKey_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MTStorageStatKey_State_value, data, "MTStorageStatKey_State")
	if err != nil {
		return err
	}
	*x = MTStorageStatKey_State(value)
	return nil
}
func (MTStorageStatKey_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{10, 0} }

type RMTaskKey_RMTaskType int32

const (
	RMTaskKey_JOURNAL_ENTRY_GEO_SEND RMTaskKey_RMTaskType = 0
	RMTaskKey_RECOVERY_POINT_SEND    RMTaskKey_RMTaskType = 1
)

var RMTaskKey_RMTaskType_name = map[int32]string{
	0: "JOURNAL_ENTRY_GEO_SEND",
	1: "RECOVERY_POINT_SEND",
}
var RMTaskKey_RMTaskType_value = map[string]int32{
	"JOURNAL_ENTRY_GEO_SEND": 0,
	"RECOVERY_POINT_SEND":    1,
}

func (x RMTaskKey_RMTaskType) Enum() *RMTaskKey_RMTaskType {
	p := new(RMTaskKey_RMTaskType)
	*p = x
	return p
}
func (x RMTaskKey_RMTaskType) String() string {
	return proto.EnumName(RMTaskKey_RMTaskType_name, int32(x))
}
func (x *RMTaskKey_RMTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RMTaskKey_RMTaskType_value, data, "RMTaskKey_RMTaskType")
	if err != nil {
		return err
	}
	*x = RMTaskKey_RMTaskType(value)
	return nil
}
func (RMTaskKey_RMTaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{14, 0} }

type ObjectTableKey_ObjectTableKeyType int32

const (
	ObjectTableKey_COMPACTION_MARKER ObjectTableKey_ObjectTableKeyType = 0
	ObjectTableKey_INDEX             ObjectTableKey_ObjectTableKeyType = 1
	ObjectTableKey_UPDATE            ObjectTableKey_ObjectTableKeyType = 2
	ObjectTableKey_MPU_PART          ObjectTableKey_ObjectTableKeyType = 3
	ObjectTableKey_MPU_LIST          ObjectTableKey_ObjectTableKeyType = 4
	ObjectTableKey_MPU_MARKER        ObjectTableKey_ObjectTableKeyType = 5
	ObjectTableKey_CROSS_REFERENCE   ObjectTableKey_ObjectTableKeyType = 6
)

var ObjectTableKey_ObjectTableKeyType_name = map[int32]string{
	0: "COMPACTION_MARKER",
	1: "INDEX",
	2: "UPDATE",
	3: "MPU_PART",
	4: "MPU_LIST",
	5: "MPU_MARKER",
	6: "CROSS_REFERENCE",
}
var ObjectTableKey_ObjectTableKeyType_value = map[string]int32{
	"COMPACTION_MARKER": 0,
	"INDEX":             1,
	"UPDATE":            2,
	"MPU_PART":          3,
	"MPU_LIST":          4,
	"MPU_MARKER":        5,
	"CROSS_REFERENCE":   6,
}

func (x ObjectTableKey_ObjectTableKeyType) Enum() *ObjectTableKey_ObjectTableKeyType {
	p := new(ObjectTableKey_ObjectTableKeyType)
	*p = x
	return p
}
func (x ObjectTableKey_ObjectTableKeyType) String() string {
	return proto.EnumName(ObjectTableKey_ObjectTableKeyType_name, int32(x))
}
func (x *ObjectTableKey_ObjectTableKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ObjectTableKey_ObjectTableKeyType_value, data, "ObjectTableKey_ObjectTableKeyType")
	if err != nil {
		return err
	}
	*x = ObjectTableKey_ObjectTableKeyType(value)
	return nil
}
func (ObjectTableKey_ObjectTableKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{15, 0}
}

type ObjectTableKey_ObjectIndexKeySubType int32

const (
	ObjectTableKey_HEAD_METADATA   ObjectTableKey_ObjectIndexKeySubType = 0
	ObjectTableKey_SYSTEM_METADATA ObjectTableKey_ObjectIndexKeySubType = 1
	ObjectTableKey_USER_METADATA   ObjectTableKey_ObjectIndexKeySubType = 2
	ObjectTableKey_RANGE           ObjectTableKey_ObjectIndexKeySubType = 3
	ObjectTableKey_DELETION_MARKER ObjectTableKey_ObjectIndexKeySubType = 4
	ObjectTableKey_REMOVE_MARKER   ObjectTableKey_ObjectIndexKeySubType = 5
)

var ObjectTableKey_ObjectIndexKeySubType_name = map[int32]string{
	0: "HEAD_METADATA",
	1: "SYSTEM_METADATA",
	2: "USER_METADATA",
	3: "RANGE",
	4: "DELETION_MARKER",
	5: "REMOVE_MARKER",
}
var ObjectTableKey_ObjectIndexKeySubType_value = map[string]int32{
	"HEAD_METADATA":   0,
	"SYSTEM_METADATA": 1,
	"USER_METADATA":   2,
	"RANGE":           3,
	"DELETION_MARKER": 4,
	"REMOVE_MARKER":   5,
}

func (x ObjectTableKey_ObjectIndexKeySubType) Enum() *ObjectTableKey_ObjectIndexKeySubType {
	p := new(ObjectTableKey_ObjectIndexKeySubType)
	*p = x
	return p
}
func (x ObjectTableKey_ObjectIndexKeySubType) String() string {
	return proto.EnumName(ObjectTableKey_ObjectIndexKeySubType_name, int32(x))
}
func (x *ObjectTableKey_ObjectIndexKeySubType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ObjectTableKey_ObjectIndexKeySubType_value, data, "ObjectTableKey_ObjectIndexKeySubType")
	if err != nil {
		return err
	}
	*x = ObjectTableKey_ObjectIndexKeySubType(value)
	return nil
}
func (ObjectTableKey_ObjectIndexKeySubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{15, 1}
}

type SSTableRecordKey_Type int32

const (
	SSTableRecordKey_FREE_BLOCK SSTableRecordKey_Type = 0
	SSTableRecordKey_BUSY_BLOCK SSTableRecordKey_Type = 1
	SSTableRecordKey_DEVICE     SSTableRecordKey_Type = 2
	SSTableRecordKey_PARTITION  SSTableRecordKey_Type = 3
	SSTableRecordKey_BLOCK_BIN  SSTableRecordKey_Type = 4
)

var SSTableRecordKey_Type_name = map[int32]string{
	0: "FREE_BLOCK",
	1: "BUSY_BLOCK",
	2: "DEVICE",
	3: "PARTITION",
	4: "BLOCK_BIN",
}
var SSTableRecordKey_Type_value = map[string]int32{
	"FREE_BLOCK": 0,
	"BUSY_BLOCK": 1,
	"DEVICE":     2,
	"PARTITION":  3,
	"BLOCK_BIN":  4,
}

func (x SSTableRecordKey_Type) Enum() *SSTableRecordKey_Type {
	p := new(SSTableRecordKey_Type)
	*p = x
	return p
}
func (x SSTableRecordKey_Type) String() string {
	return proto.EnumName(SSTableRecordKey_Type_name, int32(x))
}
func (x *SSTableRecordKey_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SSTableRecordKey_Type_value, data, "SSTableRecordKey_Type")
	if err != nil {
		return err
	}
	*x = SSTableRecordKey_Type(value)
	return nil
}
func (SSTableRecordKey_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{18, 0} }

type SSTableBlockLevelTaskKey_Type int32

const (
	SSTableBlockLevelTaskKey_BLOCK_ALLOCATE_TASK   SSTableBlockLevelTaskKey_Type = 0
	SSTableBlockLevelTaskKey_BLOCK_FREE_TASK       SSTableBlockLevelTaskKey_Type = 1
	SSTableBlockLevelTaskKey_BLOCK_RELINQUISH_TASK SSTableBlockLevelTaskKey_Type = 2
	SSTableBlockLevelTaskKey_BLOCK_RECEIVE_TASK    SSTableBlockLevelTaskKey_Type = 3
)

var SSTableBlockLevelTaskKey_Type_name = map[int32]string{
	0: "BLOCK_ALLOCATE_TASK",
	1: "BLOCK_FREE_TASK",
	2: "BLOCK_RELINQUISH_TASK",
	3: "BLOCK_RECEIVE_TASK",
}
var SSTableBlockLevelTaskKey_Type_value = map[string]int32{
	"BLOCK_ALLOCATE_TASK":   0,
	"BLOCK_FREE_TASK":       1,
	"BLOCK_RELINQUISH_TASK": 2,
	"BLOCK_RECEIVE_TASK":    3,
}

func (x SSTableBlockLevelTaskKey_Type) Enum() *SSTableBlockLevelTaskKey_Type {
	p := new(SSTableBlockLevelTaskKey_Type)
	*p = x
	return p
}
func (x SSTableBlockLevelTaskKey_Type) String() string {
	return proto.EnumName(SSTableBlockLevelTaskKey_Type_name, int32(x))
}
func (x *SSTableBlockLevelTaskKey_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SSTableBlockLevelTaskKey_Type_value, data, "SSTableBlockLevelTaskKey_Type")
	if err != nil {
		return err
	}
	*x = SSTableBlockLevelTaskKey_Type(value)
	return nil
}
func (SSTableBlockLevelTaskKey_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{24, 0}
}

type GCRefCollectionKey_GCRefType int32

const (
	GCRefCollectionKey_REPO    GCRefCollectionKey_GCRefType = 0
	GCRefCollectionKey_BTREE   GCRefCollectionKey_GCRefType = 1
	GCRefCollectionKey_JOURNAL GCRefCollectionKey_GCRefType = 2
)

var GCRefCollectionKey_GCRefType_name = map[int32]string{
	0: "REPO",
	1: "BTREE",
	2: "JOURNAL",
}
var GCRefCollectionKey_GCRefType_value = map[string]int32{
	"REPO":    0,
	"BTREE":   1,
	"JOURNAL": 2,
}

func (x GCRefCollectionKey_GCRefType) Enum() *GCRefCollectionKey_GCRefType {
	p := new(GCRefCollectionKey_GCRefType)
	*p = x
	return p
}
func (x GCRefCollectionKey_GCRefType) String() string {
	return proto.EnumName(GCRefCollectionKey_GCRefType_name, int32(x))
}
func (x *GCRefCollectionKey_GCRefType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GCRefCollectionKey_GCRefType_value, data, "GCRefCollectionKey_GCRefType")
	if err != nil {
		return err
	}
	*x = GCRefCollectionKey_GCRefType(value)
	return nil
}
func (GCRefCollectionKey_GCRefType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{26, 0}
}

type CMTaskKey_CMTaskType int32

const (
	// seal chunk
	CMTaskKey_SEAL CMTaskKey_CMTaskType = 0
	// EC encoding
	CMTaskKey_EC CMTaskKey_CMTaskType = 1
	// consistency checking task, only in memory
	CMTaskKey_CC CMTaskKey_CMTaskType = 2
	// repair chunk
	CMTaskKey_REPAIR CMTaskKey_CMTaskType = 3
	// sweep extra copy in chunk
	CMTaskKey_SWEEP CMTaskKey_CMTaskType = 4
	// geo replicate chunk info (CHUNK_INFO_GEO_SEND_TASK) !!
	CMTaskKey_GEO_INFO_SEND CMTaskKey_CMTaskType = 5
	// geo replicate chunk data (CHUNK_GEO_REPLICATION_TASK)
	CMTaskKey_GEO_DATA_SEND CMTaskKey_CMTaskType = 6
	// start COPY chunk write (CHUNK_GEO_COPY_ENTRY)
	CMTaskKey_GEO_COPY CMTaskKey_CMTaskType = 7
	// geo delete chunk
	CMTaskKey_GEO_DELETE CMTaskKey_CMTaskType = 8
	// grouping chunks for XOR (CHUNK_XOR_TASK)
	CMTaskKey_XOR_GROUP CMTaskKey_CMTaskType = 9
	// XOR encoding
	CMTaskKey_XOR_ENCODE CMTaskKey_CMTaskType = 10
	// XOR decoding
	CMTaskKey_XOR_DECODE CMTaskKey_CMTaskType = 11
	// free blocks in chunk
	CMTaskKey_FREE_BLOCKS CMTaskKey_CMTaskType = 12
	// check if a sealed journal chunk could be reclaimed
	CMTaskKey_CHECK_JOURNAL CMTaskKey_CMTaskType = 13
	// check if a sealed btree chunk could be reclaimed (BPLUSTREE_RECLAIM_CHUNK)
	CMTaskKey_CHECK_BTREE        CMTaskKey_CMTaskType = 14
	CMTaskKey_REMOTE_CHUNK_CACHE CMTaskKey_CMTaskType = 15
)

var CMTaskKey_CMTaskType_name = map[int32]string{
	0:  "SEAL",
	1:  "EC",
	2:  "CC",
	3:  "REPAIR",
	4:  "SWEEP",
	5:  "GEO_INFO_SEND",
	6:  "GEO_DATA_SEND",
	7:  "GEO_COPY",
	8:  "GEO_DELETE",
	9:  "XOR_GROUP",
	10: "XOR_ENCODE",
	11: "XOR_DECODE",
	12: "FREE_BLOCKS",
	13: "CHECK_JOURNAL",
	14: "CHECK_BTREE",
	15: "REMOTE_CHUNK_CACHE",
}
var CMTaskKey_CMTaskType_value = map[string]int32{
	"SEAL":               0,
	"EC":                 1,
	"CC":                 2,
	"REPAIR":             3,
	"SWEEP":              4,
	"GEO_INFO_SEND":      5,
	"GEO_DATA_SEND":      6,
	"GEO_COPY":           7,
	"GEO_DELETE":         8,
	"XOR_GROUP":          9,
	"XOR_ENCODE":         10,
	"XOR_DECODE":         11,
	"FREE_BLOCKS":        12,
	"CHECK_JOURNAL":      13,
	"CHECK_BTREE":        14,
	"REMOTE_CHUNK_CACHE": 15,
}

func (x CMTaskKey_CMTaskType) Enum() *CMTaskKey_CMTaskType {
	p := new(CMTaskKey_CMTaskType)
	*p = x
	return p
}
func (x CMTaskKey_CMTaskType) String() string {
	return proto.EnumName(CMTaskKey_CMTaskType_name, int32(x))
}
func (x *CMTaskKey_CMTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMTaskKey_CMTaskType_value, data, "CMTaskKey_CMTaskType")
	if err != nil {
		return err
	}
	*x = CMTaskKey_CMTaskType(value)
	return nil
}
func (CMTaskKey_CMTaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{28, 0} }

type CMGeoInfoSendTaskKey_UpdateType int32

const (
	CMGeoInfoSendTaskKey_CREATE CMGeoInfoSendTaskKey_UpdateType = 0
	CMGeoInfoSendTaskKey_DELETE CMGeoInfoSendTaskKey_UpdateType = 1
	CMGeoInfoSendTaskKey_UPDATE CMGeoInfoSendTaskKey_UpdateType = 2
)

var CMGeoInfoSendTaskKey_UpdateType_name = map[int32]string{
	0: "CREATE",
	1: "DELETE",
	2: "UPDATE",
}
var CMGeoInfoSendTaskKey_UpdateType_value = map[string]int32{
	"CREATE": 0,
	"DELETE": 1,
	"UPDATE": 2,
}

func (x CMGeoInfoSendTaskKey_UpdateType) Enum() *CMGeoInfoSendTaskKey_UpdateType {
	p := new(CMGeoInfoSendTaskKey_UpdateType)
	*p = x
	return p
}
func (x CMGeoInfoSendTaskKey_UpdateType) String() string {
	return proto.EnumName(CMGeoInfoSendTaskKey_UpdateType_name, int32(x))
}
func (x *CMGeoInfoSendTaskKey_UpdateType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMGeoInfoSendTaskKey_UpdateType_value, data, "CMGeoInfoSendTaskKey_UpdateType")
	if err != nil {
		return err
	}
	*x = CMGeoInfoSendTaskKey_UpdateType(value)
	return nil
}
func (CMGeoInfoSendTaskKey_UpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{29, 0}
}

type CMJobKey_CMJobType int32

const (
	// type for listing all jobs
	CMJobKey_ALL              CMJobKey_CMJobType = 0
	CMJobKey_CHECKSUM         CMJobKey_CMJobType = 1
	CMJobKey_FIND_SEAL_LENGTH CMJobKey_CMJobType = 2
	CMJobKey_GEO_REPLICATION  CMJobKey_CMJobType = 3
	CMJobKey_GEO_DELETE       CMJobKey_CMJobType = 4
	CMJobKey_LOCAL_COPY       CMJobKey_CMJobType = 5
	CMJobKey_EC_RECOVER       CMJobKey_CMJobType = 6
	CMJobKey_EC               CMJobKey_CMJobType = 7
)

var CMJobKey_CMJobType_name = map[int32]string{
	0: "ALL",
	1: "CHECKSUM",
	2: "FIND_SEAL_LENGTH",
	3: "GEO_REPLICATION",
	4: "GEO_DELETE",
	5: "LOCAL_COPY",
	6: "EC_RECOVER",
	7: "EC",
}
var CMJobKey_CMJobType_value = map[string]int32{
	"ALL":              0,
	"CHECKSUM":         1,
	"FIND_SEAL_LENGTH": 2,
	"GEO_REPLICATION":  3,
	"GEO_DELETE":       4,
	"LOCAL_COPY":       5,
	"EC_RECOVER":       6,
	"EC":               7,
}

func (x CMJobKey_CMJobType) Enum() *CMJobKey_CMJobType {
	p := new(CMJobKey_CMJobType)
	*p = x
	return p
}
func (x CMJobKey_CMJobType) String() string {
	return proto.EnumName(CMJobKey_CMJobType_name, int32(x))
}
func (x *CMJobKey_CMJobType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMJobKey_CMJobType_value, data, "CMJobKey_CMJobType")
	if err != nil {
		return err
	}
	*x = CMJobKey_CMJobType(value)
	return nil
}
func (CMJobKey_CMJobType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{35, 0} }

type CMProgressKey_CMProgressType int32

const (
	CMProgressKey_CC CMProgressKey_CMProgressType = 0
	CMProgressKey_GC CMProgressKey_CMProgressType = 1
)

var CMProgressKey_CMProgressType_name = map[int32]string{
	0: "CC",
	1: "GC",
}
var CMProgressKey_CMProgressType_value = map[string]int32{
	"CC": 0,
	"GC": 1,
}

func (x CMProgressKey_CMProgressType) Enum() *CMProgressKey_CMProgressType {
	p := new(CMProgressKey_CMProgressType)
	*p = x
	return p
}
func (x CMProgressKey_CMProgressType) String() string {
	return proto.EnumName(CMProgressKey_CMProgressType_name, int32(x))
}
func (x *CMProgressKey_CMProgressType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMProgressKey_CMProgressType_value, data, "CMProgressKey_CMProgressType")
	if err != nil {
		return err
	}
	*x = CMProgressKey_CMProgressType(value)
	return nil
}
func (CMProgressKey_CMProgressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{36, 0}
}

type RgReconfigTaskKey_ReconfigType int32

const (
	// for listing purpose
	RgReconfigTaskKey_ALL    RgReconfigTaskKey_ReconfigType = 0
	RgReconfigTaskKey_ADD    RgReconfigTaskKey_ReconfigType = 1
	RgReconfigTaskKey_REMOVE RgReconfigTaskKey_ReconfigType = 2
	RgReconfigTaskKey_FAIL   RgReconfigTaskKey_ReconfigType = 3
	// the ReconfigAdd is caught by a remote zone and then the remote zone
	// notify the local zone to insert ReconfigType task
	RgReconfigTaskKey_REMOTEADD RgReconfigTaskKey_ReconfigType = 4
)

var RgReconfigTaskKey_ReconfigType_name = map[int32]string{
	0: "ALL",
	1: "ADD",
	2: "REMOVE",
	3: "FAIL",
	4: "REMOTEADD",
}
var RgReconfigTaskKey_ReconfigType_value = map[string]int32{
	"ALL":       0,
	"ADD":       1,
	"REMOVE":    2,
	"FAIL":      3,
	"REMOTEADD": 4,
}

func (x RgReconfigTaskKey_ReconfigType) Enum() *RgReconfigTaskKey_ReconfigType {
	p := new(RgReconfigTaskKey_ReconfigType)
	*p = x
	return p
}
func (x RgReconfigTaskKey_ReconfigType) String() string {
	return proto.EnumName(RgReconfigTaskKey_ReconfigType_name, int32(x))
}
func (x *RgReconfigTaskKey_ReconfigType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RgReconfigTaskKey_ReconfigType_value, data, "RgReconfigTaskKey_ReconfigType")
	if err != nil {
		return err
	}
	*x = RgReconfigTaskKey_ReconfigType(value)
	return nil
}
func (RgReconfigTaskKey_ReconfigType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{38, 0}
}

type ListEntryKey_ListEntryType int32

const (
	ListEntryKey_KEYPOOL   ListEntryKey_ListEntryType = 0
	ListEntryKey_FSNS_DIR  ListEntryKey_ListEntryType = 1
	ListEntryKey_FSNS_FILE ListEntryKey_ListEntryType = 2
)

var ListEntryKey_ListEntryType_name = map[int32]string{
	0: "KEYPOOL",
	1: "FSNS_DIR",
	2: "FSNS_FILE",
}
var ListEntryKey_ListEntryType_value = map[string]int32{
	"KEYPOOL":   0,
	"FSNS_DIR":  1,
	"FSNS_FILE": 2,
}

func (x ListEntryKey_ListEntryType) Enum() *ListEntryKey_ListEntryType {
	p := new(ListEntryKey_ListEntryType)
	*p = x
	return p
}
func (x ListEntryKey_ListEntryType) String() string {
	return proto.EnumName(ListEntryKey_ListEntryType_name, int32(x))
}
func (x *ListEntryKey_ListEntryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ListEntryKey_ListEntryType_value, data, "ListEntryKey_ListEntryType")
	if err != nil {
		return err
	}
	*x = ListEntryKey_ListEntryType(value)
	return nil
}
func (ListEntryKey_ListEntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{39, 0}
}

type DeleteJobTableKey_DeleteJobTableKeyType int32

const (
	DeleteJobTableKey_DELETE_JOB            DeleteJobTableKey_DeleteJobTableKeyType = 0
	DeleteJobTableKey_CLEANUP_JOB           DeleteJobTableKey_DeleteJobTableKeyType = 1
	DeleteJobTableKey_DELETE_LIST_ENTRY_JOB DeleteJobTableKey_DeleteJobTableKeyType = 2
)

var DeleteJobTableKey_DeleteJobTableKeyType_name = map[int32]string{
	0: "DELETE_JOB",
	1: "CLEANUP_JOB",
	2: "DELETE_LIST_ENTRY_JOB",
}
var DeleteJobTableKey_DeleteJobTableKeyType_value = map[string]int32{
	"DELETE_JOB":            0,
	"CLEANUP_JOB":           1,
	"DELETE_LIST_ENTRY_JOB": 2,
}

func (x DeleteJobTableKey_DeleteJobTableKeyType) Enum() *DeleteJobTableKey_DeleteJobTableKeyType {
	p := new(DeleteJobTableKey_DeleteJobTableKeyType)
	*p = x
	return p
}
func (x DeleteJobTableKey_DeleteJobTableKeyType) String() string {
	return proto.EnumName(DeleteJobTableKey_DeleteJobTableKeyType_name, int32(x))
}
func (x *DeleteJobTableKey_DeleteJobTableKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeleteJobTableKey_DeleteJobTableKeyType_value, data, "DeleteJobTableKey_DeleteJobTableKeyType")
	if err != nil {
		return err
	}
	*x = DeleteJobTableKey_DeleteJobTableKeyType(value)
	return nil
}
func (DeleteJobTableKey_DeleteJobTableKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{40, 0}
}

type RepoReferenceKey_ReferenceType int32

const (
	// for listing purpose
	RepoReferenceKey_ALL      RepoReferenceKey_ReferenceType = 0
	RepoReferenceKey_POSITIVE RepoReferenceKey_ReferenceType = 1
	RepoReferenceKey_NEGATIVE RepoReferenceKey_ReferenceType = 2
)

var RepoReferenceKey_ReferenceType_name = map[int32]string{
	0: "ALL",
	1: "POSITIVE",
	2: "NEGATIVE",
}
var RepoReferenceKey_ReferenceType_value = map[string]int32{
	"ALL":      0,
	"POSITIVE": 1,
	"NEGATIVE": 2,
}

func (x RepoReferenceKey_ReferenceType) Enum() *RepoReferenceKey_ReferenceType {
	p := new(RepoReferenceKey_ReferenceType)
	*p = x
	return p
}
func (x RepoReferenceKey_ReferenceType) String() string {
	return proto.EnumName(RepoReferenceKey_ReferenceType_name, int32(x))
}
func (x *RepoReferenceKey_ReferenceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RepoReferenceKey_ReferenceType_value, data, "RepoReferenceKey_ReferenceType")
	if err != nil {
		return err
	}
	*x = RepoReferenceKey_ReferenceType(value)
	return nil
}
func (RepoReferenceKey_ReferenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{42, 0}
}

// only meaningful for positive entry
type RepoReferenceKey_CrossType int32

const (
	// for listing purpose
	RepoReferenceKey_ANY    RepoReferenceKey_CrossType = 0
	RepoReferenceKey_NORMAL RepoReferenceKey_CrossType = 1
	// positive added for cross reference
	RepoReferenceKey_CROSS RepoReferenceKey_CrossType = 2
)

var RepoReferenceKey_CrossType_name = map[int32]string{
	0: "ANY",
	1: "NORMAL",
	2: "CROSS",
}
var RepoReferenceKey_CrossType_value = map[string]int32{
	"ANY":    0,
	"NORMAL": 1,
	"CROSS":  2,
}

func (x RepoReferenceKey_CrossType) Enum() *RepoReferenceKey_CrossType {
	p := new(RepoReferenceKey_CrossType)
	*p = x
	return p
}
func (x RepoReferenceKey_CrossType) String() string {
	return proto.EnumName(RepoReferenceKey_CrossType_name, int32(x))
}
func (x *RepoReferenceKey_CrossType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RepoReferenceKey_CrossType_value, data, "RepoReferenceKey_CrossType")
	if err != nil {
		return err
	}
	*x = RepoReferenceKey_CrossType(value)
	return nil
}
func (RepoReferenceKey_CrossType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{42, 1}
}

type NKEntryReplicationTaskKey_NKTaskType int32

const (
	NKEntryReplicationTaskKey_ADD    NKEntryReplicationTaskKey_NKTaskType = 1
	NKEntryReplicationTaskKey_REMOVE NKEntryReplicationTaskKey_NKTaskType = 2
)

var NKEntryReplicationTaskKey_NKTaskType_name = map[int32]string{
	1: "ADD",
	2: "REMOVE",
}
var NKEntryReplicationTaskKey_NKTaskType_value = map[string]int32{
	"ADD":    1,
	"REMOVE": 2,
}

func (x NKEntryReplicationTaskKey_NKTaskType) Enum() *NKEntryReplicationTaskKey_NKTaskType {
	p := new(NKEntryReplicationTaskKey_NKTaskType)
	*p = x
	return p
}
func (x NKEntryReplicationTaskKey_NKTaskType) String() string {
	return proto.EnumName(NKEntryReplicationTaskKey_NKTaskType_name, int32(x))
}
func (x *NKEntryReplicationTaskKey_NKTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NKEntryReplicationTaskKey_NKTaskType_value, data, "NKEntryReplicationTaskKey_NKTaskType")
	if err != nil {
		return err
	}
	*x = NKEntryReplicationTaskKey_NKTaskType(value)
	return nil
}
func (NKEntryReplicationTaskKey_NKTaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{51, 0}
}

type ZKConfigKey_ConfigKeyType int32

const (
	ZKConfigKey_HEAD_TYPE_INFO  ZKConfigKey_ConfigKeyType = 0
	ZKConfigKey_OBJECT_BASE_URL ZKConfigKey_ConfigKeyType = 1
	ZKConfigKey_INGESTION_TASK  ZKConfigKey_ConfigKeyType = 2
	ZKConfigKey_VARRAY          ZKConfigKey_ConfigKeyType = 3
)

var ZKConfigKey_ConfigKeyType_name = map[int32]string{
	0: "HEAD_TYPE_INFO",
	1: "OBJECT_BASE_URL",
	2: "INGESTION_TASK",
	3: "VARRAY",
}
var ZKConfigKey_ConfigKeyType_value = map[string]int32{
	"HEAD_TYPE_INFO":  0,
	"OBJECT_BASE_URL": 1,
	"INGESTION_TASK":  2,
	"VARRAY":          3,
}

func (x ZKConfigKey_ConfigKeyType) Enum() *ZKConfigKey_ConfigKeyType {
	p := new(ZKConfigKey_ConfigKeyType)
	*p = x
	return p
}
func (x ZKConfigKey_ConfigKeyType) String() string {
	return proto.EnumName(ZKConfigKey_ConfigKeyType_name, int32(x))
}
func (x *ZKConfigKey_ConfigKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ZKConfigKey_ConfigKeyType_value, data, "ZKConfigKey_ConfigKeyType")
	if err != nil {
		return err
	}
	*x = ZKConfigKey_ConfigKeyType(value)
	return nil
}
func (ZKConfigKey_ConfigKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{52, 0}
}

type SchemaKey struct {
	Type             *SchemaKeyType `protobuf:"varint,1,req,name=type,enum=or.SchemaKeyType" json:"type,omitempty"`
	UserKey          []byte         `protobuf:"bytes,2,req,name=userKey" json:"userKey,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *SchemaKey) Reset()                    { *m = SchemaKey{} }
func (m *SchemaKey) String() string            { return proto.CompactTextString(m) }
func (*SchemaKey) ProtoMessage()               {}
func (*SchemaKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *SchemaKey) GetType() SchemaKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SchemaKeyType_DEFAULT_KEY
}

func (m *SchemaKey) GetUserKey() []byte {
	if m != nil {
		return m.UserKey
	}
	return nil
}

// The default key for old DirectoryTableKey
type DefaultSchemaKey struct {
	Parent           *string `protobuf:"bytes,1,req,name=parent" json:"parent,omitempty"`
	Type             *string `protobuf:"bytes,2,req,name=type" json:"type,omitempty"`
	Child            *string `protobuf:"bytes,3,req,name=child" json:"child,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DefaultSchemaKey) Reset()                    { *m = DefaultSchemaKey{} }
func (m *DefaultSchemaKey) String() string            { return proto.CompactTextString(m) }
func (*DefaultSchemaKey) ProtoMessage()               {}
func (*DefaultSchemaKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *DefaultSchemaKey) GetParent() string {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return ""
}

func (m *DefaultSchemaKey) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *DefaultSchemaKey) GetChild() string {
	if m != nil && m.Child != nil {
		return *m.Child
	}
	return ""
}

// DirectoryTable Record related keys
type DTRecordKey struct {
	Type *DTRecordKey_DTRecordKeyType `protobuf:"varint,1,req,name=type,enum=or.DTRecordKey_DTRecordKeyType" json:"type,omitempty"`
	DtId *string                      `protobuf:"bytes,2,req,name=dtId" json:"dtId,omitempty"`
	Zone *string                      `protobuf:"bytes,3,req,name=zone" json:"zone,omitempty"`
	// the detail keys for different type DTRecordKey
	SubKey           []byte `protobuf:"bytes,4,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DTRecordKey) Reset()                    { *m = DTRecordKey{} }
func (m *DTRecordKey) String() string            { return proto.CompactTextString(m) }
func (*DTRecordKey) ProtoMessage()               {}
func (*DTRecordKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *DTRecordKey) GetType() DTRecordKey_DTRecordKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DTRecordKey_JOURNAL_REGION
}

func (m *DTRecordKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *DTRecordKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

func (m *DTRecordKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type DTRecordJournalRegionSubKey struct {
	Major            *string `protobuf:"bytes,1,req,name=major" json:"major,omitempty"`
	Minor            *string `protobuf:"bytes,2,req,name=minor" json:"minor,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTRecordJournalRegionSubKey) Reset()                    { *m = DTRecordJournalRegionSubKey{} }
func (m *DTRecordJournalRegionSubKey) String() string            { return proto.CompactTextString(m) }
func (*DTRecordJournalRegionSubKey) ProtoMessage()               {}
func (*DTRecordJournalRegionSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *DTRecordJournalRegionSubKey) GetMajor() string {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return ""
}

func (m *DTRecordJournalRegionSubKey) GetMinor() string {
	if m != nil && m.Minor != nil {
		return *m.Minor
	}
	return ""
}

type DTRecordBPTreeInfoSubKey struct {
	Major            *string `protobuf:"bytes,1,req,name=major" json:"major,omitempty"`
	Minor            *string `protobuf:"bytes,2,req,name=minor" json:"minor,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTRecordBPTreeInfoSubKey) Reset()                    { *m = DTRecordBPTreeInfoSubKey{} }
func (m *DTRecordBPTreeInfoSubKey) String() string            { return proto.CompactTextString(m) }
func (*DTRecordBPTreeInfoSubKey) ProtoMessage()               {}
func (*DTRecordBPTreeInfoSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *DTRecordBPTreeInfoSubKey) GetMajor() string {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return ""
}

func (m *DTRecordBPTreeInfoSubKey) GetMinor() string {
	if m != nil && m.Minor != nil {
		return *m.Minor
	}
	return ""
}

type DTRecordBPTreeBootstrapSubKey struct {
	DstZone          *string `protobuf:"bytes,1,req,name=dstZone" json:"dstZone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTRecordBPTreeBootstrapSubKey) Reset()                    { *m = DTRecordBPTreeBootstrapSubKey{} }
func (m *DTRecordBPTreeBootstrapSubKey) String() string            { return proto.CompactTextString(m) }
func (*DTRecordBPTreeBootstrapSubKey) ProtoMessage()               {}
func (*DTRecordBPTreeBootstrapSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *DTRecordBPTreeBootstrapSubKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

type DTRecordBPTreeBootstrapJournalSubKey struct {
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTRecordBPTreeBootstrapJournalSubKey) Reset()         { *m = DTRecordBPTreeBootstrapJournalSubKey{} }
func (m *DTRecordBPTreeBootstrapJournalSubKey) String() string { return proto.CompactTextString(m) }
func (*DTRecordBPTreeBootstrapJournalSubKey) ProtoMessage()    {}
func (*DTRecordBPTreeBootstrapJournalSubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{6}
}

func (m *DTRecordBPTreeBootstrapJournalSubKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

// DirectoryTable ownership related keys
type DTOwnerKey struct {
	DtType           *string `protobuf:"bytes,1,req,name=dtType" json:"dtType,omitempty"`
	DtId             *string `protobuf:"bytes,2,req,name=dtId" json:"dtId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTOwnerKey) Reset()                    { *m = DTOwnerKey{} }
func (m *DTOwnerKey) String() string            { return proto.CompactTextString(m) }
func (*DTOwnerKey) ProtoMessage()               {}
func (*DTOwnerKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *DTOwnerKey) GetDtType() string {
	if m != nil && m.DtType != nil {
		return *m.DtType
	}
	return ""
}

func (m *DTOwnerKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

// OrderedTask common definitions
type TaskOrder struct {
	Order            *int64 `protobuf:"varint,1,req,name=order" json:"order,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TaskOrder) Reset()                    { *m = TaskOrder{} }
func (m *TaskOrder) String() string            { return proto.CompactTextString(m) }
func (*TaskOrder) ProtoMessage()               {}
func (*TaskOrder) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *TaskOrder) GetOrder() int64 {
	if m != nil && m.Order != nil {
		return *m.Order
	}
	return 0
}

// Metering related keys
type MTTableRecordKey struct {
	Type             *MTTableRecordKey_Type `protobuf:"varint,1,req,name=type,enum=or.MTTableRecordKey_Type" json:"type,omitempty"`
	SubKey           []byte                 `protobuf:"bytes,2,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *MTTableRecordKey) Reset()                    { *m = MTTableRecordKey{} }
func (m *MTTableRecordKey) String() string            { return proto.CompactTextString(m) }
func (*MTTableRecordKey) ProtoMessage()               {}
func (*MTTableRecordKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *MTTableRecordKey) GetType() MTTableRecordKey_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MTTableRecordKey_STORAGE_STAT
}

func (m *MTTableRecordKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type MTStorageStatKey struct {
	DtId             *string                 `protobuf:"bytes,1,req,name=DtId" json:"DtId,omitempty"`
	StatState        *MTStorageStatKey_State `protobuf:"varint,2,opt,name=StatState,enum=or.MTStorageStatKey_State" json:"StatState,omitempty"`
	CollectorVersion *int64                  `protobuf:"varint,3,req,name=CollectorVersion" json:"CollectorVersion,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *MTStorageStatKey) Reset()                    { *m = MTStorageStatKey{} }
func (m *MTStorageStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTStorageStatKey) ProtoMessage()               {}
func (*MTStorageStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *MTStorageStatKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *MTStorageStatKey) GetStatState() MTStorageStatKey_State {
	if m != nil && m.StatState != nil {
		return *m.StatState
	}
	return MTStorageStatKey_InProgress
}

func (m *MTStorageStatKey) GetCollectorVersion() int64 {
	if m != nil && m.CollectorVersion != nil {
		return *m.CollectorVersion
	}
	return 0
}

type MTAggregatedStorageStatKey struct {
	AggregatorVersion *int64 `protobuf:"varint,1,req,name=AggregatorVersion" json:"AggregatorVersion,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *MTAggregatedStorageStatKey) Reset()                    { *m = MTAggregatedStorageStatKey{} }
func (m *MTAggregatedStorageStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTAggregatedStorageStatKey) ProtoMessage()               {}
func (*MTAggregatedStorageStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *MTAggregatedStorageStatKey) GetAggregatorVersion() int64 {
	if m != nil && m.AggregatorVersion != nil {
		return *m.AggregatorVersion
	}
	return 0
}

type MTBandwidthStatKey struct {
	NodeId           *string `protobuf:"bytes,1,req,name=NodeId" json:"NodeId,omitempty"`
	BandwidthVersion *int64  `protobuf:"varint,2,req,name=BandwidthVersion" json:"BandwidthVersion,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTBandwidthStatKey) Reset()                    { *m = MTBandwidthStatKey{} }
func (m *MTBandwidthStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTBandwidthStatKey) ProtoMessage()               {}
func (*MTBandwidthStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *MTBandwidthStatKey) GetNodeId() string {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return ""
}

func (m *MTBandwidthStatKey) GetBandwidthVersion() int64 {
	if m != nil && m.BandwidthVersion != nil {
		return *m.BandwidthVersion
	}
	return 0
}

type MTAggregatedBandwidthStatKey struct {
	AggregatorVersion *int64 `protobuf:"varint,1,req,name=AggregatorVersion" json:"AggregatorVersion,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *MTAggregatedBandwidthStatKey) Reset()                    { *m = MTAggregatedBandwidthStatKey{} }
func (m *MTAggregatedBandwidthStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTAggregatedBandwidthStatKey) ProtoMessage()               {}
func (*MTAggregatedBandwidthStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *MTAggregatedBandwidthStatKey) GetAggregatorVersion() int64 {
	if m != nil && m.AggregatorVersion != nil {
		return *m.AggregatorVersion
	}
	return 0
}

// RM task related keys
type RMTaskKey struct {
	Type             *RMTaskKey_RMTaskType `protobuf:"varint,1,req,name=type,enum=or.RMTaskKey_RMTaskType" json:"type,omitempty"`
	TaskOrder        *TaskOrder            `protobuf:"bytes,2,req,name=taskOrder" json:"taskOrder,omitempty"`
	DtId             *string               `protobuf:"bytes,3,req,name=dtId" json:"dtId,omitempty"`
	SubKey           []byte                `protobuf:"bytes,4,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *RMTaskKey) Reset()                    { *m = RMTaskKey{} }
func (m *RMTaskKey) String() string            { return proto.CompactTextString(m) }
func (*RMTaskKey) ProtoMessage()               {}
func (*RMTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *RMTaskKey) GetType() RMTaskKey_RMTaskType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RMTaskKey_JOURNAL_ENTRY_GEO_SEND
}

func (m *RMTaskKey) GetTaskOrder() *TaskOrder {
	if m != nil {
		return m.TaskOrder
	}
	return nil
}

func (m *RMTaskKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *RMTaskKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type ObjectTableKey struct {
	ObjectId *string                            `protobuf:"bytes,1,req,name=objectId" json:"objectId,omitempty"`
	Type     *ObjectTableKey_ObjectTableKeyType `protobuf:"varint,2,opt,name=type,enum=or.ObjectTableKey_ObjectTableKeyType" json:"type,omitempty"`
	// update entry does not have versionId
	// index entry always has version, null version will have versionId = 0
	VersionId             *int64                                `protobuf:"varint,3,opt,name=versionId" json:"versionId,omitempty"`
	ObjectIndexKeySubType *ObjectTableKey_ObjectIndexKeySubType `protobuf:"varint,4,opt,name=objectIndexKeySubType,enum=or.ObjectTableKey_ObjectIndexKeySubType" json:"objectIndexKeySubType,omitempty"`
	// Only for range key
	Offset           *int64  `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Sequence         *int64  `protobuf:"varint,6,opt,name=sequence" json:"sequence,omitempty"`
	UploadId         *string `protobuf:"bytes,7,opt,name=uploadId" json:"uploadId,omitempty"`
	PartNum          *int32  `protobuf:"varint,8,opt,name=partNum" json:"partNum,omitempty"`
	PartSeq          *int64  `protobuf:"varint,9,opt,name=partSeq" json:"partSeq,omitempty"`
	KeypoolId        *string `protobuf:"bytes,10,opt,name=keypoolId" json:"keypoolId,omitempty"`
	CrossReferenceId *string `protobuf:"bytes,11,opt,name=crossReferenceId" json:"crossReferenceId,omitempty"`
	// source chunkId if "COPY" scenario; for CROSS_REFERENCE type
	ChunkId          *string `protobuf:"bytes,12,opt,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ObjectTableKey) Reset()                    { *m = ObjectTableKey{} }
func (m *ObjectTableKey) String() string            { return proto.CompactTextString(m) }
func (*ObjectTableKey) ProtoMessage()               {}
func (*ObjectTableKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *ObjectTableKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *ObjectTableKey) GetType() ObjectTableKey_ObjectTableKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ObjectTableKey_COMPACTION_MARKER
}

func (m *ObjectTableKey) GetVersionId() int64 {
	if m != nil && m.VersionId != nil {
		return *m.VersionId
	}
	return 0
}

func (m *ObjectTableKey) GetObjectIndexKeySubType() ObjectTableKey_ObjectIndexKeySubType {
	if m != nil && m.ObjectIndexKeySubType != nil {
		return *m.ObjectIndexKeySubType
	}
	return ObjectTableKey_HEAD_METADATA
}

func (m *ObjectTableKey) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *ObjectTableKey) GetSequence() int64 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *ObjectTableKey) GetUploadId() string {
	if m != nil && m.UploadId != nil {
		return *m.UploadId
	}
	return ""
}

func (m *ObjectTableKey) GetPartNum() int32 {
	if m != nil && m.PartNum != nil {
		return *m.PartNum
	}
	return 0
}

func (m *ObjectTableKey) GetPartSeq() int64 {
	if m != nil && m.PartSeq != nil {
		return *m.PartSeq
	}
	return 0
}

func (m *ObjectTableKey) GetKeypoolId() string {
	if m != nil && m.KeypoolId != nil {
		return *m.KeypoolId
	}
	return ""
}

func (m *ObjectTableKey) GetCrossReferenceId() string {
	if m != nil && m.CrossReferenceId != nil {
		return *m.CrossReferenceId
	}
	return ""
}

func (m *ObjectTableKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

type RMTaskJournalEntryGeoSendKey struct {
	Major            *string `protobuf:"bytes,1,req,name=major" json:"major,omitempty"`
	DstZone          *string `protobuf:"bytes,2,req,name=dstZone" json:"dstZone,omitempty"`
	Cos              *string `protobuf:"bytes,3,req,name=cos" json:"cos,omitempty"`
	RgId             *string `protobuf:"bytes,4,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RMTaskJournalEntryGeoSendKey) Reset()                    { *m = RMTaskJournalEntryGeoSendKey{} }
func (m *RMTaskJournalEntryGeoSendKey) String() string            { return proto.CompactTextString(m) }
func (*RMTaskJournalEntryGeoSendKey) ProtoMessage()               {}
func (*RMTaskJournalEntryGeoSendKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *RMTaskJournalEntryGeoSendKey) GetMajor() string {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return ""
}

func (m *RMTaskJournalEntryGeoSendKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

func (m *RMTaskJournalEntryGeoSendKey) GetCos() string {
	if m != nil && m.Cos != nil {
		return *m.Cos
	}
	return ""
}

func (m *RMTaskJournalEntryGeoSendKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

type RMTaskRecoveryPointSendKey struct {
	FailedZone       *string `protobuf:"bytes,1,req,name=failedZone" json:"failedZone,omitempty"`
	Cos              *string `protobuf:"bytes,2,req,name=cos" json:"cos,omitempty"`
	RgId             *string `protobuf:"bytes,3,req,name=rgId" json:"rgId,omitempty"`
	DstZone          *string `protobuf:"bytes,4,req,name=dstZone" json:"dstZone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RMTaskRecoveryPointSendKey) Reset()                    { *m = RMTaskRecoveryPointSendKey{} }
func (m *RMTaskRecoveryPointSendKey) String() string            { return proto.CompactTextString(m) }
func (*RMTaskRecoveryPointSendKey) ProtoMessage()               {}
func (*RMTaskRecoveryPointSendKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *RMTaskRecoveryPointSendKey) GetFailedZone() string {
	if m != nil && m.FailedZone != nil {
		return *m.FailedZone
	}
	return ""
}

func (m *RMTaskRecoveryPointSendKey) GetCos() string {
	if m != nil && m.Cos != nil {
		return *m.Cos
	}
	return ""
}

func (m *RMTaskRecoveryPointSendKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *RMTaskRecoveryPointSendKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

// SSM realted keys
type SSTableRecordKey struct {
	Type             *SSTableRecordKey_Type `protobuf:"varint,1,req,name=type,enum=or.SSTableRecordKey_Type" json:"type,omitempty"`
	SubKey           []byte                 `protobuf:"bytes,2,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *SSTableRecordKey) Reset()                    { *m = SSTableRecordKey{} }
func (m *SSTableRecordKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableRecordKey) ProtoMessage()               {}
func (*SSTableRecordKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *SSTableRecordKey) GetType() SSTableRecordKey_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SSTableRecordKey_FREE_BLOCK
}

func (m *SSTableRecordKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type SSTableDeviceEntryKey struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSTableDeviceEntryKey) Reset()                    { *m = SSTableDeviceEntryKey{} }
func (m *SSTableDeviceEntryKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableDeviceEntryKey) ProtoMessage()               {}
func (*SSTableDeviceEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *SSTableDeviceEntryKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

type SSTablePartitionEntryKey struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	PartitionId      *string `protobuf:"bytes,2,req,name=partitionId" json:"partitionId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSTablePartitionEntryKey) Reset()                    { *m = SSTablePartitionEntryKey{} }
func (m *SSTablePartitionEntryKey) String() string            { return proto.CompactTextString(m) }
func (*SSTablePartitionEntryKey) ProtoMessage()               {}
func (*SSTablePartitionEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *SSTablePartitionEntryKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *SSTablePartitionEntryKey) GetPartitionId() string {
	if m != nil && m.PartitionId != nil {
		return *m.PartitionId
	}
	return ""
}

type SSTableFreeBlockEntryKey struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	PartitionId      *string `protobuf:"bytes,2,req,name=partitionId" json:"partitionId,omitempty"`
	BlockBinId       *string `protobuf:"bytes,3,req,name=blockBinId" json:"blockBinId,omitempty"`
	Offset           *int64  `protobuf:"varint,4,req,name=offset" json:"offset,omitempty"`
	FreedTime        *int64  `protobuf:"varint,5,opt,name=freedTime" json:"freedTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSTableFreeBlockEntryKey) Reset()                    { *m = SSTableFreeBlockEntryKey{} }
func (m *SSTableFreeBlockEntryKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableFreeBlockEntryKey) ProtoMessage()               {}
func (*SSTableFreeBlockEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *SSTableFreeBlockEntryKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *SSTableFreeBlockEntryKey) GetPartitionId() string {
	if m != nil && m.PartitionId != nil {
		return *m.PartitionId
	}
	return ""
}

func (m *SSTableFreeBlockEntryKey) GetBlockBinId() string {
	if m != nil && m.BlockBinId != nil {
		return *m.BlockBinId
	}
	return ""
}

func (m *SSTableFreeBlockEntryKey) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *SSTableFreeBlockEntryKey) GetFreedTime() int64 {
	if m != nil && m.FreedTime != nil {
		return *m.FreedTime
	}
	return 0
}

type SSTableBusyBlockEntryKey struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	PartitionId      *string `protobuf:"bytes,2,req,name=partitionId" json:"partitionId,omitempty"`
	BlockBinId       *string `protobuf:"bytes,3,req,name=blockBinId" json:"blockBinId,omitempty"`
	Offset           *int64  `protobuf:"varint,4,req,name=offset" json:"offset,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSTableBusyBlockEntryKey) Reset()                    { *m = SSTableBusyBlockEntryKey{} }
func (m *SSTableBusyBlockEntryKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableBusyBlockEntryKey) ProtoMessage()               {}
func (*SSTableBusyBlockEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *SSTableBusyBlockEntryKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *SSTableBusyBlockEntryKey) GetPartitionId() string {
	if m != nil && m.PartitionId != nil {
		return *m.PartitionId
	}
	return ""
}

func (m *SSTableBusyBlockEntryKey) GetBlockBinId() string {
	if m != nil && m.BlockBinId != nil {
		return *m.BlockBinId
	}
	return ""
}

func (m *SSTableBusyBlockEntryKey) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

type SSTableBlockBinEntryKey struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	PartitionId      *string `protobuf:"bytes,2,req,name=partitionId" json:"partitionId,omitempty"`
	BlockBinId       *string `protobuf:"bytes,3,req,name=blockBinId" json:"blockBinId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSTableBlockBinEntryKey) Reset()                    { *m = SSTableBlockBinEntryKey{} }
func (m *SSTableBlockBinEntryKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableBlockBinEntryKey) ProtoMessage()               {}
func (*SSTableBlockBinEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *SSTableBlockBinEntryKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *SSTableBlockBinEntryKey) GetPartitionId() string {
	if m != nil && m.PartitionId != nil {
		return *m.PartitionId
	}
	return ""
}

func (m *SSTableBlockBinEntryKey) GetBlockBinId() string {
	if m != nil && m.BlockBinId != nil {
		return *m.BlockBinId
	}
	return ""
}

type SSTableBlockLevelTaskKey struct {
	Type             *SSTableBlockLevelTaskKey_Type `protobuf:"varint,1,req,name=type,enum=or.SSTableBlockLevelTaskKey_Type" json:"type,omitempty"`
	DeviceId         *string                        `protobuf:"bytes,2,req,name=deviceId" json:"deviceId,omitempty"`
	PartitionId      *string                        `protobuf:"bytes,3,req,name=partitionId" json:"partitionId,omitempty"`
	BlockBinId       *string                        `protobuf:"bytes,4,req,name=blockBinId" json:"blockBinId,omitempty"`
	Offset           *int64                         `protobuf:"varint,5,req,name=offset" json:"offset,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *SSTableBlockLevelTaskKey) Reset()                    { *m = SSTableBlockLevelTaskKey{} }
func (m *SSTableBlockLevelTaskKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableBlockLevelTaskKey) ProtoMessage()               {}
func (*SSTableBlockLevelTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *SSTableBlockLevelTaskKey) GetType() SSTableBlockLevelTaskKey_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SSTableBlockLevelTaskKey_BLOCK_ALLOCATE_TASK
}

func (m *SSTableBlockLevelTaskKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *SSTableBlockLevelTaskKey) GetPartitionId() string {
	if m != nil && m.PartitionId != nil {
		return *m.PartitionId
	}
	return ""
}

func (m *SSTableBlockLevelTaskKey) GetBlockBinId() string {
	if m != nil && m.BlockBinId != nil {
		return *m.BlockBinId
	}
	return ""
}

func (m *SSTableBlockLevelTaskKey) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

type DTBootstrapTaskKey struct {
	Type             *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	RgId             *string `protobuf:"bytes,2,req,name=rgId" json:"rgId,omitempty"`
	Cos              *string `protobuf:"bytes,3,req,name=cos" json:"cos,omitempty"`
	DstZone          *string `protobuf:"bytes,4,req,name=dstZone" json:"dstZone,omitempty"`
	DtId             *string `protobuf:"bytes,5,req,name=dtId" json:"dtId,omitempty"`
	SrcZone          *string `protobuf:"bytes,6,req,name=srcZone" json:"srcZone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTBootstrapTaskKey) Reset()                    { *m = DTBootstrapTaskKey{} }
func (m *DTBootstrapTaskKey) String() string            { return proto.CompactTextString(m) }
func (*DTBootstrapTaskKey) ProtoMessage()               {}
func (*DTBootstrapTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{25} }

func (m *DTBootstrapTaskKey) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *DTBootstrapTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *DTBootstrapTaskKey) GetCos() string {
	if m != nil && m.Cos != nil {
		return *m.Cos
	}
	return ""
}

func (m *DTBootstrapTaskKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

func (m *DTBootstrapTaskKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *DTBootstrapTaskKey) GetSrcZone() string {
	if m != nil && m.SrcZone != nil {
		return *m.SrcZone
	}
	return ""
}

type GCRefCollectionKey struct {
	Type *GCRefCollectionKey_GCRefType `protobuf:"varint,1,req,name=type,enum=or.GCRefCollectionKey_GCRefType" json:"type,omitempty"`
	// chunk table id
	CtId *string `protobuf:"bytes,2,req,name=ctId" json:"ctId,omitempty"`
	Zone *string `protobuf:"bytes,3,req,name=zone" json:"zone,omitempty"`
	RgId *string `protobuf:"bytes,4,req,name=rgId" json:"rgId,omitempty"`
	// OB table id
	ObId             *string `protobuf:"bytes,5,req,name=obId" json:"obId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GCRefCollectionKey) Reset()                    { *m = GCRefCollectionKey{} }
func (m *GCRefCollectionKey) String() string            { return proto.CompactTextString(m) }
func (*GCRefCollectionKey) ProtoMessage()               {}
func (*GCRefCollectionKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *GCRefCollectionKey) GetType() GCRefCollectionKey_GCRefType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return GCRefCollectionKey_REPO
}

func (m *GCRefCollectionKey) GetCtId() string {
	if m != nil && m.CtId != nil {
		return *m.CtId
	}
	return ""
}

func (m *GCRefCollectionKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

func (m *GCRefCollectionKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *GCRefCollectionKey) GetObId() string {
	if m != nil && m.ObId != nil {
		return *m.ObId
	}
	return ""
}

type ChunkKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChunkKey) Reset()                    { *m = ChunkKey{} }
func (m *ChunkKey) String() string            { return proto.CompactTextString(m) }
func (*ChunkKey) ProtoMessage()               {}
func (*ChunkKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *ChunkKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

type CMTaskKey struct {
	Type      *CMTaskKey_CMTaskType `protobuf:"varint,1,req,name=type,enum=or.CMTaskKey_CMTaskType" json:"type,omitempty"`
	TaskOrder *TaskOrder            `protobuf:"bytes,2,req,name=taskOrder" json:"taskOrder,omitempty"`
	ChunkId   *string               `protobuf:"bytes,3,req,name=chunkId" json:"chunkId,omitempty"`
	// extended part for each detailed task, just a simple manual GPB extension
	SubKey           []byte `protobuf:"bytes,4,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMTaskKey) Reset()                    { *m = CMTaskKey{} }
func (m *CMTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMTaskKey) ProtoMessage()               {}
func (*CMTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{28} }

func (m *CMTaskKey) GetType() CMTaskKey_CMTaskType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMTaskKey_SEAL
}

func (m *CMTaskKey) GetTaskOrder() *TaskOrder {
	if m != nil {
		return m.TaskOrder
	}
	return nil
}

func (m *CMTaskKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *CMTaskKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type CMGeoInfoSendTaskKey struct {
	// dest zone precedes order and chunk id in comparing
	DestZone   *string                          `protobuf:"bytes,1,req,name=destZone" json:"destZone,omitempty"`
	Cos        *string                          `protobuf:"bytes,2,req,name=cos" json:"cos,omitempty"`
	RgId       *string                          `protobuf:"bytes,3,req,name=rgId" json:"rgId,omitempty"`
	UpdateType *CMGeoInfoSendTaskKey_UpdateType `protobuf:"varint,4,req,name=updateType,enum=or.CMGeoInfoSendTaskKey_UpdateType" json:"updateType,omitempty"`
	// secondary zone
	Secondary        *string `protobuf:"bytes,5,req,name=secondary" json:"secondary,omitempty"`
	IsReplicated     *bool   `protobuf:"varint,6,req,name=isReplicated" json:"isReplicated,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMGeoInfoSendTaskKey) Reset()                    { *m = CMGeoInfoSendTaskKey{} }
func (m *CMGeoInfoSendTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMGeoInfoSendTaskKey) ProtoMessage()               {}
func (*CMGeoInfoSendTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{29} }

func (m *CMGeoInfoSendTaskKey) GetDestZone() string {
	if m != nil && m.DestZone != nil {
		return *m.DestZone
	}
	return ""
}

func (m *CMGeoInfoSendTaskKey) GetCos() string {
	if m != nil && m.Cos != nil {
		return *m.Cos
	}
	return ""
}

func (m *CMGeoInfoSendTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *CMGeoInfoSendTaskKey) GetUpdateType() CMGeoInfoSendTaskKey_UpdateType {
	if m != nil && m.UpdateType != nil {
		return *m.UpdateType
	}
	return CMGeoInfoSendTaskKey_CREATE
}

func (m *CMGeoInfoSendTaskKey) GetSecondary() string {
	if m != nil && m.Secondary != nil {
		return *m.Secondary
	}
	return ""
}

func (m *CMGeoInfoSendTaskKey) GetIsReplicated() bool {
	if m != nil && m.IsReplicated != nil {
		return *m.IsReplicated
	}
	return false
}

type CMGeoDataSendTaskKey struct {
	Secondary        *string `protobuf:"bytes,1,req,name=secondary" json:"secondary,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMGeoDataSendTaskKey) Reset()                    { *m = CMGeoDataSendTaskKey{} }
func (m *CMGeoDataSendTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMGeoDataSendTaskKey) ProtoMessage()               {}
func (*CMGeoDataSendTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{30} }

func (m *CMGeoDataSendTaskKey) GetSecondary() string {
	if m != nil && m.Secondary != nil {
		return *m.Secondary
	}
	return ""
}

type CMGeoCopyTaskKey struct {
	OpId             *string `protobuf:"bytes,1,req,name=opId" json:"opId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMGeoCopyTaskKey) Reset()                    { *m = CMGeoCopyTaskKey{} }
func (m *CMGeoCopyTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMGeoCopyTaskKey) ProtoMessage()               {}
func (*CMGeoCopyTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{31} }

func (m *CMGeoCopyTaskKey) GetOpId() string {
	if m != nil && m.OpId != nil {
		return *m.OpId
	}
	return ""
}

type CMXorGroupTaskKey struct {
	// rgId and primary precede order and chunk id in comparing
	RgId *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	// primary zone
	Primary          *string `protobuf:"bytes,2,req,name=primary" json:"primary,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMXorGroupTaskKey) Reset()                    { *m = CMXorGroupTaskKey{} }
func (m *CMXorGroupTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMXorGroupTaskKey) ProtoMessage()               {}
func (*CMXorGroupTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{32} }

func (m *CMXorGroupTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *CMXorGroupTaskKey) GetPrimary() string {
	if m != nil && m.Primary != nil {
		return *m.Primary
	}
	return ""
}

type CMXorEncodeTaskKey struct {
	// rgId precedes order and chunk id in comparing
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMXorEncodeTaskKey) Reset()                    { *m = CMXorEncodeTaskKey{} }
func (m *CMXorEncodeTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMXorEncodeTaskKey) ProtoMessage()               {}
func (*CMXorEncodeTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{33} }

func (m *CMXorEncodeTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

// keep the XOR encode and decode as two separate ones,
// so it is free to add field in one without impact the other
type CMXorDecodeTaskKey struct {
	// rgId precedes order and chunk id in comparing
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMXorDecodeTaskKey) Reset()                    { *m = CMXorDecodeTaskKey{} }
func (m *CMXorDecodeTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMXorDecodeTaskKey) ProtoMessage()               {}
func (*CMXorDecodeTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{34} }

func (m *CMXorDecodeTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

type CMJobKey struct {
	ChunkId          *string             `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	Type             *CMJobKey_CMJobType `protobuf:"varint,2,req,name=type,enum=or.CMJobKey_CMJobType" json:"type,omitempty"`
	JobId            *string             `protobuf:"bytes,3,req,name=jobId" json:"jobId,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *CMJobKey) Reset()                    { *m = CMJobKey{} }
func (m *CMJobKey) String() string            { return proto.CompactTextString(m) }
func (*CMJobKey) ProtoMessage()               {}
func (*CMJobKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{35} }

func (m *CMJobKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *CMJobKey) GetType() CMJobKey_CMJobType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMJobKey_ALL
}

func (m *CMJobKey) GetJobId() string {
	if m != nil && m.JobId != nil {
		return *m.JobId
	}
	return ""
}

type CMProgressKey struct {
	Type             *CMProgressKey_CMProgressType `protobuf:"varint,1,req,name=type,enum=or.CMProgressKey_CMProgressType" json:"type,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CMProgressKey) Reset()                    { *m = CMProgressKey{} }
func (m *CMProgressKey) String() string            { return proto.CompactTextString(m) }
func (*CMProgressKey) ProtoMessage()               {}
func (*CMProgressKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{36} }

func (m *CMProgressKey) GetType() CMProgressKey_CMProgressType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMProgressKey_CC
}

type ChunkSequenceKey struct {
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChunkSequenceKey) Reset()                    { *m = ChunkSequenceKey{} }
func (m *ChunkSequenceKey) String() string            { return proto.CompactTextString(m) }
func (*ChunkSequenceKey) ProtoMessage()               {}
func (*ChunkSequenceKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{37} }

func (m *ChunkSequenceKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

type RgReconfigTaskKey struct {
	RgId             *string                         `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	Type             *RgReconfigTaskKey_ReconfigType `protobuf:"varint,2,req,name=type,enum=or.RgReconfigTaskKey_ReconfigType" json:"type,omitempty"`
	Zone             *string                         `protobuf:"bytes,3,req,name=zone" json:"zone,omitempty"`
	DtId             *string                         `protobuf:"bytes,4,req,name=dtId" json:"dtId,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *RgReconfigTaskKey) Reset()                    { *m = RgReconfigTaskKey{} }
func (m *RgReconfigTaskKey) String() string            { return proto.CompactTextString(m) }
func (*RgReconfigTaskKey) ProtoMessage()               {}
func (*RgReconfigTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{38} }

func (m *RgReconfigTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *RgReconfigTaskKey) GetType() RgReconfigTaskKey_ReconfigType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RgReconfigTaskKey_ALL
}

func (m *RgReconfigTaskKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

func (m *RgReconfigTaskKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

// the keypool/namespace listing entry
type ListEntryKey struct {
	Type             *ListEntryKey_ListEntryType `protobuf:"varint,1,req,name=type,enum=or.ListEntryKey_ListEntryType" json:"type,omitempty"`
	Parent           *string                     `protobuf:"bytes,2,req,name=parent" json:"parent,omitempty"`
	Child            *string                     `protobuf:"bytes,3,req,name=child" json:"child,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *ListEntryKey) Reset()                    { *m = ListEntryKey{} }
func (m *ListEntryKey) String() string            { return proto.CompactTextString(m) }
func (*ListEntryKey) ProtoMessage()               {}
func (*ListEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{39} }

func (m *ListEntryKey) GetType() ListEntryKey_ListEntryType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ListEntryKey_KEYPOOL
}

func (m *ListEntryKey) GetParent() string {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return ""
}

func (m *ListEntryKey) GetChild() string {
	if m != nil && m.Child != nil {
		return *m.Child
	}
	return ""
}

type DeleteJobTableKey struct {
	Type       *DeleteJobTableKey_DeleteJobTableKeyType `protobuf:"varint,1,req,name=type,enum=or.DeleteJobTableKey_DeleteJobTableKeyType" json:"type,omitempty"`
	ExpireTime *int64                                   `protobuf:"varint,2,req,name=expireTime" json:"expireTime,omitempty"`
	// For delete job
	ObjectId *string `protobuf:"bytes,3,opt,name=objectId" json:"objectId,omitempty"`
	// For cleanup job
	ObjectKey *ObjectTableKey `protobuf:"bytes,4,opt,name=objectKey" json:"objectKey,omitempty"`
	// For delete list entry job
	KeypoolId *string `protobuf:"bytes,5,opt,name=keypoolId" json:"keypoolId,omitempty"`
	// For delete list entry job
	KeyName          *string `protobuf:"bytes,6,opt,name=keyName" json:"keyName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeleteJobTableKey) Reset()                    { *m = DeleteJobTableKey{} }
func (m *DeleteJobTableKey) String() string            { return proto.CompactTextString(m) }
func (*DeleteJobTableKey) ProtoMessage()               {}
func (*DeleteJobTableKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{40} }

func (m *DeleteJobTableKey) GetType() DeleteJobTableKey_DeleteJobTableKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DeleteJobTableKey_DELETE_JOB
}

func (m *DeleteJobTableKey) GetExpireTime() int64 {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return 0
}

func (m *DeleteJobTableKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *DeleteJobTableKey) GetObjectKey() *ObjectTableKey {
	if m != nil {
		return m.ObjectKey
	}
	return nil
}

func (m *DeleteJobTableKey) GetKeypoolId() string {
	if m != nil && m.KeypoolId != nil {
		return *m.KeypoolId
	}
	return ""
}

func (m *DeleteJobTableKey) GetKeyName() string {
	if m != nil && m.KeyName != nil {
		return *m.KeyName
	}
	return ""
}

type BtreeReferenceKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	DtId             *string `protobuf:"bytes,2,req,name=dtId" json:"dtId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BtreeReferenceKey) Reset()                    { *m = BtreeReferenceKey{} }
func (m *BtreeReferenceKey) String() string            { return proto.CompactTextString(m) }
func (*BtreeReferenceKey) ProtoMessage()               {}
func (*BtreeReferenceKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{41} }

func (m *BtreeReferenceKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *BtreeReferenceKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

type RepoReferenceKey struct {
	ChunkId          *string                         `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	Type             *RepoReferenceKey_ReferenceType `protobuf:"varint,2,req,name=type,enum=or.RepoReferenceKey_ReferenceType" json:"type,omitempty"`
	CrossType        *RepoReferenceKey_CrossType     `protobuf:"varint,3,req,name=crossType,enum=or.RepoReferenceKey_CrossType" json:"crossType,omitempty"`
	ObjectId         *string                         `protobuf:"bytes,4,req,name=objectId" json:"objectId,omitempty"`
	VersionId        *string                         `protobuf:"bytes,5,req,name=versionId" json:"versionId,omitempty"`
	PhysicalOffset   *int64                          `protobuf:"varint,6,req,name=physicalOffset" json:"physicalOffset,omitempty"`
	PhysicalLength   *int64                          `protobuf:"varint,7,req,name=physicalLength" json:"physicalLength,omitempty"`
	LogicalOffset    *int64                          `protobuf:"varint,8,req,name=logicalOffset" json:"logicalOffset,omitempty"`
	LogicalLength    *int64                          `protobuf:"varint,9,req,name=logicalLength" json:"logicalLength,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *RepoReferenceKey) Reset()                    { *m = RepoReferenceKey{} }
func (m *RepoReferenceKey) String() string            { return proto.CompactTextString(m) }
func (*RepoReferenceKey) ProtoMessage()               {}
func (*RepoReferenceKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{42} }

func (m *RepoReferenceKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *RepoReferenceKey) GetType() RepoReferenceKey_ReferenceType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RepoReferenceKey_ALL
}

func (m *RepoReferenceKey) GetCrossType() RepoReferenceKey_CrossType {
	if m != nil && m.CrossType != nil {
		return *m.CrossType
	}
	return RepoReferenceKey_ANY
}

func (m *RepoReferenceKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *RepoReferenceKey) GetVersionId() string {
	if m != nil && m.VersionId != nil {
		return *m.VersionId
	}
	return ""
}

func (m *RepoReferenceKey) GetPhysicalOffset() int64 {
	if m != nil && m.PhysicalOffset != nil {
		return *m.PhysicalOffset
	}
	return 0
}

func (m *RepoReferenceKey) GetPhysicalLength() int64 {
	if m != nil && m.PhysicalLength != nil {
		return *m.PhysicalLength
	}
	return 0
}

func (m *RepoReferenceKey) GetLogicalOffset() int64 {
	if m != nil && m.LogicalOffset != nil {
		return *m.LogicalOffset
	}
	return 0
}

func (m *RepoReferenceKey) GetLogicalLength() int64 {
	if m != nil && m.LogicalLength != nil {
		return *m.LogicalLength
	}
	return 0
}

type NamespaceKey struct {
	NamespaceId      *string `protobuf:"bytes,1,req,name=namespaceId" json:"namespaceId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NamespaceKey) Reset()                    { *m = NamespaceKey{} }
func (m *NamespaceKey) String() string            { return proto.CompactTextString(m) }
func (*NamespaceKey) ProtoMessage()               {}
func (*NamespaceKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{43} }

func (m *NamespaceKey) GetNamespaceId() string {
	if m != nil && m.NamespaceId != nil {
		return *m.NamespaceId
	}
	return ""
}

type BucketKey struct {
	BucketId         *string `protobuf:"bytes,1,req,name=bucketId" json:"bucketId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BucketKey) Reset()                    { *m = BucketKey{} }
func (m *BucketKey) String() string            { return proto.CompactTextString(m) }
func (*BucketKey) ProtoMessage()               {}
func (*BucketKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{44} }

func (m *BucketKey) GetBucketId() string {
	if m != nil && m.BucketId != nil {
		return *m.BucketId
	}
	return ""
}

type UserKey struct {
	Namespace        *string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	UserId           *string `protobuf:"bytes,2,req,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserKey) Reset()                    { *m = UserKey{} }
func (m *UserKey) String() string            { return proto.CompactTextString(m) }
func (*UserKey) ProtoMessage()               {}
func (*UserKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{45} }

func (m *UserKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *UserKey) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type ConfigKey struct {
	ConfigId         *string `protobuf:"bytes,1,req,name=configId" json:"configId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ConfigKey) Reset()                    { *m = ConfigKey{} }
func (m *ConfigKey) String() string            { return proto.CompactTextString(m) }
func (*ConfigKey) ProtoMessage()               {}
func (*ConfigKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{46} }

func (m *ConfigKey) GetConfigId() string {
	if m != nil && m.ConfigId != nil {
		return *m.ConfigId
	}
	return ""
}

type RGKey struct {
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RGKey) Reset()                    { *m = RGKey{} }
func (m *RGKey) String() string            { return proto.CompactTextString(m) }
func (*RGKey) ProtoMessage()               {}
func (*RGKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{47} }

func (m *RGKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

type RGUpdateKey struct {
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RGUpdateKey) Reset()                    { *m = RGUpdateKey{} }
func (m *RGUpdateKey) String() string            { return proto.CompactTextString(m) }
func (*RGUpdateKey) ProtoMessage()               {}
func (*RGUpdateKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{48} }

func (m *RGUpdateKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

type ResourceTableBootstrapTaskKey struct {
	Type             *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	RgId             *string `protobuf:"bytes,2,req,name=rgId" json:"rgId,omitempty"`
	DstZone          *string `protobuf:"bytes,4,req,name=dstZone" json:"dstZone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResourceTableBootstrapTaskKey) Reset()                    { *m = ResourceTableBootstrapTaskKey{} }
func (m *ResourceTableBootstrapTaskKey) String() string            { return proto.CompactTextString(m) }
func (*ResourceTableBootstrapTaskKey) ProtoMessage()               {}
func (*ResourceTableBootstrapTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{49} }

func (m *ResourceTableBootstrapTaskKey) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *ResourceTableBootstrapTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *ResourceTableBootstrapTaskKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

type NKEntryKey struct {
	Namespace        *string `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Bucket           *string `protobuf:"bytes,2,req,name=bucket" json:"bucket,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NKEntryKey) Reset()                    { *m = NKEntryKey{} }
func (m *NKEntryKey) String() string            { return proto.CompactTextString(m) }
func (*NKEntryKey) ProtoMessage()               {}
func (*NKEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{50} }

func (m *NKEntryKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *NKEntryKey) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

type NKEntryReplicationTaskKey struct {
	TaskOrder        *TaskOrder                            `protobuf:"bytes,1,req,name=taskOrder" json:"taskOrder,omitempty"`
	Namespace        *string                               `protobuf:"bytes,2,req,name=namespace" json:"namespace,omitempty"`
	Bucket           *string                               `protobuf:"bytes,3,req,name=bucket" json:"bucket,omitempty"`
	DstZone          *string                               `protobuf:"bytes,4,req,name=dstZone" json:"dstZone,omitempty"`
	Type             *NKEntryReplicationTaskKey_NKTaskType `protobuf:"varint,5,req,name=type,enum=or.NKEntryReplicationTaskKey_NKTaskType" json:"type,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *NKEntryReplicationTaskKey) Reset()                    { *m = NKEntryReplicationTaskKey{} }
func (m *NKEntryReplicationTaskKey) String() string            { return proto.CompactTextString(m) }
func (*NKEntryReplicationTaskKey) ProtoMessage()               {}
func (*NKEntryReplicationTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{51} }

func (m *NKEntryReplicationTaskKey) GetTaskOrder() *TaskOrder {
	if m != nil {
		return m.TaskOrder
	}
	return nil
}

func (m *NKEntryReplicationTaskKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *NKEntryReplicationTaskKey) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *NKEntryReplicationTaskKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

func (m *NKEntryReplicationTaskKey) GetType() NKEntryReplicationTaskKey_NKTaskType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NKEntryReplicationTaskKey_ADD
}

// misc keys stored to ZKConfigTable
type ZKConfigKey struct {
	Type             *ZKConfigKey_ConfigKeyType `protobuf:"varint,1,req,name=type,enum=or.ZKConfigKey_ConfigKeyType" json:"type,omitempty"`
	KeyId            *string                    `protobuf:"bytes,2,req,name=keyId" json:"keyId,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *ZKConfigKey) Reset()                    { *m = ZKConfigKey{} }
func (m *ZKConfigKey) String() string            { return proto.CompactTextString(m) }
func (*ZKConfigKey) ProtoMessage()               {}
func (*ZKConfigKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{52} }

func (m *ZKConfigKey) GetType() ZKConfigKey_ConfigKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ZKConfigKey_HEAD_TYPE_INFO
}

func (m *ZKConfigKey) GetKeyId() string {
	if m != nil && m.KeyId != nil {
		return *m.KeyId
	}
	return ""
}

type ZoneInfoKey struct {
	VdcId            *string `protobuf:"bytes,1,req,name=vdcId" json:"vdcId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ZoneInfoKey) Reset()                    { *m = ZoneInfoKey{} }
func (m *ZoneInfoKey) String() string            { return proto.CompactTextString(m) }
func (*ZoneInfoKey) ProtoMessage()               {}
func (*ZoneInfoKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{53} }

func (m *ZoneInfoKey) GetVdcId() string {
	if m != nil && m.VdcId != nil {
		return *m.VdcId
	}
	return ""
}

func init() {
	proto.RegisterType((*SchemaKey)(nil), "or.SchemaKey")
	proto.RegisterType((*DefaultSchemaKey)(nil), "or.DefaultSchemaKey")
	proto.RegisterType((*DTRecordKey)(nil), "or.DTRecordKey")
	proto.RegisterType((*DTRecordJournalRegionSubKey)(nil), "or.DTRecordJournalRegionSubKey")
	proto.RegisterType((*DTRecordBPTreeInfoSubKey)(nil), "or.DTRecordBPTreeInfoSubKey")
	proto.RegisterType((*DTRecordBPTreeBootstrapSubKey)(nil), "or.DTRecordBPTreeBootstrapSubKey")
	proto.RegisterType((*DTRecordBPTreeBootstrapJournalSubKey)(nil), "or.DTRecordBPTreeBootstrapJournalSubKey")
	proto.RegisterType((*DTOwnerKey)(nil), "or.DTOwnerKey")
	proto.RegisterType((*TaskOrder)(nil), "or.TaskOrder")
	proto.RegisterType((*MTTableRecordKey)(nil), "or.MTTableRecordKey")
	proto.RegisterType((*MTStorageStatKey)(nil), "or.MTStorageStatKey")
	proto.RegisterType((*MTAggregatedStorageStatKey)(nil), "or.MTAggregatedStorageStatKey")
	proto.RegisterType((*MTBandwidthStatKey)(nil), "or.MTBandwidthStatKey")
	proto.RegisterType((*MTAggregatedBandwidthStatKey)(nil), "or.MTAggregatedBandwidthStatKey")
	proto.RegisterType((*RMTaskKey)(nil), "or.RMTaskKey")
	proto.RegisterType((*ObjectTableKey)(nil), "or.ObjectTableKey")
	proto.RegisterType((*RMTaskJournalEntryGeoSendKey)(nil), "or.RMTaskJournalEntryGeoSendKey")
	proto.RegisterType((*RMTaskRecoveryPointSendKey)(nil), "or.RMTaskRecoveryPointSendKey")
	proto.RegisterType((*SSTableRecordKey)(nil), "or.SSTableRecordKey")
	proto.RegisterType((*SSTableDeviceEntryKey)(nil), "or.SSTableDeviceEntryKey")
	proto.RegisterType((*SSTablePartitionEntryKey)(nil), "or.SSTablePartitionEntryKey")
	proto.RegisterType((*SSTableFreeBlockEntryKey)(nil), "or.SSTableFreeBlockEntryKey")
	proto.RegisterType((*SSTableBusyBlockEntryKey)(nil), "or.SSTableBusyBlockEntryKey")
	proto.RegisterType((*SSTableBlockBinEntryKey)(nil), "or.SSTableBlockBinEntryKey")
	proto.RegisterType((*SSTableBlockLevelTaskKey)(nil), "or.SSTableBlockLevelTaskKey")
	proto.RegisterType((*DTBootstrapTaskKey)(nil), "or.DTBootstrapTaskKey")
	proto.RegisterType((*GCRefCollectionKey)(nil), "or.GCRefCollectionKey")
	proto.RegisterType((*ChunkKey)(nil), "or.ChunkKey")
	proto.RegisterType((*CMTaskKey)(nil), "or.CMTaskKey")
	proto.RegisterType((*CMGeoInfoSendTaskKey)(nil), "or.CMGeoInfoSendTaskKey")
	proto.RegisterType((*CMGeoDataSendTaskKey)(nil), "or.CMGeoDataSendTaskKey")
	proto.RegisterType((*CMGeoCopyTaskKey)(nil), "or.CMGeoCopyTaskKey")
	proto.RegisterType((*CMXorGroupTaskKey)(nil), "or.CMXorGroupTaskKey")
	proto.RegisterType((*CMXorEncodeTaskKey)(nil), "or.CMXorEncodeTaskKey")
	proto.RegisterType((*CMXorDecodeTaskKey)(nil), "or.CMXorDecodeTaskKey")
	proto.RegisterType((*CMJobKey)(nil), "or.CMJobKey")
	proto.RegisterType((*CMProgressKey)(nil), "or.CMProgressKey")
	proto.RegisterType((*ChunkSequenceKey)(nil), "or.ChunkSequenceKey")
	proto.RegisterType((*RgReconfigTaskKey)(nil), "or.RgReconfigTaskKey")
	proto.RegisterType((*ListEntryKey)(nil), "or.ListEntryKey")
	proto.RegisterType((*DeleteJobTableKey)(nil), "or.DeleteJobTableKey")
	proto.RegisterType((*BtreeReferenceKey)(nil), "or.BtreeReferenceKey")
	proto.RegisterType((*RepoReferenceKey)(nil), "or.RepoReferenceKey")
	proto.RegisterType((*NamespaceKey)(nil), "or.NamespaceKey")
	proto.RegisterType((*BucketKey)(nil), "or.BucketKey")
	proto.RegisterType((*UserKey)(nil), "or.UserKey")
	proto.RegisterType((*ConfigKey)(nil), "or.ConfigKey")
	proto.RegisterType((*RGKey)(nil), "or.RGKey")
	proto.RegisterType((*RGUpdateKey)(nil), "or.RGUpdateKey")
	proto.RegisterType((*ResourceTableBootstrapTaskKey)(nil), "or.ResourceTableBootstrapTaskKey")
	proto.RegisterType((*NKEntryKey)(nil), "or.NKEntryKey")
	proto.RegisterType((*NKEntryReplicationTaskKey)(nil), "or.NKEntryReplicationTaskKey")
	proto.RegisterType((*ZKConfigKey)(nil), "or.ZKConfigKey")
	proto.RegisterType((*ZoneInfoKey)(nil), "or.ZoneInfoKey")
	proto.RegisterEnum("or.SchemaKeyType", SchemaKeyType_name, SchemaKeyType_value)
	proto.RegisterEnum("or.DTRecordKey_DTRecordKeyType", DTRecordKey_DTRecordKeyType_name, DTRecordKey_DTRecordKeyType_value)
	proto.RegisterEnum("or.MTTableRecordKey_Type", MTTableRecordKey_Type_name, MTTableRecordKey_Type_value)
	proto.RegisterEnum("or.MTStorageStatKey_State", MTStorageStatKey_State_name, MTStorageStatKey_State_value)
	proto.RegisterEnum("or.RMTaskKey_RMTaskType", RMTaskKey_RMTaskType_name, RMTaskKey_RMTaskType_value)
	proto.RegisterEnum("or.ObjectTableKey_ObjectTableKeyType", ObjectTableKey_ObjectTableKeyType_name, ObjectTableKey_ObjectTableKeyType_value)
	proto.RegisterEnum("or.ObjectTableKey_ObjectIndexKeySubType", ObjectTableKey_ObjectIndexKeySubType_name, ObjectTableKey_ObjectIndexKeySubType_value)
	proto.RegisterEnum("or.SSTableRecordKey_Type", SSTableRecordKey_Type_name, SSTableRecordKey_Type_value)
	proto.RegisterEnum("or.SSTableBlockLevelTaskKey_Type", SSTableBlockLevelTaskKey_Type_name, SSTableBlockLevelTaskKey_Type_value)
	proto.RegisterEnum("or.GCRefCollectionKey_GCRefType", GCRefCollectionKey_GCRefType_name, GCRefCollectionKey_GCRefType_value)
	proto.RegisterEnum("or.CMTaskKey_CMTaskType", CMTaskKey_CMTaskType_name, CMTaskKey_CMTaskType_value)
	proto.RegisterEnum("or.CMGeoInfoSendTaskKey_UpdateType", CMGeoInfoSendTaskKey_UpdateType_name, CMGeoInfoSendTaskKey_UpdateType_value)
	proto.RegisterEnum("or.CMJobKey_CMJobType", CMJobKey_CMJobType_name, CMJobKey_CMJobType_value)
	proto.RegisterEnum("or.CMProgressKey_CMProgressType", CMProgressKey_CMProgressType_name, CMProgressKey_CMProgressType_value)
	proto.RegisterEnum("or.RgReconfigTaskKey_ReconfigType", RgReconfigTaskKey_ReconfigType_name, RgReconfigTaskKey_ReconfigType_value)
	proto.RegisterEnum("or.ListEntryKey_ListEntryType", ListEntryKey_ListEntryType_name, ListEntryKey_ListEntryType_value)
	proto.RegisterEnum("or.DeleteJobTableKey_DeleteJobTableKeyType", DeleteJobTableKey_DeleteJobTableKeyType_name, DeleteJobTableKey_DeleteJobTableKeyType_value)
	proto.RegisterEnum("or.RepoReferenceKey_ReferenceType", RepoReferenceKey_ReferenceType_name, RepoReferenceKey_ReferenceType_value)
	proto.RegisterEnum("or.RepoReferenceKey_CrossType", RepoReferenceKey_CrossType_name, RepoReferenceKey_CrossType_value)
	proto.RegisterEnum("or.NKEntryReplicationTaskKey_NKTaskType", NKEntryReplicationTaskKey_NKTaskType_name, NKEntryReplicationTaskKey_NKTaskType_value)
	proto.RegisterEnum("or.ZKConfigKey_ConfigKeyType", ZKConfigKey_ConfigKeyType_name, ZKConfigKey_ConfigKeyType_value)
}

func init() { proto.RegisterFile("SchemaKeyRecords.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 3177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x1a, 0x4d, 0x6f, 0x1b, 0xc7,
	0x55, 0xbb, 0x24, 0x25, 0xf1, 0xe9, 0xc3, 0xab, 0xb5, 0x65, 0xd3, 0x9f, 0x91, 0x37, 0x89, 0x2b,
	0x38, 0x8d, 0x90, 0x3a, 0x69, 0x91, 0x14, 0x01, 0x82, 0xe5, 0x72, 0x44, 0xaf, 0x49, 0xee, 0x32,
	0xb3, 0x4b, 0xc5, 0xca, 0xa1, 0x0b, 0x8a, 0x1c, 0xc9, 0x8c, 0x69, 0x2e, 0xb3, 0x5c, 0x3a, 0x51,
	0xd1, 0x5b, 0xd1, 0x7b, 0x7b, 0x29, 0xfa, 0x0f, 0x7a, 0x28, 0x50, 0xe4, 0xd0, 0xff, 0x50, 0x14,
	0x28, 0xda, 0x53, 0x2f, 0xcd, 0x7f, 0xe8, 0xbd, 0x87, 0x02, 0xc5, 0x9b, 0x99, 0xfd, 0xa2, 0x3e,
	0xec, 0x06, 0x45, 0xd1, 0x83, 0xe1, 0x7d, 0x6f, 0xde, 0xbc, 0xf7, 0xe6, 0xcd, 0xbc, 0x4f, 0x0a,
	0xae, 0x7b, 0x83, 0x67, 0xec, 0x45, 0xbf, 0xc5, 0x4e, 0x29, 0x1b, 0x84, 0xd1, 0x70, 0xb6, 0x37,
	0x8d, 0xc2, 0x38, 0xd4, 0xd5, 0x30, 0x32, 0xda, 0x50, 0x4d, 0x57, 0xf5, 0xb7, 0xa1, 0x1c, 0x9f,
	0x4e, 0x59, 0x4d, 0xd9, 0x51, 0x77, 0x37, 0x1f, 0x6d, 0xed, 0x85, 0xd1, 0x5e, 0xba, 0xe8, 0x9f,
	0x4e, 0x19, 0xe5, 0xcb, 0x7a, 0x0d, 0x56, 0xe6, 0x33, 0x16, 0xb5, 0xd8, 0x69, 0x4d, 0xdd, 0x51,
	0x77, 0xd7, 0x69, 0x02, 0x1a, 0x3e, 0x68, 0x0d, 0x76, 0xdc, 0x9f, 0x8f, 0xe3, 0x8c, 0xe9, 0x75,
	0x58, 0x9e, 0xf6, 0x23, 0x36, 0x89, 0x39, 0xdb, 0x2a, 0x95, 0x90, 0xae, 0x4b, 0x61, 0x2a, 0xc7,
	0x0a, 0xce, 0xd7, 0xa0, 0x32, 0x78, 0x36, 0x1a, 0x0f, 0x6b, 0x25, 0x8e, 0x14, 0x80, 0xf1, 0xe7,
	0x32, 0xac, 0x35, 0x7c, 0xa1, 0x3b, 0x72, 0x7c, 0xbf, 0xa0, 0xe6, 0x1b, 0xa8, 0x66, 0x6e, 0x39,
	0xff, 0x9d, 0x53, 0x5a, 0x87, 0xf2, 0x30, 0xb6, 0x87, 0x89, 0x38, 0xfc, 0x46, 0xdc, 0x4f, 0xc3,
	0x09, 0x93, 0xd2, 0xf8, 0x37, 0xaa, 0x3b, 0x9b, 0x1f, 0xe1, 0xd9, 0xca, 0xfc, 0x6c, 0x12, 0x32,
	0xfe, 0x58, 0x82, 0x2b, 0x0b, 0x9c, 0x75, 0x1d, 0x36, 0x9f, 0xb8, 0x3d, 0xea, 0x98, 0xed, 0x80,
	0x92, 0xa6, 0xed, 0x3a, 0xda, 0x92, 0x7e, 0x13, 0xb6, 0x13, 0x5c, 0xd7, 0xa4, 0x1e, 0xa1, 0x41,
	0xc7, 0xa4, 0x2d, 0x42, 0x35, 0x45, 0xbf, 0x0b, 0x37, 0x8b, 0xe4, 0x41, 0x93, 0xb8, 0xc9, 0xb2,
	0xaa, 0xdf, 0x81, 0xda, 0xe2, 0xb2, 0x95, 0xac, 0x96, 0x50, 0x56, 0xbd, 0xdb, 0xee, 0x79, 0x3e,
	0x25, 0x24, 0xb0, 0x9d, 0x7d, 0x57, 0x2b, 0xa3, 0xac, 0x0c, 0xd7, 0xe8, 0x75, 0xba, 0x09, 0x79,
	0x45, 0xbf, 0x0d, 0x37, 0xb2, 0xa5, 0xa2, 0x22, 0xcb, 0xfa, 0x1b, 0x70, 0xdb, 0xad, 0x3f, 0x21,
	0x96, 0x1f, 0xd8, 0x4e, 0x83, 0x3c, 0x0d, 0xf6, 0x5d, 0xda, 0x31, 0xfd, 0xe0, 0x80, 0x50, 0x0f,
	0x0f, 0xb1, 0xa2, 0x3f, 0x84, 0x07, 0x4d, 0xe2, 0x52, 0xd2, 0x6d, 0x9b, 0x87, 0x84, 0x06, 0xf8,
	0x61, 0x5b, 0xa6, 0x8f, 0x3a, 0x59, 0x8f, 0x89, 0xd5, 0xca, 0x98, 0xad, 0x2e, 0xd2, 0x5a, 0xae,
	0xe3, 0xd9, 0x9e, 0x4f, 0x1c, 0xeb, 0x70, 0x91, 0xb6, 0xaa, 0x3f, 0x82, 0xbd, 0x4c, 0xab, 0x3c,
	0xd7, 0xba, 0xeb, 0xfa, 0x9e, 0x4f, 0xcd, 0x6e, 0x90, 0x98, 0x40, 0xee, 0x01, 0xfd, 0x1e, 0xdc,
	0xca, 0xf6, 0x64, 0x74, 0x72, 0x7d, 0xad, 0xb8, 0x4e, 0x89, 0xe5, 0x1e, 0x10, 0x7a, 0x18, 0xf8,
	0xd4, 0x44, 0xd1, 0xda, 0xba, 0x7e, 0x05, 0xd6, 0xdc, 0xcf, 0x1c, 0x42, 0x03, 0xd2, 0x75, 0xad,
	0xc7, 0xda, 0x86, 0x61, 0xc3, 0xed, 0xe4, 0x22, 0x9f, 0x84, 0xf3, 0x68, 0xd2, 0x1f, 0x53, 0x76,
	0x32, 0x0a, 0x27, 0x1e, 0xbf, 0x68, 0x7c, 0x83, 0x2f, 0xfa, 0x5f, 0x84, 0x91, 0x7c, 0xae, 0x02,
	0xe0, 0xd8, 0xd1, 0x24, 0x8c, 0xe4, 0xfb, 0x11, 0x80, 0xb1, 0x0f, 0xb5, 0x84, 0x55, 0xbd, 0xeb,
	0x47, 0x8c, 0xd9, 0x93, 0xe3, 0xf0, 0x3b, 0xf0, 0xf9, 0x08, 0xee, 0x16, 0xf9, 0xd4, 0xc3, 0x30,
	0x9e, 0xc5, 0x51, 0x7f, 0x2a, 0x99, 0xd5, 0x60, 0x65, 0x38, 0x8b, 0x3f, 0xc7, 0xc7, 0x2a, 0xd8,
	0x25, 0xa0, 0xf1, 0x63, 0x78, 0xeb, 0x82, 0xad, 0xf2, 0x70, 0x92, 0x83, 0x0e, 0xe5, 0xe8, 0xc4,
	0x1e, 0xca, 0xed, 0xfc, 0xdb, 0xf8, 0x10, 0xa0, 0xe1, 0xbb, 0x5f, 0x4d, 0xb8, 0xf3, 0xe2, 0xcb,
	0x1f, 0xc6, 0x7e, 0xe2, 0x58, 0x55, 0x2a, 0xa1, 0xf3, 0x3c, 0xc7, 0xb8, 0x0f, 0x55, 0xbf, 0x3f,
	0x7b, 0xee, 0x46, 0x43, 0xc6, 0xcf, 0x14, 0xe2, 0x07, 0xdf, 0x57, 0xa2, 0x02, 0x30, 0x7e, 0xab,
	0x80, 0xd6, 0xf1, 0xfd, 0xfe, 0xd1, 0x98, 0x65, 0xae, 0xfb, 0x6e, 0xc1, 0x75, 0x6f, 0xa2, 0xeb,
	0x2e, 0xd2, 0xec, 0xe5, 0x9c, 0x36, 0x73, 0x46, 0xb5, 0xe0, 0x8c, 0x6d, 0x28, 0x73, 0xd5, 0x34,
	0x58, 0xf7, 0x7c, 0x97, 0x9a, 0x4d, 0x12, 0x78, 0xbe, 0xe9, 0x6b, 0x4b, 0xfa, 0x35, 0xd0, 0xcc,
	0x66, 0x33, 0x28, 0x60, 0x55, 0x7d, 0x0d, 0x56, 0xea, 0x9f, 0x09, 0xa0, 0x84, 0x0f, 0x02, 0x49,
	0x12, 0x44, 0xd9, 0xf8, 0x03, 0xd7, 0xd4, 0x8b, 0xc3, 0xa8, 0x7f, 0xc2, 0xbc, 0xb8, 0x1f, 0x4b,
	0x7b, 0x35, 0xe2, 0xcc, 0x5e, 0xf8, 0xad, 0x7f, 0x08, 0x55, 0x5c, 0xc6, 0x7f, 0x18, 0xb7, 0x94,
	0xdd, 0xcd, 0x47, 0xb7, 0xc4, 0x11, 0x8a, 0x9b, 0xf7, 0x38, 0x05, 0xcd, 0x88, 0xf5, 0x87, 0xa0,
	0x59, 0xe1, 0x78, 0xcc, 0x06, 0x71, 0x18, 0x1d, 0xb0, 0x68, 0x36, 0x0a, 0x27, 0x3c, 0xea, 0x94,
	0xe8, 0x19, 0xbc, 0xf1, 0x00, 0x2a, 0x62, 0xd3, 0x26, 0x80, 0x3d, 0xe9, 0x46, 0xe1, 0x49, 0xc4,
	0x66, 0x33, 0x6d, 0x49, 0xdf, 0x80, 0xaa, 0x15, 0xbe, 0x98, 0x8e, 0x59, 0xcc, 0x86, 0x9a, 0x62,
	0x3c, 0x81, 0x5b, 0x1d, 0xdf, 0x3c, 0x39, 0x89, 0xd8, 0x49, 0x3f, 0x66, 0xc3, 0x05, 0xfd, 0xbf,
	0x0f, 0x5b, 0xc9, 0x5a, 0x26, 0x52, 0x5c, 0xd0, 0xd9, 0x05, 0xe3, 0x29, 0xe8, 0x1d, 0xbf, 0xde,
	0x9f, 0x0c, 0xbf, 0x1a, 0x0d, 0xe3, 0x67, 0x09, 0x8f, 0xeb, 0xb0, 0xec, 0x84, 0x43, 0x96, 0x5a,
	0x41, 0x42, 0x78, 0x9a, 0x94, 0x36, 0x61, 0xad, 0x8a, 0xd3, 0x2c, 0xe2, 0x8d, 0x36, 0xdc, 0xc9,
	0x6b, 0x79, 0x46, 0xc6, 0x7f, 0xa6, 0xe7, 0xdf, 0x14, 0xa8, 0xd2, 0x0e, 0x3e, 0x3d, 0xb1, 0x37,
	0xff, 0x9a, 0x6a, 0x78, 0x15, 0xe9, 0xa2, 0xfc, 0xca, 0x3d, 0xa6, 0x77, 0xa0, 0x1a, 0x27, 0x6f,
	0x96, 0xab, 0xbb, 0xf6, 0x68, 0x03, 0xb7, 0xa4, 0x0f, 0x99, 0x66, 0xeb, 0xe9, 0xa3, 0x2f, 0xe5,
	0xd2, 0xc5, 0x45, 0xa9, 0xc1, 0x04, 0xc8, 0x84, 0xe9, 0xb7, 0xe0, 0x7a, 0x12, 0xc3, 0x88, 0xe3,
	0xd3, 0x43, 0x1e, 0xe4, 0x3d, 0xe2, 0x34, 0xb4, 0x25, 0xfd, 0x06, 0x5c, 0x4d, 0x23, 0x54, 0xd7,
	0xb5, 0x1d, 0x5f, 0x2c, 0x28, 0xc6, 0xb7, 0x15, 0xd8, 0x74, 0x8f, 0xbe, 0x60, 0x83, 0x98, 0x3b,
	0x03, 0x1e, 0xee, 0x16, 0xac, 0x86, 0x1c, 0x93, 0x9a, 0x3f, 0x85, 0xf5, 0x8f, 0xd2, 0xdc, 0x89,
	0x6f, 0xf0, 0x6d, 0x3c, 0x45, 0x71, 0xf7, 0x02, 0x98, 0xb3, 0xc2, 0x1d, 0xa8, 0xbe, 0x14, 0xc6,
	0xe4, 0xa7, 0x53, 0x76, 0x4b, 0x34, 0x43, 0xe8, 0x3f, 0x81, 0x6d, 0x29, 0x64, 0x32, 0x64, 0x5f,
	0xb7, 0xd8, 0xa9, 0x37, 0x3f, 0xe2, 0x21, 0xa1, 0xcc, 0x25, 0xed, 0x5e, 0x28, 0x69, 0x81, 0x9e,
	0x9e, 0xcf, 0x06, 0x4d, 0x18, 0x1e, 0x1f, 0xcf, 0x58, 0x5c, 0xab, 0x70, 0xd1, 0x12, 0xc2, 0xc3,
	0xce, 0xd8, 0x97, 0x73, 0x36, 0x19, 0xb0, 0xda, 0x32, 0x5f, 0x49, 0x61, 0x5c, 0x9b, 0x4f, 0xc7,
	0x61, 0x7f, 0x68, 0x0f, 0x6b, 0x2b, 0x3b, 0x0a, 0x1a, 0x22, 0x81, 0x31, 0x2e, 0x4e, 0xfb, 0x51,
	0xec, 0xcc, 0x5f, 0xd4, 0x56, 0x77, 0x94, 0xdd, 0x0a, 0x4d, 0xc0, 0x64, 0xc5, 0x63, 0x5f, 0xd6,
	0xaa, 0x9c, 0x61, 0x02, 0xa2, 0x05, 0x9e, 0xb3, 0xd3, 0x69, 0x18, 0x8e, 0xed, 0x61, 0x0d, 0x38,
	0xc3, 0x0c, 0x81, 0x6f, 0x7b, 0x10, 0x85, 0xb3, 0x19, 0x65, 0xc7, 0x2c, 0x42, 0xf9, 0xf6, 0xb0,
	0xb6, 0xc6, 0x89, 0xce, 0xe0, 0x51, 0xc6, 0xe0, 0xd9, 0x7c, 0xf2, 0xdc, 0x1e, 0xd6, 0xd6, 0x39,
	0x49, 0x02, 0x1a, 0x3f, 0x57, 0x40, 0x3f, 0x7b, 0x05, 0xfa, 0x36, 0x6c, 0x59, 0x6e, 0xa7, 0x6b,
	0x5a, 0x3c, 0xe9, 0xc9, 0x14, 0xb6, 0xa4, 0x57, 0xa1, 0xc2, 0x13, 0xb1, 0xa6, 0xe8, 0x00, 0xcb,
	0xbd, 0x6e, 0xc3, 0xf4, 0x89, 0xa6, 0xea, 0xeb, 0xb0, 0xda, 0xe9, 0xf6, 0x30, 0x7b, 0x63, 0xd8,
	0x92, 0x50, 0xdb, 0xf6, 0x7c, 0xad, 0x8c, 0xb1, 0x01, 0xa1, 0x34, 0xdf, 0x5f, 0x85, 0x2b, 0x16,
	0x75, 0x3d, 0x2f, 0xa0, 0x64, 0x9f, 0x50, 0xe2, 0x58, 0x44, 0x5b, 0x36, 0x7e, 0xa1, 0xc0, 0xf6,
	0xb9, 0xd7, 0xa3, 0x6f, 0xc1, 0xc6, 0x63, 0x62, 0x36, 0x82, 0x0e, 0xf1, 0xcd, 0x86, 0xe9, 0x9b,
	0xda, 0x12, 0x72, 0xf0, 0x0e, 0x3d, 0x9f, 0x74, 0x32, 0xa4, 0x82, 0x74, 0x3d, 0x5e, 0x3a, 0x24,
	0x28, 0x15, 0x95, 0xa5, 0xa6, 0xd3, 0x24, 0x5a, 0x09, 0xb7, 0x34, 0x48, 0x9b, 0xe4, 0x0f, 0x53,
	0xc6, 0x2d, 0x94, 0x74, 0xdc, 0x03, 0x92, 0x2a, 0x67, 0xc4, 0x70, 0x47, 0x38, 0x88, 0x4c, 0x49,
	0x64, 0x12, 0x47, 0xa7, 0x4d, 0x16, 0x7a, 0x6c, 0x32, 0xbc, 0x38, 0x55, 0xe6, 0x72, 0x9e, 0x5a,
	0xc8, 0x79, 0xba, 0x06, 0xa5, 0x41, 0x38, 0x93, 0xbe, 0x89, 0x9f, 0x69, 0x76, 0x2b, 0xe7, 0xb2,
	0xdb, 0xcf, 0xe0, 0x96, 0x90, 0x8a, 0xa9, 0xe5, 0x25, 0x8b, 0x4e, 0xbb, 0xe1, 0x68, 0x12, 0x27,
	0x32, 0xef, 0x01, 0x1c, 0xf7, 0x47, 0x63, 0x36, 0xcc, 0x25, 0xd5, 0x1c, 0x26, 0x91, 0xa1, 0x9e,
	0x95, 0x51, 0xca, 0x64, 0xe4, 0x75, 0x2c, 0x17, 0xf3, 0xf2, 0xef, 0x14, 0xd0, 0x3c, 0xef, 0xd5,
	0xe9, 0x6f, 0x91, 0xe6, 0x75, 0xd2, 0x5f, 0x57, 0xa6, 0xbf, 0x4d, 0x80, 0x7d, 0x5e, 0x15, 0xb5,
	0x5d, 0xab, 0xa5, 0x2d, 0x21, 0x5c, 0xef, 0x79, 0x87, 0x12, 0xe6, 0x8f, 0xa9, 0x41, 0x0e, 0x6c,
	0x0b, 0x1f, 0xd3, 0x06, 0x54, 0xf1, 0x21, 0xd9, 0x78, 0x59, 0x5a, 0x09, 0x41, 0x4e, 0x15, 0xd4,
	0x6d, 0x47, 0x2b, 0x1b, 0xef, 0xc3, 0xb6, 0x54, 0xa4, 0xc1, 0x5e, 0x8e, 0x06, 0x8c, 0xdf, 0x90,
	0x8c, 0x42, 0x43, 0x8e, 0xc9, 0xa2, 0x50, 0x02, 0x1b, 0x4f, 0xa1, 0x26, 0x37, 0x75, 0xfb, 0x51,
	0x3c, 0x8a, 0x47, 0xe1, 0xe4, 0x75, 0xf6, 0xe9, 0x3b, 0xb0, 0x36, 0x4d, 0x36, 0xa4, 0x75, 0x45,
	0x1e, 0x65, 0xfc, 0x5e, 0x49, 0x59, 0xef, 0x63, 0x49, 0x33, 0x0e, 0x07, 0xcf, 0xff, 0x3b, 0xac,
	0xf1, 0xde, 0x8f, 0x90, 0x5d, 0x7d, 0x34, 0x49, 0xef, 0x32, 0x87, 0xc9, 0x45, 0xa8, 0x32, 0x4f,
	0x42, 0x49, 0x84, 0xba, 0x03, 0xd5, 0xe3, 0x88, 0xb1, 0xa1, 0x3f, 0x7a, 0xc1, 0x64, 0xf0, 0xca,
	0x10, 0xc6, 0x2f, 0x33, 0x85, 0xeb, 0xf3, 0xd9, 0xe9, 0xff, 0x81, 0xc2, 0xc6, 0x57, 0x70, 0x23,
	0xd1, 0x48, 0x12, 0xff, 0x6f, 0x14, 0x32, 0xbe, 0x51, 0x33, 0x5b, 0x20, 0xb6, 0xcd, 0x5e, 0xb2,
	0x71, 0x92, 0xb2, 0x7f, 0x58, 0xf0, 0x80, 0xfb, 0x39, 0x0f, 0x38, 0x43, 0x9b, 0xf7, 0x84, 0xbc,
	0xc6, 0xea, 0xe5, 0x1a, 0x97, 0x5e, 0xa5, 0x71, 0xf9, 0x12, 0x13, 0x56, 0x0a, 0x26, 0x3c, 0x91,
	0x7e, 0x76, 0x03, 0xae, 0x0a, 0x67, 0x31, 0xdb, 0x6d, 0xd7, 0x32, 0x7d, 0x12, 0xf8, 0xa6, 0xd7,
	0x12, 0x31, 0x53, 0x2c, 0x70, 0x37, 0xe4, 0x48, 0x85, 0x77, 0x65, 0x1c, 0x49, 0x49, 0xdb, 0x76,
	0x3e, 0xed, 0xd9, 0xde, 0x63, 0xb1, 0xa4, 0xea, 0xd7, 0x41, 0x4f, 0x96, 0x2c, 0x62, 0x1f, 0xc8,
	0x2d, 0x25, 0xe3, 0xd7, 0x0a, 0xe8, 0x0d, 0x3f, 0xad, 0xdc, 0x13, 0x63, 0xe9, 0x39, 0x63, 0x55,
	0xb3, 0x3e, 0x96, 0x47, 0x21, 0x35, 0x17, 0x85, 0xce, 0xc6, 0xc3, 0x0b, 0xe3, 0x52, 0x5a, 0xd8,
	0x54, 0x72, 0x85, 0x4d, 0x0d, 0x56, 0x66, 0xd1, 0x80, 0x53, 0x2f, 0x0b, 0x6a, 0x09, 0x1a, 0x7f,
	0x52, 0x40, 0x6f, 0x5a, 0x94, 0x1d, 0xcb, 0x2a, 0x75, 0x14, 0x4e, 0x50, 0xb1, 0x0f, 0x0a, 0xb7,
	0xb8, 0x83, 0xb7, 0x78, 0x96, 0x4a, 0xa0, 0x8a, 0x2d, 0xf8, 0x20, 0xd7, 0x48, 0x0c, 0x2e, 0x6a,
	0xc1, 0xcf, 0x09, 0xe6, 0x88, 0x0b, 0x8f, 0x32, 0xb5, 0xf1, 0xdb, 0x78, 0x17, 0xaa, 0xa9, 0x08,
	0x7d, 0x15, 0xca, 0x94, 0x74, 0x5d, 0x91, 0x4d, 0xeb, 0xd8, 0x0c, 0x6a, 0x0a, 0xd6, 0xfd, 0xb2,
	0x16, 0xd3, 0x54, 0xe3, 0x2d, 0x58, 0xb5, 0x30, 0x3d, 0xcb, 0x7e, 0x2a, 0xc9, 0xdc, 0xb2, 0x9f,
	0x4a, 0x32, 0xf7, 0x6f, 0x4a, 0x50, 0xb5, 0x2e, 0xab, 0x30, 0xd3, 0x45, 0xf9, 0xf5, 0x5d, 0x2b,
	0xcc, 0x9c, 0x0a, 0xa5, 0x82, 0x0a, 0x17, 0xd6, 0x99, 0xff, 0x52, 0x00, 0x32, 0x99, 0x78, 0x62,
	0x8f, 0x98, 0x6d, 0x6d, 0x49, 0x5f, 0x06, 0x95, 0x58, 0x9a, 0x82, 0xff, 0x5b, 0x96, 0xa6, 0x62,
	0xdc, 0xa7, 0xa4, 0x6b, 0xda, 0x54, 0x2b, 0xa1, 0x35, 0xbc, 0xcf, 0x08, 0xe9, 0x8a, 0xcc, 0x8c,
	0xb5, 0xa8, 0xed, 0xec, 0xcb, 0x82, 0xb4, 0x92, 0xa0, 0x30, 0xb5, 0x0b, 0xd4, 0x32, 0xd6, 0x19,
	0x88, 0xb2, 0xdc, 0xee, 0xa1, 0xb6, 0x82, 0x29, 0x85, 0x13, 0x60, 0x9a, 0x27, 0xda, 0x2a, 0xe6,
	0x8d, 0xa7, 0x2e, 0x0d, 0x9a, 0xd4, 0xed, 0x75, 0xb5, 0x2a, 0x2e, 0x23, 0x48, 0x1c, 0xcb, 0x6d,
	0x10, 0x0d, 0x12, 0xb8, 0x41, 0x38, 0xbc, 0x86, 0xbd, 0x56, 0x96, 0xa1, 0x3c, 0x6d, 0x1d, 0x05,
	0xf2, 0xa9, 0x40, 0xd2, 0xe7, 0x6b, 0x1b, 0x48, 0x23, 0x50, 0xe2, 0xd6, 0x36, 0xd1, 0x4b, 0xb0,
	0x82, 0xf0, 0x49, 0x60, 0x3d, 0xee, 0x39, 0xad, 0xc0, 0x32, 0xad, 0xc7, 0x44, 0xbb, 0x62, 0xfc,
	0x4a, 0x85, 0x6b, 0x56, 0xa7, 0xc9, 0x42, 0xde, 0x65, 0xb3, 0xc9, 0x30, 0xb9, 0x25, 0x1e, 0x1d,
	0x0a, 0xed, 0x71, 0x0a, 0xbf, 0x66, 0x1e, 0xb7, 0x00, 0xe6, 0xd3, 0x61, 0x3f, 0x66, 0xb2, 0xd8,
	0xc5, 0xdb, 0x7e, 0x53, 0xdc, 0xf6, 0x59, 0x79, 0x7b, 0xbd, 0x94, 0x94, 0xe6, 0xb6, 0x61, 0x8a,
	0x98, 0xb1, 0x41, 0x38, 0x19, 0xf6, 0xa3, 0x53, 0xf9, 0x50, 0x33, 0x84, 0x6e, 0xc0, 0xfa, 0x68,
	0x46, 0xd9, 0x74, 0x3c, 0x1a, 0x60, 0x23, 0xc4, 0x3d, 0x6d, 0x95, 0x16, 0x70, 0xc6, 0x7b, 0x00,
	0x19, 0x6f, 0xbc, 0x46, 0x8b, 0x12, 0xac, 0x05, 0x97, 0x44, 0x2a, 0xe7, 0x77, 0x50, 0xa8, 0x11,
	0x8d, 0x0f, 0xa4, 0x49, 0x1a, 0xfd, 0xb8, 0x9f, 0x37, 0x49, 0x41, 0x17, 0x65, 0x41, 0x17, 0xe3,
	0x01, 0x68, 0x7c, 0x97, 0x15, 0x4e, 0x4f, 0x73, 0xc1, 0x26, 0x9c, 0x66, 0x0d, 0x2f, 0x7e, 0x1b,
	0x26, 0x6c, 0x59, 0x9d, 0xa7, 0x61, 0xd4, 0x8c, 0xc2, 0x79, 0x3e, 0x2a, 0x2d, 0x4e, 0x12, 0x78,
	0xb5, 0x1d, 0x8d, 0x5e, 0xa0, 0x30, 0x59, 0xab, 0x49, 0xd0, 0xd8, 0x05, 0x9d, 0xb3, 0x20, 0x93,
	0x41, 0x38, 0x64, 0x97, 0xf0, 0x48, 0x29, 0x1b, 0xec, 0x55, 0x94, 0xff, 0x50, 0x60, 0xd5, 0xea,
	0x3c, 0x09, 0x8f, 0x2e, 0x75, 0x65, 0xfd, 0x61, 0x6e, 0xc2, 0xb8, 0xf9, 0xe8, 0xba, 0xb8, 0x4e,
	0xb1, 0x4b, 0x7c, 0xe4, 0x5c, 0xf7, 0x1a, 0x54, 0xbe, 0xe0, 0x01, 0x46, 0x4e, 0x1e, 0x39, 0x80,
	0x05, 0x74, 0x35, 0xa5, 0xd4, 0x57, 0xa0, 0x64, 0xb6, 0xd1, 0xdf, 0xd6, 0x61, 0x95, 0xbf, 0x58,
	0xaf, 0xd7, 0xd1, 0x14, 0xfd, 0x1a, 0x68, 0xfb, 0xb6, 0xd3, 0x08, 0xd0, 0x19, 0x83, 0x36, 0x71,
	0x9a, 0xfe, 0x63, 0x4d, 0xc5, 0xd4, 0x80, 0x8e, 0x93, 0x1b, 0x72, 0x69, 0xa5, 0x05, 0x6f, 0xe2,
	0x55, 0x3c, 0x26, 0x94, 0xb6, 0xf0, 0xb6, 0x0a, 0xc2, 0xc4, 0x4a, 0x86, 0x58, 0xda, 0xb2, 0x74,
	0xec, 0x15, 0xe3, 0x04, 0x36, 0xac, 0x4e, 0x32, 0x09, 0xb8, 0x20, 0x00, 0x17, 0x08, 0x72, 0x50,
	0x76, 0x48, 0x63, 0x07, 0x36, 0x8b, 0x78, 0x19, 0x31, 0x78, 0x04, 0x69, 0x5a, 0x9a, 0xc2, 0x1f,
	0x06, 0x5a, 0xcf, 0x93, 0xcd, 0xd7, 0x45, 0x37, 0xf0, 0x17, 0x05, 0xb6, 0xe8, 0x09, 0x16, 0xad,
	0x93, 0xe3, 0xd1, 0xc9, 0x65, 0x2f, 0xe3, 0x47, 0x85, 0x4b, 0x30, 0x78, 0x8f, 0xbe, 0xb8, 0x71,
	0x2f, 0x85, 0x0b, 0xc9, 0xe2, 0xbc, 0xc4, 0xc0, 0x73, 0x57, 0x39, 0x37, 0x89, 0x22, 0xb0, 0x9e,
	0xdf, 0x9d, 0x5d, 0x12, 0x7e, 0x34, 0x1a, 0xc2, 0x5d, 0x44, 0x43, 0xa2, 0xa9, 0x18, 0x33, 0xf7,
	0x4d, 0xbb, 0x2d, 0x0a, 0x60, 0x11, 0x64, 0x90, 0xa8, 0x8c, 0xe5, 0xfa, 0x7a, 0x7b, 0x34, 0x8b,
	0xd3, 0x1a, 0xe9, 0x51, 0xc1, 0xc2, 0xf7, 0x50, 0xef, 0xfc, 0x7a, 0x06, 0x14, 0xeb, 0x75, 0x39,
	0xea, 0x56, 0x0b, 0xa3, 0xee, 0xf3, 0xc7, 0xda, 0x1f, 0xc1, 0x46, 0x81, 0x09, 0x66, 0xab, 0x16,
	0x39, 0xec, 0xba, 0xae, 0x7c, 0x63, 0xfb, 0x9e, 0xe3, 0x05, 0x0d, 0x9b, 0x6a, 0x0a, 0x6a, 0xcb,
	0xa1, 0x7d, 0xbb, 0x8d, 0x5e, 0xff, 0x57, 0x15, 0xb6, 0x1a, 0x6c, 0xcc, 0x62, 0x86, 0x6f, 0x33,
	0x99, 0x18, 0x7c, 0x52, 0x50, 0xf9, 0x1d, 0x3e, 0x17, 0x5f, 0x24, 0x3a, 0x8b, 0xc9, 0xe9, 0x7f,
	0x0f, 0x80, 0x7d, 0x3d, 0x1d, 0x45, 0x8c, 0x17, 0xb9, 0x62, 0xa2, 0x93, 0xc3, 0x14, 0x46, 0x12,
	0x25, 0xd1, 0x89, 0xa7, 0x23, 0x89, 0xf7, 0xa0, 0x2a, 0xbe, 0x45, 0xde, 0x52, 0x76, 0xd7, 0x1e,
	0xe9, 0x67, 0xa7, 0x05, 0x34, 0x23, 0x2a, 0xf6, 0xe1, 0x95, 0xc5, 0x3e, 0xbc, 0x06, 0x2b, 0xcf,
	0xd9, 0xa9, 0xd3, 0x7f, 0x21, 0x06, 0x02, 0x55, 0x9a, 0x80, 0x86, 0x07, 0xdb, 0xe7, 0x1e, 0x02,
	0xbd, 0x47, 0x78, 0x56, 0xf0, 0xc4, 0xad, 0x6b, 0x4b, 0x3c, 0xb1, 0xb4, 0x89, 0xe9, 0xf4, 0xba,
	0x1c, 0xc1, 0x2b, 0x33, 0x49, 0x80, 0x5d, 0xb4, 0x1c, 0xcf, 0xe0, 0x92, 0x8a, 0x91, 0xae, 0x1e,
	0x47, 0x8c, 0xa5, 0xed, 0xfd, 0xe5, 0xa1, 0xe5, 0xbc, 0x99, 0xe8, 0xb7, 0x25, 0xd0, 0x28, 0x9b,
	0x86, 0xaf, 0xc9, 0xe2, 0x3c, 0xc7, 0x58, 0xd8, 0xbd, 0x97, 0x02, 0xb9, 0x4b, 0xfa, 0x18, 0xaa,
	0x7c, 0x10, 0xc1, 0x33, 0x55, 0x29, 0x7b, 0x9d, 0x67, 0x36, 0x5b, 0x09, 0x15, 0xcd, 0x36, 0x14,
	0xae, 0xb0, 0xbc, 0x30, 0x55, 0x2a, 0x8c, 0x86, 0x64, 0xfe, 0xca, 0x46, 0x43, 0x0f, 0x60, 0x73,
	0xfa, 0xec, 0x74, 0x36, 0x1a, 0xf4, 0xc7, 0xae, 0x28, 0x96, 0x97, 0xf9, 0x03, 0x59, 0xc0, 0xe6,
	0xe9, 0xda, 0x6c, 0x72, 0x12, 0x3f, 0xab, 0xad, 0x14, 0xe9, 0x04, 0x56, 0x7f, 0x0b, 0x36, 0xc6,
	0xe1, 0x49, 0x8e, 0xdd, 0x2a, 0x27, 0x2b, 0x22, 0x73, 0x54, 0x92, 0x59, 0xb5, 0x40, 0x25, 0x90,
	0xc6, 0x07, 0xb0, 0x51, 0x30, 0x55, 0x21, 0x54, 0x77, 0x5d, 0xcf, 0xf6, 0xed, 0x03, 0xcc, 0x9c,
	0xeb, 0xb0, 0xea, 0x90, 0xa6, 0xc9, 0x21, 0xd5, 0x78, 0x07, 0xaa, 0xa9, 0x8d, 0xf8, 0x0e, 0xe7,
	0x50, 0x64, 0x5a, 0xc7, 0xa5, 0x1d, 0xb3, 0xad, 0x29, 0x58, 0x3c, 0xf1, 0xa9, 0x8a, 0xa6, 0x1a,
	0xef, 0xc1, 0x3a, 0xbe, 0xbe, 0xd9, 0xb4, 0x2f, 0x2e, 0x76, 0x07, 0xd6, 0x26, 0x09, 0x9c, 0x5e,
	0x6e, 0x1e, 0x65, 0x7c, 0x0f, 0xaa, 0xf5, 0xf9, 0xe0, 0x39, 0x8b, 0x65, 0x89, 0x72, 0xc4, 0x81,
	0xac, 0xe5, 0x4a, 0x60, 0xe3, 0x13, 0x58, 0xe9, 0x89, 0x1f, 0xd0, 0xf0, 0x0a, 0x52, 0x16, 0x35,
	0x45, 0xf8, 0x44, 0x8a, 0xc0, 0xf8, 0x32, 0x9f, 0xb1, 0x28, 0x7d, 0x77, 0x12, 0x42, 0x49, 0x16,
	0x8f, 0x80, 0x52, 0x92, 0x08, 0x87, 0x99, 0xa4, 0x04, 0x36, 0x6e, 0x43, 0x85, 0x36, 0x2f, 0x8a,
	0xe9, 0xf7, 0x61, 0x8d, 0x36, 0x45, 0xf9, 0x71, 0x11, 0x49, 0x1f, 0xee, 0x52, 0x36, 0x0b, 0xe7,
	0xd1, 0x80, 0x89, 0x9e, 0xed, 0xbb, 0x76, 0x2c, 0x17, 0xcf, 0x4d, 0xea, 0x00, 0x4e, 0x2b, 0x8d,
	0xc2, 0x0b, 0xf6, 0x50, 0xcf, 0xd8, 0x43, 0x18, 0x31, 0xb1, 0x87, 0x80, 0x8c, 0x7f, 0x2a, 0x70,
	0x53, 0x32, 0x49, 0x8a, 0xab, 0x51, 0x38, 0x49, 0x74, 0x2c, 0x54, 0xe9, 0xca, 0x2b, 0xaa, 0xf4,
	0x82, 0x02, 0xea, 0xc5, 0x0a, 0x94, 0xf2, 0x0a, 0x5c, 0xd2, 0x7e, 0x7d, 0x2c, 0x0d, 0x54, 0xe1,
	0x8e, 0xcb, 0xe7, 0xa9, 0x17, 0x6a, 0xba, 0xe7, 0xb4, 0x8a, 0x0d, 0x86, 0x71, 0x1f, 0x8d, 0x93,
	0x36, 0x00, 0xe7, 0x65, 0x38, 0xe3, 0x1b, 0x05, 0xd6, 0x3e, 0x6f, 0x65, 0xcf, 0xe1, 0x07, 0x85,
	0xa4, 0x70, 0x17, 0x05, 0xe6, 0x96, 0xf7, 0xd2, 0xaf, 0x62, 0x2d, 0xf4, 0x9c, 0x9d, 0xa6, 0x37,
	0x26, 0x00, 0xe3, 0x29, 0x6c, 0x14, 0x88, 0x75, 0x1d, 0x36, 0xf9, 0x0c, 0xd1, 0x3f, 0xec, 0xca,
	0x5f, 0x24, 0x79, 0x43, 0x2c, 0x7f, 0x59, 0xac, 0x9b, 0x1e, 0x09, 0x7a, 0x14, 0xbd, 0x48, 0x87,
	0x4d, 0xdb, 0x69, 0x12, 0x8f, 0xcf, 0x09, 0x65, 0x27, 0x0c, 0xb0, 0x7c, 0x60, 0x52, 0x6a, 0x1e,
	0x6a, 0x25, 0xe3, 0x4d, 0x58, 0x43, 0xdb, 0x60, 0x95, 0x2d, 0xa7, 0x81, 0x2f, 0x87, 0x83, 0xf4,
	0xe5, 0x09, 0xe0, 0xe1, 0xdf, 0xcb, 0xb0, 0x51, 0xf8, 0x31, 0x1a, 0xc3, 0x7b, 0x83, 0xec, 0x9b,
	0xbd, 0xb6, 0x1f, 0xb4, 0xc8, 0xa1, 0xf8, 0xe9, 0xb5, 0x61, 0x53, 0x62, 0xf9, 0x2e, 0x3d, 0xf4,
	0xcd, 0x7a, 0x5b, 0xfc, 0x1c, 0x48, 0xd1, 0x42, 0x35, 0xb8, 0xb6, 0xb0, 0xc4, 0x7f, 0x13, 0x14,
	0x3f, 0x0d, 0xd1, 0x8e, 0xec, 0xc3, 0xb1, 0x94, 0x6b, 0xf8, 0xd9, 0x6f, 0x8c, 0x1c, 0x5b, 0xe6,
	0x51, 0x00, 0x1b, 0x11, 0xad, 0x82, 0xd4, 0x96, 0xa4, 0x5e, 0xe6, 0xf5, 0x79, 0x87, 0xe7, 0x8f,
	0x15, 0x9e, 0x6b, 0x3a, 0x41, 0x97, 0xba, 0x4d, 0x4a, 0x3c, 0x4f, 0x5b, 0xc5, 0x43, 0x8b, 0xee,
	0xc5, 0x23, 0x9f, 0xf6, 0xf8, 0x3c, 0xb6, 0x8a, 0xec, 0x69, 0x93, 0x2b, 0xe5, 0xec, 0xdb, 0x4d,
	0xc1, 0x06, 0x70, 0xab, 0xe7, 0x09, 0xa5, 0xf0, 0x1c, 0x6b, 0x48, 0x96, 0x20, 0x90, 0x84, 0x63,
	0xd7, 0x11, 0x2b, 0x4d, 0x9b, 0xd1, 0x6e, 0xf0, 0x83, 0xa5, 0x39, 0x2f, 0xb7, 0xb2, 0x89, 0xda,
	0x75, 0x84, 0x65, 0xae, 0xf0, 0x39, 0x85, 0xfc, 0x7d, 0x34, 0x99, 0x0e, 0x6b, 0xbc, 0xf8, 0x4c,
	0xd3, 0xa0, 0xb6, 0xa5, 0x6f, 0xc3, 0x56, 0x13, 0x8b, 0xcf, 0xfd, 0xc0, 0x72, 0xdb, 0x6d, 0xc2,
	0x67, 0xd4, 0x9a, 0x8e, 0x07, 0xc1, 0xc6, 0x3a, 0xb7, 0xf5, 0x2a, 0x76, 0x71, 0x8e, 0xd9, 0x21,
	0x5e, 0xd7, 0xb4, 0x84, 0xb8, 0x6b, 0x62, 0xf6, 0x68, 0xb5, 0x88, 0x10, 0xb9, 0x8d, 0xa1, 0x96,
	0x4f, 0x8e, 0x11, 0xba, 0x2e, 0x86, 0xc2, 0x5d, 0xd1, 0x36, 0x72, 0xd4, 0x0d, 0x14, 0x97, 0xa1,
	0x7a, 0xdd, 0x06, 0x47, 0xd7, 0x38, 0xda, 0x0f, 0x16, 0xee, 0xe0, 0xa6, 0xae, 0xc1, 0xba, 0xd3,
	0x92, 0x19, 0x1b, 0x09, 0x6f, 0xa1, 0x3d, 0x9c, 0x16, 0xaf, 0xaf, 0x33, 0x2b, 0xdd, 0x46, 0x35,
	0xa4, 0x75, 0x11, 0xbe, 0x83, 0x82, 0x3f, 0x6f, 0x05, 0x39, 0xd4, 0x5d, 0x8e, 0x72, 0x1d, 0xf1,
	0x64, 0x39, 0xea, 0x5e, 0x5d, 0xaf, 0x6b, 0x8b, 0x7f, 0x23, 0xf1, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf9, 0xa9, 0xf3, 0xad, 0x36, 0x21, 0x00, 0x00,
}
