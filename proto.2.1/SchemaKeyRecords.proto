package or;

option java_outer_classname = "SchemaKeyRecords";

// enumerate all type of SchemaKey. 
// For every type, please add a related IndexKey class, which inherits
// SchemaKeyBase and implements the hasPrefix, compare and probably
// hash (for routing) functions.
// Also add the IndexKey creation function to TypeCoder.createIndexKey,
// which is for Btree to construct the corresponding IndexKey when loading
// the key from the persistent stored page.
//
// please minimize the number of types as much as possible.
enum SchemaKeyType {
    DEFAULT_KEY = 0;
    DIRECTORYTABLE_RECORD = 1;
    DIRECTORYTABLE_OWNER = 2;
    RM_TASK = 3;
    DTBOOTSTRAP_TASK = 4;
    CHUNK = 5;
    CM_TASK = 6;
    CM_JOB = 7;
    CM_PROGRESS = 8;
    CHUNK_SEQUENCE = 9;
    RG_RECONFIG_TASK = 10;
    SSTABLE_KEY = 11;
    SSTABLE_TASK_KEY = 12;
    OBJECT_TABLE_KEY = 13;
    DELETE_JOB_TABLE_KEY = 14;
    MT_KEY = 15;
    BTREE_REFERENCE = 16;
    LIST_ENTRY = 17;
    GC_REF_COLLECTION = 18;
    REPO_REFERENCE = 19;

    /* ==== RT DT KEYS ==== */
    NAMESPACE_KEY         = 20;
    BUCKET_KEY            = 21;
    USER_KEY              = 22;
    REP_GROUP_KEY         = 23;
    REP_GROUP_UPD_KEY     = 24;
    RT_BOOTSTRAP_TASK     = 25;
    NK_ENTRY_KEY          = 26;
    NK_REPL_TASK_KEY      = 27;
    CONFIG_KEY            = 28;
    /* ==== RT DT KEYS ==== */

    ZK_CONFIG_KEY = 29;
    ZONE_INFO_KEY         = 30;
}

message SchemaKey {
    required SchemaKeyType type = 1;
    required bytes userKey = 2;
}


// pre-defined user keys

// The default key for old DirectoryTableKey
message DefaultSchemaKey {
    required string parent = 1;
    required string type = 2;
    required string child = 3;
}


// DirectoryTable Record related keys
message DTRecordKey {
    enum DTRecordKeyType {
        JOURNAL_REGION = 0;
        JOURNAL_PARSER_MARKER = 1;
        JOURNAL_REGION_GEO_MARKER = 2;
        JOURNAL_REGION_GC_MARKER = 3;
        BPLUSTREE_INFO = 4;
        BPLUSTREE_DUMP_MARKER = 5;
        BPLUSTREE_PARSER_MARKER = 6;
        OBJECT_INDEX_FORMAT_VERSION = 7;
        // geo related keys
        GEOREPLAYER_REPLICATION_CHECKER_MARKER = 8;
        GEOREPLAYER_CONSISTENCY_CHECKER_MARKER = 9;
        BPLUSTREE_REPLICATION_BOOTSTRAP_JOURNAL_MARKER = 10;
        BPLUSTREE_BOOTSTRAP_MARKER = 11;
        BPLUSTREE_RECOVERY_TRACKER = 12;
        OWNER_EPOCH = 13;
    }

    required DTRecordKeyType type = 1;

    required string dtId = 2;

    required string zone = 3;

    // the detail keys for different type DTRecordKey
    required bytes subKey = 4;
}

message DTRecordJournalRegionSubKey {
    required string major = 1;
    required string minor = 2;
}

message DTRecordBPTreeInfoSubKey {
    required string major = 1;
    required string minor = 2;
}

message DTRecordBPTreeBootstrapSubKey {
    required string dstZone = 1;
}

message DTRecordBPTreeBootstrapJournalSubKey {
    required string rgId = 1;
}


// DirectoryTable ownership related keys
message DTOwnerKey {
    required string dtType = 1;

    required string dtId = 2;
}


// OrderedTask common definitions
message TaskOrder {
    required int64 order = 1;
}

// Metering related keys
message MTTableRecordKey{
    enum Type{
        STORAGE_STAT = 0;
        AGG_STORAGE_STAT = 2;
        BW_STAT = 3;
        AGG_BW_STAT = 4;
    }

    required Type type = 1;
    required bytes subKey = 2;

}

message MTStorageStatKey {
    enum State{
        InProgress=0;
        Completed=1;
    }
    required string DtId = 1;
    optional State StatState = 2;
    required int64 CollectorVersion = 3;
}

message MTAggregatedStorageStatKey {
    required int64 AggregatorVersion = 1;
}

message MTBandwidthStatKey {
    required string NodeId = 1;
    required int64 BandwidthVersion = 2;
}

message MTAggregatedBandwidthStatKey {
    required int64 AggregatorVersion = 1;
}


// RM task related keys
message RMTaskKey {
    enum RMTaskType {
        JOURNAL_ENTRY_GEO_SEND = 0;
        RECOVERY_POINT_SEND = 1;
    }

    required RMTaskType type = 1;

    required TaskOrder taskOrder = 2;

    required string dtId = 3;

    required bytes subKey = 4;
}

message ObjectTableKey {
    enum ObjectTableKeyType {
        COMPACTION_MARKER = 0;
        INDEX = 1;
        UPDATE = 2;
        MPU_PART = 3;
        MPU_LIST = 4;
        MPU_MARKER = 5;
        CROSS_REFERENCE = 6;
    }

    enum ObjectIndexKeySubType {
        HEAD_METADATA = 0;
        SYSTEM_METADATA = 1;
        USER_METADATA = 2;
        RANGE = 3;
        DELETION_MARKER = 4;
        REMOVE_MARKER = 5;
    }

    required string objectId = 1;

    optional ObjectTableKeyType type = 2;

    // update entry does not have versionId
    // index entry always has version, null version will have versionId = 0
    optional int64 versionId = 3;

    optional ObjectIndexKeySubType objectIndexKeySubType = 4;

    // Only for range key
    optional int64 offset = 5;

    optional int64 sequence = 6;

    optional string uploadId = 7;

    optional int32 partNum = 8;

    optional int64 partSeq = 9;

    optional string keypoolId = 10;

    optional string crossReferenceId = 11;

    //source chunkId if "COPY" scenario; for CROSS_REFERENCE type
    optional string chunkId = 12;
}

message RMTaskJournalEntryGeoSendKey {
    required string major = 1;

    required string dstZone = 2;

    required string cos = 3;

    required string rgId = 4;
}

message RMTaskRecoveryPointSendKey {
    required string failedZone = 1;

    required string cos = 2;

    required string rgId = 3;

    required string dstZone = 4;
}

// SSM realted keys
message SSTableRecordKey{
    enum Type{
        FREE_BLOCK  = 0;
        BUSY_BLOCK  = 1;
        DEVICE      = 2;
        PARTITION   = 3;
        BLOCK_BIN   = 4;

    }
    required Type type = 1;
    required bytes subKey = 2;
}

message SSTableDeviceEntryKey{
    required string deviceId = 1;
}

message SSTablePartitionEntryKey{
    required string deviceId = 1;
    required string partitionId = 2;
}

message SSTableFreeBlockEntryKey{
    required string deviceId = 1;
    required string partitionId = 2;
    required string blockBinId = 3;
    required int64 offset = 4;
    optional int64 freedTime = 5;
}

message SSTableBusyBlockEntryKey{
    required string deviceId = 1;
    required string partitionId = 2;
    required string blockBinId = 3;
    required int64 offset = 4;
}

message SSTableBlockBinEntryKey{
    required string deviceId = 1;
    required string partitionId = 2;
    required string blockBinId = 3;
}

message SSTableBlockLevelTaskKey{
    enum Type{
        BLOCK_ALLOCATE_TASK     = 0;
        BLOCK_FREE_TASK         = 1;
        BLOCK_RELINQUISH_TASK   = 2;
        BLOCK_RECEIVE_TASK      = 3;
    }
    required Type type = 1;
    required string deviceId = 2;
    required string partitionId = 3;
    required string blockBinId = 4;
    required int64 offset = 5;
}
message DTBootstrapTaskKey {
    required string type = 1;

    required string rgId = 2;

    required string cos = 3;

    required string dstZone = 4;

    required string dtId = 5;

    required string srcZone = 6;
}

message GCRefCollectionKey {
    enum GCRefType {
        REPO = 0;
        BTREE = 1;
        JOURNAL = 2;
    }

    required GCRefType type = 1;

    // chunk table id
    required string ctId = 2;

    required string zone = 3;

    required string rgId = 4;

    // OB table id
    required string obId = 5;
}

message ChunkKey {
    required string chunkId = 1;
}

message CMTaskKey {
    enum CMTaskType {
        // seal chunk
        SEAL = 0;
        // EC encoding
        EC = 1;
        // consistency checking task, only in memory
        CC = 2;
        // repair chunk
        REPAIR = 3;
        // sweep extra copy in chunk
        SWEEP = 4;
        // geo replicate chunk info (CHUNK_INFO_GEO_SEND_TASK) !!
        GEO_INFO_SEND = 5;
        // geo replicate chunk data (CHUNK_GEO_REPLICATION_TASK)
        GEO_DATA_SEND = 6;
        // start COPY chunk write (CHUNK_GEO_COPY_ENTRY)
        GEO_COPY = 7;
        // geo delete chunk
        GEO_DELETE = 8;
        // grouping chunks for XOR (CHUNK_XOR_TASK)
        XOR_GROUP = 9;
        // XOR encoding
        XOR_ENCODE = 10;
        // XOR decoding
        XOR_DECODE = 11;
        // free blocks in chunk
        FREE_BLOCKS = 12;
        // check if a sealed journal chunk could be reclaimed
        CHECK_JOURNAL = 13;
        // check if a sealed btree chunk could be reclaimed (BPLUSTREE_RECLAIM_CHUNK)
        CHECK_BTREE = 14;
        REMOTE_CHUNK_CACHE = 15;
    }

    required CMTaskType type = 1;

    required TaskOrder taskOrder = 2;

    required string chunkId = 3;

    // extended part for each detailed task, just a simple manual GPB extension
    required bytes subKey = 4;
}

message CMGeoInfoSendTaskKey {
    enum UpdateType {
        CREATE = 0;
        DELETE = 1;
        UPDATE = 2;
    }

    // dest zone precedes order and chunk id in comparing
    required string destZone = 1;

    required string cos = 2;

    required string rgId = 3;

    required UpdateType updateType = 4;

    // secondary zone
    required string secondary = 5;

    required bool isReplicated = 6;
}

message CMGeoDataSendTaskKey {
    required string secondary = 1;
}

message CMGeoCopyTaskKey {
    required string opId = 1;
}

message CMXorGroupTaskKey {
    // rgId and primary precede order and chunk id in comparing
    required string rgId = 1;

    // primary zone
    required string primary = 2;
}

message CMXorEncodeTaskKey {
    // rgId precedes order and chunk id in comparing
    required string rgId = 1;
}

// keep the XOR encode and decode as two separate ones,
// so it is free to add field in one without impact the other
message CMXorDecodeTaskKey {
    // rgId precedes order and chunk id in comparing
    required string rgId = 1;
}

message CMJobKey {
    enum CMJobType {
        // type for listing all jobs
        ALL = 0;

        CHECKSUM = 1;
        FIND_SEAL_LENGTH = 2;
        GEO_REPLICATION = 3;
        GEO_DELETE = 4;
        LOCAL_COPY = 5;
        EC_RECOVER = 6;
        EC = 7;
    }

    required string chunkId = 1;

    required CMJobType type = 2;

    required string jobId = 3;
}

message CMProgressKey {
    enum CMProgressType {
        CC = 0;
        GC = 1;
    }

    required CMProgressType type = 1;
}

message ChunkSequenceKey {
    required string rgId = 1;
}

message RgReconfigTaskKey {
    enum ReconfigType {
        // for listing purpose
        ALL = 0;

        ADD = 1;
        REMOVE = 2;
        FAIL = 3;
        //the ReconfigAdd is caught by a remote zone and then the remote zone
        //notify the local zone to insert ReconfigType task
        REMOTEADD = 4;
    }

    required string rgId = 1;

    required ReconfigType type = 2;

    required string zone = 3;

    required string dtId = 4;
}

// the keypool/namespace listing entry
message ListEntryKey {
    enum ListEntryType {
        KEYPOOL = 0;
        FSNS_DIR = 1;
        FSNS_FILE = 2;
    }

    required ListEntryType type = 1;

    required string parent = 2;

    required string child = 3;
}

message DeleteJobTableKey {
    enum DeleteJobTableKeyType {
        DELETE_JOB = 0;
        CLEANUP_JOB = 1;
        DELETE_LIST_ENTRY_JOB = 2;
    }

    required DeleteJobTableKeyType type = 1;

    required int64 expireTime = 2;

    // For delete job
    optional string objectId = 3;

    // For cleanup job
    optional ObjectTableKey objectKey = 4;

    // For delete list entry job
    optional string keypoolId = 5;

    // For delete list entry job
    optional string keyName = 6;
}

message BtreeReferenceKey {
    required string chunkId = 1;

    required string dtId = 2;
}

message RepoReferenceKey {
    enum ReferenceType {
        // for listing purpose
        ALL = 0;

        POSITIVE = 1;
        NEGATIVE = 2;
    }

    // only meaningful for positive entry
    enum CrossType {
        // for listing purpose
        ANY = 0;

        NORMAL = 1;
        // positive added for cross reference
        CROSS = 2;
    }

    required string chunkId = 1;

    required ReferenceType type = 2;

    required CrossType crossType = 3;

    required string objectId = 4;

    required string versionId = 5;

    required int64 physicalOffset = 6;

    required int64 physicalLength = 7;

    required int64 logicalOffset = 8;

    required int64 logicalLength = 9;
}

message NamespaceKey {
    required string namespaceId = 1;
}

message BucketKey {
    required string bucketId    = 1;
}

message UserKey {
    optional string namespace = 1;
    required string userId = 2;
}

message ConfigKey { // key for storing config in RT
    required string configId = 1;
}

message RGKey {
    required string rgId = 1;
}

message RGUpdateKey {
    required string rgId  = 1;
}

message ResourceTableBootstrapTaskKey {
    required string type = 1;

    required string rgId = 2;

    required string dstZone = 4;
}

message NKEntryKey {
    required string namespace   = 1;
    required string bucket      = 2;
}

message NKEntryReplicationTaskKey {
    enum NKTaskType {
        ADD     = 1;
        REMOVE  = 2;
    }

    required TaskOrder taskOrder        = 1;
    required string namespace           = 2;
    required string bucket              = 3;
    required string dstZone             = 4;
    required NKTaskType type            = 5;
}

// misc keys stored to ZKConfigTable
message ZKConfigKey {
    enum ConfigKeyType {
        HEAD_TYPE_INFO = 0;
        OBJECT_BASE_URL = 1;
        INGESTION_TASK = 2;
        VARRAY = 3;
    }

    required ConfigKeyType type = 1;

    required string keyId = 2;
}


message ZoneInfoKey {
    required string vdcId = 1;
}
