package or;

option java_outer_classname = "SchemaKeyRecords";

// enumerate all type of SchemaKey. 
// For every type, please add a related IndexKey class, which inherits
// SchemaKeyBase and implements the hasPrefix, compare and probably
// hash (for routing) functions.
// Also add the IndexKey creation function to TypeCoder.createIndexKey,
// which is for Btree to construct the corresponding IndexKey when loading
// the key from the persistent stored page.
//
// please minimize the number of types as much as possible.
enum SchemaKeyType {
    DEFAULT_KEY = 0;
    DIRECTORYTABLE_RECORD = 1;
    DIRECTORYTABLE_OWNER = 2;
    RM_TASK = 3;
    DTBOOTSTRAP_TASK = 4;
    CHUNK = 5;
    CM_TASK = 6;
    CM_JOB = 7;
    CM_PROGRESS = 8;
    CHUNK_SEQUENCE = 9;
    RG_RECONFIG_TASK = 10;
    SSTABLE_KEY = 11;
    SSTABLE_TASK_KEY = 12;
    OBJECT_TABLE_KEY = 13;
    DELETE_JOB_TABLE_KEY = 14;
    MT_KEY = 15;
    BTREE_REFERENCE = 16;
    LIST_ENTRY = 17;
    GC_REF_COLLECTION = 18;
    REPO_REFERENCE = 19;

    /* ==== RT DT KEYS ==== */
    NAMESPACE_KEY         = 20;
    BUCKET_KEY            = 21;
    USER_KEY              = 22;
    REP_GROUP_KEY         = 23;
    REP_GROUP_UPD_KEY     = 24;
    RT_BOOTSTRAP_TASK     = 25;
    NK_ENTRY_KEY          = 26;
    NK_REPL_TASK_KEY      = 27;
    CONFIG_KEY            = 28;
    /* ==== RT DT KEYS ==== */

    ZK_CONFIG_KEY = 29;
    ZONE_INFO_KEY         = 30;

    CHUNK_GC_SCAN_STATUS = 31;
    CHUNK_REFERENCE_SCAN_PROGRESS = 32;

    MT2AGG_RECORD = 33;
    MT2_RECORD = 34;
    OBMETERING_COLLECTOR_TASK = 35;
    GC_PROGRESS = 36;

    // vnest system configuration keys
    VIPR_NEST_SYSTEM_KEY = 37;

    // vnest tasks handled by dt scanners
    VIPR_NEST_TASK = 38;

    // wrapper around all keys put into vnest
    VIPR_NEST_KEY = 39;

    REJOIN_TASK_KEY = 40;

    TEMP_FAILED_ZONE_STATUS_TRANSITION_TASK_KEY = 41;

    REFTABLE_REBUILD_TASK = 42;
    REFTABLE_REBUILD_DONE_MARKER = 43;
    
    ALERT_KEY= 44;
    
    AUDIT_KEY= 45;

    RECONCILE_TASK = 46;

    TOKEN_KEY = 47;
    LOGIN_KEY = 48;

    CACHED_CHUNK_KEY = 49;

    AUTH_PROVIDER_KEY = 50;

    // entry only used in level 2 DT to protect stale update due to stuck request
    CHUNK_TAG = 51;

    DT_CLEANUP_KEY = 52;

    // task to scan leftover metering neg ref before upgrade
    MT_LEFT_NEGREF_UPGRADE_SCAN_TASK = 53;

    // key in OB table which records the ECS version and the upgrade time
    // used by journal parser to determine whether to add update sequence to repo reference key
    ECS_VERSION_KEY = 54;

    //paxos tasks
    PAXOS_TASK =55;

    DYNAMIC_CONFIG_KEY = 56;

    DELETED_BUCKET_KEY = 57;

    // OB table key
    // min-not-seal-sequence-number from 128 CT tables
    // use them to move forward gc progress even with no load
    REPO_CHUNK_PROGRESS = 58;

    // key indicating that this chunk is target for GC scan process
    // It is different from CHUNK_GC_SCAN_STATUS: a CHUNK_GC_SCAN_STATUS is inserted per chunk per DT,
    // while this key is inserted per chunk
    CHUNK_GC_SCAN_STATUS_TASK = 59;

    // partial GC
    REPO_USAGE = 60;
    REPO_USAGE_CHUNK_INDEX = 61;
    REPO_USAGE_PARTIALGC_CONTEXT = 62;
    PARTIAL_GC_TASK = 63;

    // wrapper around all keys put into MI table
    MI_ENTRY = 64;
    /*=== FILE SVC KEYS=== */
    FILEKEYVAL_KEY = 65;
    LOCK_MGR_KEY = 66;


    // indicate RR collector status
    REPO_REFERENCE_COLLECTOR_KEY = 67;

    // listable tag key in OB table
    LISTABLE_TAG_KEY = 68;
    // listable tag upgrade task key in LS table
    LISTABLE_TAG_UPGRADE_LS_TASK_KEY = 69;
    // listable tag upgrade task key in RT table
    LISTABLE_TAG_UPGRADE_RT_TASK_KEY = 70;

    TRANSFORMATION_INFO                        = 101;
    TRANSFORMATION_EXECUTABLE_ENTRY_KEY        = 102;
    TRANSFORMATION_EXECUTABLE_ENTRY_RESULT_KEY = 103;
    TRANSFORMATION_ENUMERATION_ENTRY           = 104;
    TRANSFORMATION_CHUNK_ENTRY                 = 105;
    TRANSFORMATION_UNREAD_OBJECT_ENTRY         = 107;

    STATS_BACKUP_KEY = 108;
    TRANSFORMATION_MAPPING_ENTRY               = 109;
    REPO_CHUNK_GARBAGE_INFO  = 110;

    // Hdfs Delegation Token persistence info into RT table
    HDFS_DELEGATION_TOKEN_ENTRY_KEY       = 111;
    // Hdfs Salt Data persistence info into RT table
    HDFS_SALT_DATA_ENTRY_KEY       = 112;

    ALERT_STATS_KEY = 113;

    TRANSFORMATION_OBJECT_LIST_KEY = 114;

    BTREE_CORRUPTION_SCAN_PROGRESS = 115;

    FABRIC_SEQUENCE_KEY = 116;

    RT_TASK_MESSAGE_KEY = 117;

    MI_REJOIN_ENTRY = 120;

    USER_TAG_KEY = 121;
}

message SchemaKey {
    required SchemaKeyType type = 1;
    required bytes userKey = 2;
}


// pre-defined user keys

// The default key for old DirectoryTableKey
message DefaultSchemaKey {
    required string parent = 1;
    required string type = 2;
    required string child = 3;
}


// DirectoryTable Record related keys
message DTRecordKey {
    enum DTRecordKeyType {
        JOURNAL_REGION = 0;
        JOURNAL_PARSER_MARKER = 1;
        JOURNAL_REGION_GEO_MARKER = 2;
        JOURNAL_REGION_GC_MARKER = 3;
        BPLUSTREE_INFO = 4;
        BPLUSTREE_DUMP_MARKER = 5;
        BPLUSTREE_PARSER_MARKER = 6;
        OBJECT_INDEX_FORMAT_VERSION = 7;
        // geo related keys
        GEOREPLAYER_REPLICATION_CHECKER_MARKER = 8;
        GEOREPLAYER_CONSISTENCY_CHECKER_MARKER = 9;
        BPLUSTREE_REPLICATION_BOOTSTRAP_JOURNAL_MARKER = 10;
        BPLUSTREE_BOOTSTRAP_MARKER = 11;
        BPLUSTREE_RECOVERY_TRACKER = 12;
        OWNER_EPOCH = 13;
        BPLUSTREE_OBMETERING_SCAN_MARKER = 14;
        // metering journal parser marker
        METERING_JOURNAL_PARSER_MARKER = 15;
    }

    required DTRecordKeyType type = 1;

    required string dtId = 2;

    required string zone = 3;

    // the detail keys for different type DTRecordKey
    required bytes subKey = 4;
}

message DTRecordJournalRegionSubKey {
    required string major = 1;
    required string minor = 2;
}

message DTRecordBPTreeInfoSubKey {
    required string major = 1;
    required string minor = 2;
}

message DTRecordBPTreeBootstrapSubKey {
    required string dstZone = 1;
}

message DTRecordBPTreeBootstrapJournalSubKey {
    required string rgId = 1;
}


// DirectoryTable ownership related keys
message DTOwnerKey {
    required string dtType = 1;

    required string dtId = 2;
}


// OrderedTask common definitions
message TaskOrder {
    required int64 order = 1;
}

// Metering related keys V 1
message MTTableRecordKey{
    enum Type{
        STORAGE_STAT = 0;
        AGG_STORAGE_STAT = 2;
        BW_STAT = 3;
        AGG_BW_STAT = 4;
    }

    required Type type = 1;
    required bytes subKey = 2;

}

message MTStorageStatKey {
    enum State{
        InProgress=0;
        Completed=1;
    }
    required string DtId = 1;
    optional State StatState = 2;
    required int64 CollectorVersion = 3;
}

message MTAggregatedStorageStatKey {
    required int64 AggregatorVersion = 1;
}

message MTBandwidthStatKey {
    required string NodeId = 1;
    required int64 BandwidthVersion = 2;
}

message MTAggregatedBandwidthStatKey {
    required int64 AggregatorVersion = 1;
}

//Metering Keys for MT2
message MTRecordKey {
    enum MTRecordKeyType {
        BUCKET_STAT = 0;
        BUCKET_INTERMEDIATE_STAT = 1;
        BANDWIDTH_STAT = 2;
        OBJECT_DELTA = 3;
        BUCKET_STAT_TRASH = 4;//sub key same as that of BUCKET_STAT
        BANDWIDTH_STAT_TRASH = 5;//sub key same as that of BANDWIDTH_STAT
        AGG_OBJECT_DELTA = 6;
        NAMESPACE_INTERMEDIATE_STAT = 7; //does not require a equivalent trash entry, uses MTNamespaceIntermediateStatSubKey as sub key
        NAMESPACE_INTERMEDIATE_AGGREGATED_STAT = 8; //uses MTNamespaceIntermediateStatSubKey as sub key but with the bucket value as empty
        NAMESPACE_AGGREGATION_THRESHOLD = 9;//gives the time after which local aggregation should start
        POSITIVE_REF_MARKER  = 10;
        METERING_PROGRESS_MARKER = 11;
        BLOB_POS_START_MAJOR = 12; // means from which major we start using blob logic for +ive ref
    }
    required MTRecordKeyType type = 1;
    required bytes subKey = 2;
}

//Metering Keys for MTAGG
message MTAggregateRecordKey {
    enum MTAggregateRecordKeyType {
        BUCKET_INTERMEDIATE_STAT = 0;
        BUCKET_INTERMEDIATE_STAT_TRASH = 1; //sub key same as that of BUCKET_INTERMEDIATE_STAT
        FIX_AGGREGATE_STAT = 2;
        BUCKET_FINAL_STAT = 3;
        NAMESPACE_STAT = 4;
        NAMESPACE_INTERMEDIATE_STAT = 5;
        NAMESPACE_INTERMEDIATE_STAT_TRASH = 6; //sub key same as that of NAMESPACE_INTERMEDIATE_STAT
        FIX_NAMESPACE_AGGREGATE_STAT = 7;
        NODE_STAT_FINAL = 9;
        SHIP_NODE_STAT_TASK = 10; // used to ship node info to zone owner
        ZONE_STAT = 11;
        ZONE_STAT_TRASH = 12;
        ZONE_STAT_FINAL = 13;
        CHECK_FOR_AGGREGATION_ISSUES = 14;
        GEO_METRICS_NODE_STAT = 15;
        GEO_METRICS_NODE_STAT_TRASH = 16;
        GEO_METRICS_ZONE_STAT_FINAL = 17;
        GEO_METRICS_RG_STAT_FINAL = 18;
    }
    required MTAggregateRecordKeyType type = 1;
    required bytes subKey = 2;
}

message MTNamespaceAggregationThresholdSubKey {
    //DT Id of the DT whose upgrade status is specified by this entry
    //not really necessary this is always equal to the DT in which the entry is present
    //but adding it just to not have subkey empty
    required string dtId = 1;
}

message MTCheckForAggregationIssuesSubKey{
    //DT Id of the DT whose upgrade status is specified by this entry
    //not really necessary this is always equal to the DT in which the entry is present
    //but adding it just to not have subkey empty
    required string dtId = 1;
}

message MTBucketStatSubKey {
	required string namespace = 1;
	required string bucket = 2;
	required int64 time = 3;
	required string dtId = 4;
	required string resourceId = 5;
    optional int64 offset = 6;//to be used only for positive reference
    optional string randomId = 7; // randomId can be ignored now
    optional int64 endOffset = 8;//to be used only for positive reference
    optional bool notCounted = 9; // to used for positive reference of trash type, meaning this key will not be counted by not sending to MA
}

message MTBandwidthStatSubKey {
	required string namespace = 1;
	required string bucket = 2;
	required int64 time = 3;
	required string nodeId = 4;
}

message MTBucketIntermediateStatSubKey {
	required string namespace = 1;
	required string bucket = 2;
	required int64 time = 3;
    required string randomId = 4;//to prevent us from overwriting an already existing fix key
}

message MTBucketFinalStatSubKey {
	required string namespace = 1;
	required string bucket = 2;
	required int64 time = 3;
}

message MTFixAggregateStatSubKey {
	required string namespace = 1;
	required string bucket = 2;
	required int64 time = 3;
}

message MTNamespaceIntermediateStatSubKey{
    required string namespace = 1;
    required int64 time = 2;
    required string bucket = 3;//only to prevent key collisions when the bucket aggregators insert this key
    required string randomId = 4;//to prevent us from overwriting an already existing fix key
}

message MTNamespaceStatSubKey {
	required string namespace = 1;
	required int64 time = 2;
}

message MTNamespaceFixAggregateStatSubKey{
    required string namespace = 1;
    required int64 time = 2;
}

//The following 2 messages don't need the zone in the key as zone associated with the index store determines the Zone
message MTNodeFinalStatSubKey {
    required string node = 1;
    required int64 time = 2;
}

//made on the owner of the zone entry
message MTZoneStatSubKey{
    required int64 time = 1;
    required string secondaryKey = 3;//corresponds to the value in the MTShipNodeStatTaskSubKey
}

message MTZoneFinalStatSubKey{
    required int64 time = 1;
}

// the subkey will be populated in OB for metering usage
// All fields made optional to facilitate listing.
message MTObjectDeltaSubKey{
    optional int64 timestamp = 1;
    optional string objectId = 2;
    optional int64 sequence = 3;
}

// the subkey will be populated in OB for metering usage
message MTAggregatedObjectDeltaSubKey{
    optional string namespace = 1;
    optional string keypool = 2;
    optional int64 timestamp = 3;
    optional string randomId = 4;
}

message MTPosRefProcessingMarkerSubKey{
    required string dtId = 1;
    required int64  majorNumberProcessed= 2;
}

message MTProgressMarkerSubKey{
    required string dtId = 1;
}

message MTBlobPosStartMajorKey {
    required string dtId = 1;
}

message MTGeoMetricsNodeStatKey {
    required string node = 1;
    required int64 time = 2;
    required string pid = 3;
}


message MTGeoMetricsNodeStatTrashKey {
    required string node = 1;
    required int64 time = 2;
    required string pid = 3;
}

message MTGeoMetricsRGFinalStatKey {
    required string rgId = 1;
    required int64 time = 2;
    required string zone = 3;
}

message MTGeoMetricsZoneFinalStatKey {
    required string zone = 1;
    required int64 time = 2;
}

// RM task related keys
message RMTaskKey {
    enum RMTaskType {
        JOURNAL_ENTRY_GEO_SEND = 0;
        RECOVERY_POINT_SEND = 1;
    }

    required RMTaskType type = 1;

    required TaskOrder taskOrder = 2;

    required string dtId = 3;

    required bytes subKey = 4;
}

message ObjectTableKey {
    enum ObjectTableKeyType {
        COMPACTION_MARKER = 0;
        INDEX = 1;
        UPDATE = 2;
        MPU_PART = 3;
        MPU_LIST = 4;
        MPU_MARKER = 5;
        CROSS_REFERENCE = 6;
        LOCK_COMPACTION_MARKER = 7;
    }

    enum ObjectIndexKeySubType {
        HEAD_METADATA = 0;
        SYSTEM_METADATA = 1;
        USER_METADATA = 2;
        RANGE = 3;
        DELETION_MARKER = 4;
        REMOVE_MARKER = 5;
        LOCK_RANGE = 6;
    }

    required string objectId = 1;

    optional ObjectTableKeyType type = 2;

    // update entry does not have versionId
    // index entry always has version, null version will have versionId = 0
    optional int64 versionId = 3;

    optional ObjectIndexKeySubType objectIndexKeySubType = 4;

    // Only for range key
    optional int64 offset = 5;

    // update sequence
    optional int64 sequence = 6;

    optional string uploadId = 7;

    optional int32 partNum = 8;

    optional int64 partSeq = 9;

    optional string keypoolId = 10;

    optional string crossReferenceId = 11;

    //source chunkId if "COPY" scenario; for CROSS_REFERENCE type
    optional string chunkId = 12;

    // IC sequence that created this index entry; only for RANGE subtype
    optional int64 indexSequence = 13;
}

message RMTaskJournalEntryGeoSendKey {
    required string major = 1;

    required string dstZone = 2;

    required string cos = 3;

    required string rgId = 4;

    optional string minor = 5;
}

message RMTaskRecoveryPointSendKey {
    required string failedZone = 1;

    required string cos = 2;

    required string rgId = 3;

    required string dstZone = 4;
}

// SSM realted keys
message SSTableRecordKey{
    enum Type{
        FREE_BLOCK  = 0;
        BUSY_BLOCK  = 1;
        DEVICE      = 2;
        PARTITION   = 3;
        BLOCK_BIN   = 4;
    }
    required Type type = 1;
    required bytes subKey = 2;
}

message SSTableDeviceEntryKey{
    required string deviceId = 1;
}

message SSTablePartitionEntryKey{
    required string deviceId = 1;
    required string partitionId = 2;
}

message SSTableFreeBlockEntryKey{
    required string deviceId = 1;
    required string partitionId = 2;
    required string blockBinId = 3;
    required int64 offset = 4;
    optional int64 freedTime = 5;
}

message SSTableBusyBlockEntryKey{
    required string deviceId = 1;
    required string partitionId = 2;
    required string blockBinId = 3;
    required int64 offset = 4;
}

message SSTableBlockBinEntryKey{
    required string deviceId = 1;
    required string partitionId = 2;
    required string blockBinId = 3;
}

message SSTableBlockLevelTaskKey{
    enum Type{
        BLOCK_ALLOCATE_TASK     = 0;
        BLOCK_FREE_TASK         = 1;
        BLOCK_RELINQUISH_TASK   = 2;
        BLOCK_RECEIVE_TASK      = 3;
    }
    required Type type = 1;
    required string deviceId = 2;
    required string partitionId = 3;
    required string blockBinId = 4;
    required int64 offset = 5;
}
message DTBootstrapTaskKey {
    required string type = 1;

    required string rgId = 2;

    required string cos = 3;

    required string dstZone = 4;

    required string dtId = 5;

    required string srcZone = 6;
}

message GCRefCollectionKey {
    enum GCRefType {
        REPO = 0;
        BTREE = 1;
        JOURNAL = 2;
    }

    required GCRefType type = 1;

    // chunk table id
    required string ctId = 2;

    required string zone = 3;

    required string rgId = 4;

    // OB table id
    required string obId = 5;
}

message ChunkTagKey {
    required string chunkId = 1;
}

message ChunkKey {
    required string chunkId = 1;
}

message RepoChunkGarbageInfoKey {
    required string chunkId = 1;
}

message CMTaskKey {
    enum CMTaskType {
        // seal chunk
        SEAL = 0;
        // EC encoding
        EC = 1;
        // consistency checking task, only in memory
        CC = 2;
        // repair chunk
        REPAIR = 3;
        // sweep extra copy in chunk
        SWEEP = 4;
        // geo replicate chunk info (CHUNK_INFO_GEO_SEND_TASK) !!
        GEO_INFO_SEND = 5;
        // geo replicate chunk data (CHUNK_GEO_REPLICATION_TASK)
        GEO_DATA_SEND = 6;
        // start COPY chunk write (CHUNK_GEO_COPY_ENTRY)
        GEO_COPY = 7;
        // geo delete chunk
        GEO_DELETE = 8;
        // grouping chunks for XOR (CHUNK_XOR_TASK)
        XOR_GROUP = 9;
        // XOR encoding
        XOR_ENCODE = 10;
        // XOR decoding
        XOR_DECODE = 11;
        // free blocks in chunk
        FREE_BLOCKS = 12;
        // check if a sealed journal chunk could be reclaimed
        CHECK_JOURNAL = 13;
        // check if a sealed btree chunk could be reclaimed (BPLUSTREE_RECLAIM_CHUNK)
        CHECK_BTREE = 14;
        REMOTE_CHUNK_CACHE = 15;
        // unseal geo replication task track
        GEO_DATA_SEND_TRACKER = 16;
        // rebalance task
        REBALANCE = 17;
        
        //type for store result ec task
        EC_PROGRESS = 18;
    }

    required CMTaskType type = 1;

    required TaskOrder taskOrder = 2;

    required string chunkId = 3;

    // extended part for each detailed task, just a simple manual GPB extension
    required bytes subKey = 4;

}


message BTreeReclaimProgress {
    optional CMTaskKey checkpoint = 1;
    optional uint64 timestamp = 2;
    optional bool isComplete = 3;
}


message CMTaskProgress {

    enum TaskStatus {
        Pending = 0;
        InProgress = 1;
        Failed = 2;
        Completed = 3;
    }

    required TaskStatus status = 1;
}

message CMEcTaskKey {

     enum ChunkType {
            LOCAL = 0;
            REMOTE = 1;
            COPY = 2;
            ENCODED = 3;
            PARITY = 4;
     }

     optional ChunkType chunkType = 1;

     optional bool isTrackProgress = 2;
}

message CMGeoInfoSendTaskKey {
    enum UpdateType {
        CREATE = 0;
        DELETE = 1;
        UPDATE = 2;
    }

    // dest zone precedes order and chunk id in comparing
    required string destZone = 1;

    required string cos = 2;

    required string rgId = 3;

    required UpdateType updateType = 4;

    // secondary zone
    required string secondary = 5;

    required bool isReplicated = 6;

    optional int32 sealedLength = 7;

    optional int32 capacity = 8 [default = -1];
    
    // Failover zone attribute will be added to chunk info when full replication flag 
    // for the RG is enable. In case of full rep, we have 1 LOCAL chunk and rest of them
    // are COPY. When the LOCAL goes down, the VDC which is the failoverZone will take
    // ownership and will be promoted to local. When the failoverZone itself goes down
    // the LOCAL will elect a new failover zone and set it on ChunkInfo.
    optional string failoverZone = 9;
}

enum GeoDataSendPurpose {
    NONE = 0;
    FAILOVER = 1;
    BOOTSTRAP = 2;
    // is xor decode triggered for geo delete
    GEO_DELETE = 3; 
    // is xor decode triggered by read failure from primary zone
    READ = 4;
    // is xor to decode and change status to COPY.
    COPY=5;
    PROMOTE_TO_LOCAL=6;
}

// Previously variables of this message were used as part of CMGeoDataSendTaskKey 
// for accounting geo replication stats.
// With unsealed geo stats implementation it was suggested to use this in value
// part of task, so that it does not pollute CMGeoDataSendTrackerTaskIndexKey
message CMGeoDataSendTaskValue {
    optional GeoDataSendPurpose purpose = 1;
    optional string statsAccountingZone = 2;
}

message CMGeoDataSendTaskKey {
    required string secondary = 1;
    optional GeoDataSendPurpose purpose = 2;
    optional string statsAccountingZone = 3;
}

message CMGeoCopyTaskKey {
    required string opId = 1;
}

message CMXorGroupTaskKey {
    // rgId and primary precede order and chunk id in comparing
    required string rgId = 1;

    // primary zone
    required string primary = 2;
}

message CMXorEncodeTaskKey {
    // rgId precedes order and chunk id in comparing
    required string rgId = 1;
}

// keep the XOR encode and decode as two separate ones,
// so it is free to add field in one without impact the other
message CMXorDecodeTaskKey {
    // rgId precedes order and chunk id in comparing
    required string rgId = 1;
    optional GeoDataSendPurpose purpose = 2;
    optional string statsAccountingZone = 3;
}

message CMJobKey {
    enum CMJobType {
        // type for listing all jobs
        ALL = 0;

        CHECKSUM = 1;
        FIND_SEAL_LENGTH = 2;
        GEO_REPLICATION = 3;
        GEO_DELETE = 4;
        LOCAL_COPY = 5;
        EC_RECOVER = 6;
        EC = 7;
        GEO_UNSEAL_REPLICATION = 8;
        GEO_UNSEAL_COMMIT = 9;
        REBALANCE = 10;
    }

    required string chunkId = 1;

    required CMJobType type = 2;

    required string jobId = 3;
}

message CMProgressKey {
    enum CMProgressType {
        CC = 0;
        GC = 1;
        CMCC = 2;  // chunk metadata consistency check
        STATS = 3; // scan to get statistics for historical data
        RB = 4;    // ec chunk rebalance
        CS = 5; //progress save corruption scan mark
        CS_DONE = 6; //progress done mark indicate one round corruption scan complete
        ES = 7; //save progress add ec-task scan mark
        ES_DONE = 8;//progress done mark indicate one round ec-task scan complete
        BTREE_RECLAIM = 9;
    }

    required CMProgressType type = 1;
}

message ChunkSequenceKey {
    required string rgId = 1;
    optional string dataType = 2;
}

message RgReconfigTaskKey {
    enum ReconfigType {
        // for listing purpose
        ALL = 0;

        ADD = 1;
        REMOVE = 2;
        FAIL = 3;
        //the ReconfigAdd is caught by a remote zone and then the remote zone
        //notify the local zone to insert ReconfigType task
        REMOTEADD = 4;
    }

    required string rgId = 1;

    required ReconfigType type = 2;

    required string zone = 3;

    required string dtId = 4;
}

// the keypool/namespace listing entry
message ListEntryKey {
    enum ListEntryType {
        KEYPOOL = 0;
        FSNS_DIR = 1;
        FSNS_FILE = 2;
        OBJECT_OWNER_HISTORY = 3;
        OBJECT_LOCK = 4;
    }

    required ListEntryType type = 1;

    required string parent = 2;

    required string child = 3;

    optional bool singleOwner = 4 [default = false];
}

message DeleteJobTableKey {
    enum DeleteJobTableKeyType {
        DELETE_JOB = 0;
        CLEANUP_JOB = 1;
        DELETE_LIST_ENTRY_JOB = 2;
        ADD_POSITIVE_REFERENCE_JOB = 3;
        DELETE_ALL_INDICES_JOB = 4;
    }

    enum KeyVersionType {
        version22 = 0;
        version31 = 1;
    }

    required DeleteJobTableKeyType type = 1;

    // Time at which the job should be run
    required int64 expireTime = 2;

    // For delete job
    optional string objectId = 3;

    // For cleanup job
    optional ObjectTableKey objectKey = 4;

    // For delete list entry job
    optional string keypoolId = 5;

    // For delete list entry job
    optional string keyName = 6;

    optional KeyVersionType keyVersion = 7;

    // for clean up update entries
    optional string versionId = 8;

    // the IC sequence that creates this task.
    // present for delete list entry job and cleanup job
    optional int64 indexSequence = 9;

    // For delete list entry job
    optional string keypoolFullName = 10;
}

message ReconcileTaskKey {
    required string objectId = 1;

    // start sequence of conflict range (inclusive),
    // use -1 for listing
    required int64 startSequence = 2;

    // end sequence of conflict range (exclusive),
    // use -1 for listing
    required int64 endSequence = 3;
}

message BtreeReferenceKey {
    required string chunkId = 1;

    required string dtId = 2;

    optional string zone = 3;
}

message RepoReferenceKey {
    enum ReferenceType {
        // for listing purpose
        ALL = 0;

        POSITIVE = 1;
        NEGATIVE = 2;
    }

    // only meaningful for positive entry
    enum CrossType {
        // for listing purpose
        ANY = 0;

        NORMAL = 1;
        // positive added for cross reference
        CROSS = 2;
    }

    required string chunkId = 1;

    required ReferenceType type = 2;

    required CrossType crossType = 3;

    required string objectId = 4;

    required string versionId = 5;

    required int64 physicalOffset = 6;

    required int64 physicalLength = 7;

    required int64 logicalOffset = 8;

    required int64 logicalLength = 9;

    optional int64 offsetInObject = 10;

    // used by cross reference, if true
    // cross reference scanner needs to update offsetInObject
    optional bool isAppend = 11;
}

message NamespaceKey {
    required string namespaceId = 1;
}
message AlertKey {
    required int64 timestamp = 1;
    required string alertId = 2;
}

message AlertStatsKey {
    required string alertStatsId = 1;
}

message AuditKey {
    required int64 timestamp = 1;
    required string auditId = 2;
}

message FabricSequenceKey {
    required string fabricSequenceId = 1;
}

message BucketKey {
    required string bucketId    = 1;
}

message DeletedBucketKey {
    required string bucketId = 1;
    required string bucketHashId = 2;
}

message UserKey {
    optional string namespace = 1;
    required string userId = 2;
}

message ConfigKey { // key for storing config in RT
    required string configId = 1;
}

message RGKey {
    required string rgId = 1;
}

message RGUpdateKey {
    required string rgId  = 1;
}

message ResourceTableBootstrapTaskKey {
    required string type = 1;

    required string rgId = 2;

    required string dstZone = 4;
}

message NKEntryKey {
    required string namespace   = 1;
    required string bucket      = 2;
}

message NKEntryReplicationTaskKey {
    enum NKTaskType {
        ADD     = 1;
        REMOVE  = 2;
    }

    required TaskOrder taskOrder        = 1;
    required string namespace           = 2;
    required string bucket              = 3;
    required string dstZone             = 4;
    required NKTaskType type            = 5;
}

// misc keys stored to ZKConfigTable
message ZKConfigKey {
    enum ConfigKeyType {
        HEAD_TYPE_INFO = 0;
        OBJECT_BASE_URL = 1;
        INGESTION_TASK = 2;
        VARRAY = 3;
        LOCAL_USER_INFO = 4;
        AUTH_PROVIDER_INFO = 5;
        BORROWED_TOKEN_KEY = 6;
        AUTH_TOKEN_COUNT = 7;

    }

    required ConfigKeyType type = 1;

    required string keyId = 2;
}


message ZoneInfoKey {
    required string vdcId = 1;
}

// if SchemaKey is omitted, path is the 'key' name
// if SchemaKey is provided, full path is path + SchemaKey
// when SchemaKey provided, path is effectively parent path
// any combination is valid: {path}, {path, key}, {key}
message ViprNestKey {
    optional int64 epoch = 1;

    optional string path = 2;

    optional SchemaKey key = 3;

    optional bool isSecure = 4;

    // !!
    // please do not add a new field here without understanding what is going on in ViprNestIndexKey
    // !!
}

message ViprNestSystemKey {
    enum SystemKeyType {
        NONE = 0;
        GROUP = 1;
        NODE = 2;
    }

    required SystemKeyType type = 1;

    required string keyId = 2;
}

message GcProgressKey {

}

message CachedChunkKey {
	required string chunkId = 1;
}

// ViprNest task keys
message VNestTaskKey {
    enum VNestTaskType {
        NONE = 0;
        LEADER_ELECTION = 1;
        KEY_RECONFIG = 2;
    }

    required VNestTaskType type = 1;

    required TaskOrder taskOrder = 2;

    required bytes subKey = 3;
}

message VNestLeaderElectionKey {
    required int64 epoch = 1;

    required string leader = 2;

    optional string failedLeader = 3;
}


//paxos task keys
message PaxosTaskKey {
    enum PaxosTaskType {
        PAXOS_DELETE = 0;
        PAXOS_ELECT_NOTIFICATION = 1;
        PAXOS_COMMIT_NOTIFICATION = 2;
        PAXOS_PURGE = 3;
    }

    required PaxosTaskType type = 1;

    required TaskOrder taskOrder = 2;

    optional SchemaKey key =3;

    optional bytes subKey = 4;
}

message PaxosDeleteSubKey {
    optional string requestId = 1;
}

message PaxosPurgeSubKey {
    optional string requestId = 1;
}

message PaxosElectionNotificationSubKey {
    optional string requestId = 1;
    optional int64 epoch = 2;
}

message PaxosCommitNotificationSubKey {
    optional string requestId = 1;
}

message VNestReconfigKey {
    optional int64 epoch = 1 [default = 0];
}

message ChunkReferenceScanProgressKey {
    enum ChunkDataType {
        REPO = 0;
        JOURNAL = 1;
        BTREE = 2;
    }
    required string dtId = 1;
    required ChunkDataType chunkType = 2;
    optional int32 sequence = 3;
}

message BTreeCorruptionScanProgressKey {

    enum ProgressType {
        // ALL for dtQuery without ProgressType
        ALL = 0;
        ONGOING = 1;
        LAST = 2;

    }
    required string dtId = 1;
    required ProgressType progressType = 2;
}

message ChunkGcScanStatusKey {
    required string chunkId = 1;
    required string dtId = 2;
    required string zone = 3;
}

message ChunkGcScanStatusTaskKey {

    enum ChunkDataType {
        REPO = 0;
        JOURNAL = 1;
        BTREE = 2;
    }

    required string zone = 1;
    optional ChunkDataType type = 2;
    // this field is used for sorting by time
    // for each chunkId there are two ChunkGcScanStatusTaskKey in all
    // e.g.
    // keyForTimestamp: zone z1 type REPO time null chunkId chunk1
    // keyForTimestampValue: ChunkGcScanStatusTaskValue { time=$triggerTimestamp }
    // keyWithTimestamp: zone z1 type REPO time $triggerTimestamp chunkId chunk1
    // keyWithTimestampValue: ChunkGcScanStatusTaskValue { time=null }
    // keyForTimestamp is used to stored the $triggerTimestamp for keyWithTimestamp
    // keyWithTimestamp is used for sorting by time
    optional int64 time = 3;
    required string chunkId = 4;
}

message OBMeteringCollectorTaskKey {
    required string type = 1;
    required string cos = 2;
    required string dtId = 3;
    required int64 insertTimestamp = 4;
}

message RejoinTaskKey {
    required string type = 1;

    required string rgId = 2;

    // where the rejoin operation should be sent to
    required string remoteZone = 3;

    required string keypoolId = 4;

    required string keyName = 5;

    optional int64 timestamp = 6;

    optional int64 previousOwnerEndSequence = 7;

    //indicating the routing of LS key based on this rejoin task
    optional bool singleOwner = 8;

    optional string oid = 9;
}

message TempFailedZoneStatusTransitionTaskKey {
    required string rgId = 1;

    required string tempFailedZoneId = 2;
}

message RefTableRebuildTaskKey {
    required string failedZone = 1;
    required string localZone = 2;
}

message RefTableRebuildDoneMarkerKey {
    required string zoneToRebuild = 1;
    required string rebuildDoneZone = 2;
    optional bool isFailed = 3 [default = true];
    optional int32 version = 4 [default = 0];
    optional string rgId = 5;
}

message TokenKey {
    required string tokenId = 1;
}

message LoginKey {
    required string loginId = 1;
}

message AuthProviderKey {
    required string providerId = 1;
}

message DynamicConfigKey {
    enum KeyType {
        GENCOUNT = 1;
        VALUE = 2;
        UPDATE = 3;
    }

    required KeyType type = 1;
    optional int64 gencount = 2;
    optional string name = 3;
    optional int64 version = 4;
}

message DtCleanupKey {
}

message MTLeftoverNegRefTaskKey  {
    // done or running
    required string type = 1;
    required string cos = 2;
    required string dtId = 3;
    required int64 insertTimestamp = 4;
}

message StatsBackupKey {
    required string nodeId = 1;
}

// deprecated, not used anymore
message EcsVersionKey {
    required string version = 1;
}

message RepoChunkProgressKey {

}

message AuthTokenCountKey {
    required string userId = 1;
}

message RepoUsageKey {
    // Total used size
    required int64 totalUsedSize = 1;
    // Used size without spillover meta data
    required int64 objDataUsedSize = 2;
    required string chunkId = 3;
}

message RepoUsageChunkKey {
    required string chunkId = 1;
}

message RepoUsagePartialGCContextKey {
    required string chunkId = 1;
    required string dstChunkId = 2;
    required int32 partSeq = 3;
}

message PartialGCTaskKey {
    enum PartialGCTaskState {
        ALL = 0;
        CHUNK_COPY = 1;
        GEO_REPLICATION = 2;
        OB_UPDATE = 3;
        OB_UPDATE_VALIDATION = 4;
    }

    required int64 order = 1;

    required PartialGCTaskState state = 2;

    required string taskId = 3;
}

enum SecondaryIndexMetadataType {
    SYSTEM = 0;
    USER = 1;
    HEAD = 2;
}

enum SecondaryIndexValueType {
    INTEGER_TYPE = 0;
    DECIMAL_TYPE = 1;
    STRING_TYPE = 2;
	DATETIME_TYPE = 3;
}

message MIEntryKey {
    
    required string keypoolId = 1;

    required SecondaryIndexMetadataType metadataType = 2;

    required string metadataKey = 3;

    required SecondaryIndexValueType valueType = 4;

    optional int64 integerValue = 5;

    optional double decimalValue = 6;

    optional string stringValue = 7;

    // objectId is made optional for listing prefix.
    optional string objectId = 8;

    // versionId is made optional for listing prefix.
    optional string versionId = 9;
}

message MIRejoinTaskKey {

    required string tsoId = 1;

    required string rgId = 2;

    required string taskType = 3;

    optional MIEntryKey mIEntryKey = 4;

    optional string remoteZone = 5;

    optional bool blockingKey = 6;
}

// Hdfs DT related info in RT table
// keyId == principal-bucket-namespace-creationtimestamp, e.g. "hdfs@KDC.EMC.COM-kerbbucket-namespace"
message HdfsDelegationTokenKey {
    required string keyId = 1;
}

message HdfsSaltDataKey {
    required string keyId = 1;
}

message ListableTagKey {
    // bucket id
    required string keypoolId = 1;

    // having uid as a separate field helps in elegant prefix searches
    required string userId = 2;

    // tag name delimited by "/"
    required string tagName = 3;

    optional string objectId = 4;
}

message ListableTagUpgradeLSTaskKey {
    // key pool hash id
    required string keypoolHashId = 1;
}

message ListableTagUpgradeRTTaskKey {

}

message FileKeyValKey {
    required string keyId = 1;
}

message LockMgrKey {
    enum Type {
        GRANTED = 0;
        WAITING = 1;
        CONVERTING = 2;
        UNLOCKED = 3;
    }

    required Type type = 1;

    // Only for lock keys
    optional string lockSpace = 2;

    optional string objectId = 3;

    optional int64 lockSequence = 4;
}

message RepoReferenceCollectorKey {
    required string chunkId = 1;
}

message UserTagKey {
    optional string userId = 1;
    required string tagName = 2;
    optional string tagValue = 3;
    optional string namespace = 4;

}
