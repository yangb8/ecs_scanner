// Code generated by protoc-gen-go. DO NOT EDIT.
// source: SchemaKeyRecords.proto

package or

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// enumerate all type of SchemaKey.
// For every type, please add a related IndexKey class, which inherits
// SchemaKeyBase and implements the hasPrefix, compare and probably
// hash (for routing) functions.
// Also add the IndexKey creation function to TypeCoder.createIndexKey,
// which is for Btree to construct the corresponding IndexKey when loading
// the key from the persistent stored page.
//
// please minimize the number of types as much as possible.
type SchemaKeyType int32

const (
	SchemaKeyType_DEFAULT_KEY           SchemaKeyType = 0
	SchemaKeyType_DIRECTORYTABLE_RECORD SchemaKeyType = 1
	SchemaKeyType_DIRECTORYTABLE_OWNER  SchemaKeyType = 2
	SchemaKeyType_RM_TASK               SchemaKeyType = 3
	SchemaKeyType_DTBOOTSTRAP_TASK      SchemaKeyType = 4
	SchemaKeyType_CHUNK                 SchemaKeyType = 5
	SchemaKeyType_CM_TASK               SchemaKeyType = 6
	SchemaKeyType_CM_JOB                SchemaKeyType = 7
	SchemaKeyType_CM_PROGRESS           SchemaKeyType = 8
	SchemaKeyType_CHUNK_SEQUENCE        SchemaKeyType = 9
	SchemaKeyType_RG_RECONFIG_TASK      SchemaKeyType = 10
	SchemaKeyType_SSTABLE_KEY           SchemaKeyType = 11
	SchemaKeyType_SSTABLE_TASK_KEY      SchemaKeyType = 12
	SchemaKeyType_OBJECT_TABLE_KEY      SchemaKeyType = 13
	SchemaKeyType_DELETE_JOB_TABLE_KEY  SchemaKeyType = 14
	SchemaKeyType_MT_KEY                SchemaKeyType = 15
	SchemaKeyType_BTREE_REFERENCE       SchemaKeyType = 16
	SchemaKeyType_LIST_ENTRY            SchemaKeyType = 17
	SchemaKeyType_GC_REF_COLLECTION     SchemaKeyType = 18
	SchemaKeyType_REPO_REFERENCE        SchemaKeyType = 19
	// ==== RT DT KEYS ====
	SchemaKeyType_NAMESPACE_KEY                 SchemaKeyType = 20
	SchemaKeyType_BUCKET_KEY                    SchemaKeyType = 21
	SchemaKeyType_USER_KEY                      SchemaKeyType = 22
	SchemaKeyType_REP_GROUP_KEY                 SchemaKeyType = 23
	SchemaKeyType_REP_GROUP_UPD_KEY             SchemaKeyType = 24
	SchemaKeyType_RT_BOOTSTRAP_TASK             SchemaKeyType = 25
	SchemaKeyType_NK_ENTRY_KEY                  SchemaKeyType = 26
	SchemaKeyType_NK_REPL_TASK_KEY              SchemaKeyType = 27
	SchemaKeyType_CONFIG_KEY                    SchemaKeyType = 28
	SchemaKeyType_ZK_CONFIG_KEY                 SchemaKeyType = 29
	SchemaKeyType_ZONE_INFO_KEY                 SchemaKeyType = 30
	SchemaKeyType_CHUNK_GC_SCAN_STATUS          SchemaKeyType = 31
	SchemaKeyType_CHUNK_REFERENCE_SCAN_PROGRESS SchemaKeyType = 32
	SchemaKeyType_MT2AGG_RECORD                 SchemaKeyType = 33
	SchemaKeyType_MT2_RECORD                    SchemaKeyType = 34
	SchemaKeyType_OBMETERING_COLLECTOR_TASK     SchemaKeyType = 35
	SchemaKeyType_GC_PROGRESS                   SchemaKeyType = 36
	// vnest system configuration keys
	SchemaKeyType_VIPR_NEST_SYSTEM_KEY SchemaKeyType = 37
	// vnest tasks handled by dt scanners
	SchemaKeyType_VIPR_NEST_TASK SchemaKeyType = 38
	// wrapper around all keys put into vnest
	SchemaKeyType_VIPR_NEST_KEY                               SchemaKeyType = 39
	SchemaKeyType_REJOIN_TASK_KEY                             SchemaKeyType = 40
	SchemaKeyType_TEMP_FAILED_ZONE_STATUS_TRANSITION_TASK_KEY SchemaKeyType = 41
	SchemaKeyType_REFTABLE_REBUILD_TASK                       SchemaKeyType = 42
	SchemaKeyType_REFTABLE_REBUILD_DONE_MARKER                SchemaKeyType = 43
	SchemaKeyType_ALERT_KEY                                   SchemaKeyType = 44
	SchemaKeyType_AUDIT_KEY                                   SchemaKeyType = 45
	SchemaKeyType_RECONCILE_TASK                              SchemaKeyType = 46
	SchemaKeyType_TOKEN_KEY                                   SchemaKeyType = 47
	SchemaKeyType_LOGIN_KEY                                   SchemaKeyType = 48
	SchemaKeyType_CACHED_CHUNK_KEY                            SchemaKeyType = 49
	SchemaKeyType_AUTH_PROVIDER_KEY                           SchemaKeyType = 50
	// entry only used in level 2 DT to protect stale update due to stuck request
	SchemaKeyType_CHUNK_TAG      SchemaKeyType = 51
	SchemaKeyType_DT_CLEANUP_KEY SchemaKeyType = 52
	// task to scan leftover metering neg ref before upgrade
	SchemaKeyType_MT_LEFT_NEGREF_UPGRADE_SCAN_TASK SchemaKeyType = 53
	// key in OB table which records the ECS version and the upgrade time
	// used by journal parser to determine whether to add update sequence to repo reference key
	SchemaKeyType_ECS_VERSION_KEY SchemaKeyType = 54
	// paxos tasks
	SchemaKeyType_PAXOS_TASK         SchemaKeyType = 55
	SchemaKeyType_DYNAMIC_CONFIG_KEY SchemaKeyType = 56
	SchemaKeyType_DELETED_BUCKET_KEY SchemaKeyType = 57
	// OB table key
	// min-not-seal-sequence-number from 128 CT tables
	// use them to move forward gc progress even with no load
	SchemaKeyType_REPO_CHUNK_PROGRESS SchemaKeyType = 58
	// key indicating that this chunk is target for GC scan process
	// It is different from CHUNK_GC_SCAN_STATUS: a CHUNK_GC_SCAN_STATUS is inserted per chunk per DT,
	// while this key is inserted per chunk
	SchemaKeyType_CHUNK_GC_SCAN_STATUS_TASK SchemaKeyType = 59
	// partial GC
	SchemaKeyType_REPO_USAGE                   SchemaKeyType = 60
	SchemaKeyType_REPO_USAGE_CHUNK_INDEX       SchemaKeyType = 61
	SchemaKeyType_REPO_USAGE_PARTIALGC_CONTEXT SchemaKeyType = 62
	SchemaKeyType_PARTIAL_GC_TASK              SchemaKeyType = 63
	// wrapper around all keys put into MI table
	SchemaKeyType_MI_ENTRY SchemaKeyType = 64
	// === FILE SVC KEYS===
	SchemaKeyType_FILEKEYVAL_KEY SchemaKeyType = 65
	SchemaKeyType_LOCK_MGR_KEY   SchemaKeyType = 66
	// indicate RR collector status
	SchemaKeyType_REPO_REFERENCE_COLLECTOR_KEY SchemaKeyType = 67
	// listable tag key in OB table
	SchemaKeyType_LISTABLE_TAG_KEY SchemaKeyType = 68
	// listable tag upgrade task key in LS table
	SchemaKeyType_LISTABLE_TAG_UPGRADE_LS_TASK_KEY SchemaKeyType = 69
	// listable tag upgrade task key in RT table
	SchemaKeyType_LISTABLE_TAG_UPGRADE_RT_TASK_KEY           SchemaKeyType = 70
	SchemaKeyType_TRANSFORMATION_INFO                        SchemaKeyType = 101
	SchemaKeyType_TRANSFORMATION_EXECUTABLE_ENTRY_KEY        SchemaKeyType = 102
	SchemaKeyType_TRANSFORMATION_EXECUTABLE_ENTRY_RESULT_KEY SchemaKeyType = 103
	SchemaKeyType_TRANSFORMATION_ENUMERATION_ENTRY           SchemaKeyType = 104
	SchemaKeyType_TRANSFORMATION_CHUNK_ENTRY                 SchemaKeyType = 105
	SchemaKeyType_TRANSFORMATION_UNREAD_OBJECT_ENTRY         SchemaKeyType = 107
	SchemaKeyType_STATS_BACKUP_KEY                           SchemaKeyType = 108
	SchemaKeyType_TRANSFORMATION_MAPPING_ENTRY               SchemaKeyType = 109
	SchemaKeyType_REPO_CHUNK_GARBAGE_INFO                    SchemaKeyType = 110
	// Hdfs Delegation Token persistence info into RT table
	SchemaKeyType_HDFS_DELEGATION_TOKEN_ENTRY_KEY SchemaKeyType = 111
	// Hdfs Salt Data persistence info into RT table
	SchemaKeyType_HDFS_SALT_DATA_ENTRY_KEY       SchemaKeyType = 112
	SchemaKeyType_ALERT_STATS_KEY                SchemaKeyType = 113
	SchemaKeyType_TRANSFORMATION_OBJECT_LIST_KEY SchemaKeyType = 114
	SchemaKeyType_BTREE_CORRUPTION_SCAN_PROGRESS SchemaKeyType = 115
	SchemaKeyType_FABRIC_SEQUENCE_KEY            SchemaKeyType = 116
	SchemaKeyType_RT_TASK_MESSAGE_KEY            SchemaKeyType = 117
	SchemaKeyType_MI_REJOIN_ENTRY                SchemaKeyType = 120
	SchemaKeyType_USER_TAG_KEY                   SchemaKeyType = 121
)

var SchemaKeyType_name = map[int32]string{
	0:   "DEFAULT_KEY",
	1:   "DIRECTORYTABLE_RECORD",
	2:   "DIRECTORYTABLE_OWNER",
	3:   "RM_TASK",
	4:   "DTBOOTSTRAP_TASK",
	5:   "CHUNK",
	6:   "CM_TASK",
	7:   "CM_JOB",
	8:   "CM_PROGRESS",
	9:   "CHUNK_SEQUENCE",
	10:  "RG_RECONFIG_TASK",
	11:  "SSTABLE_KEY",
	12:  "SSTABLE_TASK_KEY",
	13:  "OBJECT_TABLE_KEY",
	14:  "DELETE_JOB_TABLE_KEY",
	15:  "MT_KEY",
	16:  "BTREE_REFERENCE",
	17:  "LIST_ENTRY",
	18:  "GC_REF_COLLECTION",
	19:  "REPO_REFERENCE",
	20:  "NAMESPACE_KEY",
	21:  "BUCKET_KEY",
	22:  "USER_KEY",
	23:  "REP_GROUP_KEY",
	24:  "REP_GROUP_UPD_KEY",
	25:  "RT_BOOTSTRAP_TASK",
	26:  "NK_ENTRY_KEY",
	27:  "NK_REPL_TASK_KEY",
	28:  "CONFIG_KEY",
	29:  "ZK_CONFIG_KEY",
	30:  "ZONE_INFO_KEY",
	31:  "CHUNK_GC_SCAN_STATUS",
	32:  "CHUNK_REFERENCE_SCAN_PROGRESS",
	33:  "MT2AGG_RECORD",
	34:  "MT2_RECORD",
	35:  "OBMETERING_COLLECTOR_TASK",
	36:  "GC_PROGRESS",
	37:  "VIPR_NEST_SYSTEM_KEY",
	38:  "VIPR_NEST_TASK",
	39:  "VIPR_NEST_KEY",
	40:  "REJOIN_TASK_KEY",
	41:  "TEMP_FAILED_ZONE_STATUS_TRANSITION_TASK_KEY",
	42:  "REFTABLE_REBUILD_TASK",
	43:  "REFTABLE_REBUILD_DONE_MARKER",
	44:  "ALERT_KEY",
	45:  "AUDIT_KEY",
	46:  "RECONCILE_TASK",
	47:  "TOKEN_KEY",
	48:  "LOGIN_KEY",
	49:  "CACHED_CHUNK_KEY",
	50:  "AUTH_PROVIDER_KEY",
	51:  "CHUNK_TAG",
	52:  "DT_CLEANUP_KEY",
	53:  "MT_LEFT_NEGREF_UPGRADE_SCAN_TASK",
	54:  "ECS_VERSION_KEY",
	55:  "PAXOS_TASK",
	56:  "DYNAMIC_CONFIG_KEY",
	57:  "DELETED_BUCKET_KEY",
	58:  "REPO_CHUNK_PROGRESS",
	59:  "CHUNK_GC_SCAN_STATUS_TASK",
	60:  "REPO_USAGE",
	61:  "REPO_USAGE_CHUNK_INDEX",
	62:  "REPO_USAGE_PARTIALGC_CONTEXT",
	63:  "PARTIAL_GC_TASK",
	64:  "MI_ENTRY",
	65:  "FILEKEYVAL_KEY",
	66:  "LOCK_MGR_KEY",
	67:  "REPO_REFERENCE_COLLECTOR_KEY",
	68:  "LISTABLE_TAG_KEY",
	69:  "LISTABLE_TAG_UPGRADE_LS_TASK_KEY",
	70:  "LISTABLE_TAG_UPGRADE_RT_TASK_KEY",
	101: "TRANSFORMATION_INFO",
	102: "TRANSFORMATION_EXECUTABLE_ENTRY_KEY",
	103: "TRANSFORMATION_EXECUTABLE_ENTRY_RESULT_KEY",
	104: "TRANSFORMATION_ENUMERATION_ENTRY",
	105: "TRANSFORMATION_CHUNK_ENTRY",
	107: "TRANSFORMATION_UNREAD_OBJECT_ENTRY",
	108: "STATS_BACKUP_KEY",
	109: "TRANSFORMATION_MAPPING_ENTRY",
	110: "REPO_CHUNK_GARBAGE_INFO",
	111: "HDFS_DELEGATION_TOKEN_ENTRY_KEY",
	112: "HDFS_SALT_DATA_ENTRY_KEY",
	113: "ALERT_STATS_KEY",
	114: "TRANSFORMATION_OBJECT_LIST_KEY",
	115: "BTREE_CORRUPTION_SCAN_PROGRESS",
	116: "FABRIC_SEQUENCE_KEY",
	117: "RT_TASK_MESSAGE_KEY",
	120: "MI_REJOIN_ENTRY",
	121: "USER_TAG_KEY",
}
var SchemaKeyType_value = map[string]int32{
	"DEFAULT_KEY":                                 0,
	"DIRECTORYTABLE_RECORD":                       1,
	"DIRECTORYTABLE_OWNER":                        2,
	"RM_TASK":                                     3,
	"DTBOOTSTRAP_TASK":                            4,
	"CHUNK":                                       5,
	"CM_TASK":                                     6,
	"CM_JOB":                                      7,
	"CM_PROGRESS":                                 8,
	"CHUNK_SEQUENCE":                              9,
	"RG_RECONFIG_TASK":                            10,
	"SSTABLE_KEY":                                 11,
	"SSTABLE_TASK_KEY":                            12,
	"OBJECT_TABLE_KEY":                            13,
	"DELETE_JOB_TABLE_KEY":                        14,
	"MT_KEY":                                      15,
	"BTREE_REFERENCE":                             16,
	"LIST_ENTRY":                                  17,
	"GC_REF_COLLECTION":                           18,
	"REPO_REFERENCE":                              19,
	"NAMESPACE_KEY":                               20,
	"BUCKET_KEY":                                  21,
	"USER_KEY":                                    22,
	"REP_GROUP_KEY":                               23,
	"REP_GROUP_UPD_KEY":                           24,
	"RT_BOOTSTRAP_TASK":                           25,
	"NK_ENTRY_KEY":                                26,
	"NK_REPL_TASK_KEY":                            27,
	"CONFIG_KEY":                                  28,
	"ZK_CONFIG_KEY":                               29,
	"ZONE_INFO_KEY":                               30,
	"CHUNK_GC_SCAN_STATUS":                        31,
	"CHUNK_REFERENCE_SCAN_PROGRESS":               32,
	"MT2AGG_RECORD":                               33,
	"MT2_RECORD":                                  34,
	"OBMETERING_COLLECTOR_TASK":                   35,
	"GC_PROGRESS":                                 36,
	"VIPR_NEST_SYSTEM_KEY":                        37,
	"VIPR_NEST_TASK":                              38,
	"VIPR_NEST_KEY":                               39,
	"REJOIN_TASK_KEY":                             40,
	"TEMP_FAILED_ZONE_STATUS_TRANSITION_TASK_KEY": 41,
	"REFTABLE_REBUILD_TASK":                       42,
	"REFTABLE_REBUILD_DONE_MARKER":                43,
	"ALERT_KEY":                                   44,
	"AUDIT_KEY":                                   45,
	"RECONCILE_TASK":                              46,
	"TOKEN_KEY":                                   47,
	"LOGIN_KEY":                                   48,
	"CACHED_CHUNK_KEY":                            49,
	"AUTH_PROVIDER_KEY":                           50,
	"CHUNK_TAG":                                   51,
	"DT_CLEANUP_KEY":                              52,
	"MT_LEFT_NEGREF_UPGRADE_SCAN_TASK":            53,
	"ECS_VERSION_KEY":                             54,
	"PAXOS_TASK":                                  55,
	"DYNAMIC_CONFIG_KEY":                          56,
	"DELETED_BUCKET_KEY":                          57,
	"REPO_CHUNK_PROGRESS":                         58,
	"CHUNK_GC_SCAN_STATUS_TASK":                   59,
	"REPO_USAGE":                                  60,
	"REPO_USAGE_CHUNK_INDEX":                      61,
	"REPO_USAGE_PARTIALGC_CONTEXT":                62,
	"PARTIAL_GC_TASK":                             63,
	"MI_ENTRY":                                    64,
	"FILEKEYVAL_KEY":                              65,
	"LOCK_MGR_KEY":                                66,
	"REPO_REFERENCE_COLLECTOR_KEY":                67,
	"LISTABLE_TAG_KEY":                            68,
	"LISTABLE_TAG_UPGRADE_LS_TASK_KEY":            69,
	"LISTABLE_TAG_UPGRADE_RT_TASK_KEY":            70,
	"TRANSFORMATION_INFO":                         101,
	"TRANSFORMATION_EXECUTABLE_ENTRY_KEY":         102,
	"TRANSFORMATION_EXECUTABLE_ENTRY_RESULT_KEY":  103,
	"TRANSFORMATION_ENUMERATION_ENTRY":            104,
	"TRANSFORMATION_CHUNK_ENTRY":                  105,
	"TRANSFORMATION_UNREAD_OBJECT_ENTRY":          107,
	"STATS_BACKUP_KEY":                            108,
	"TRANSFORMATION_MAPPING_ENTRY":                109,
	"REPO_CHUNK_GARBAGE_INFO":                     110,
	"HDFS_DELEGATION_TOKEN_ENTRY_KEY":             111,
	"HDFS_SALT_DATA_ENTRY_KEY":                    112,
	"ALERT_STATS_KEY":                             113,
	"TRANSFORMATION_OBJECT_LIST_KEY":              114,
	"BTREE_CORRUPTION_SCAN_PROGRESS":              115,
	"FABRIC_SEQUENCE_KEY":                         116,
	"RT_TASK_MESSAGE_KEY":                         117,
	"MI_REJOIN_ENTRY":                             120,
	"USER_TAG_KEY":                                121,
}

func (x SchemaKeyType) Enum() *SchemaKeyType {
	p := new(SchemaKeyType)
	*p = x
	return p
}
func (x SchemaKeyType) String() string {
	return proto.EnumName(SchemaKeyType_name, int32(x))
}
func (x *SchemaKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SchemaKeyType_value, data, "SchemaKeyType")
	if err != nil {
		return err
	}
	*x = SchemaKeyType(value)
	return nil
}
func (SchemaKeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type GeoDataSendPurpose int32

const (
	GeoDataSendPurpose_NONE      GeoDataSendPurpose = 0
	GeoDataSendPurpose_FAILOVER  GeoDataSendPurpose = 1
	GeoDataSendPurpose_BOOTSTRAP GeoDataSendPurpose = 2
	// is xor decode triggered for geo delete
	GeoDataSendPurpose_GEO_DELETE GeoDataSendPurpose = 3
	// is xor decode triggered by read failure from primary zone
	GeoDataSendPurpose_READ GeoDataSendPurpose = 4
	// is xor to decode and change status to COPY.
	GeoDataSendPurpose_COPY             GeoDataSendPurpose = 5
	GeoDataSendPurpose_PROMOTE_TO_LOCAL GeoDataSendPurpose = 6
)

var GeoDataSendPurpose_name = map[int32]string{
	0: "NONE",
	1: "FAILOVER",
	2: "BOOTSTRAP",
	3: "GEO_DELETE",
	4: "READ",
	5: "COPY",
	6: "PROMOTE_TO_LOCAL",
}
var GeoDataSendPurpose_value = map[string]int32{
	"NONE":             0,
	"FAILOVER":         1,
	"BOOTSTRAP":        2,
	"GEO_DELETE":       3,
	"READ":             4,
	"COPY":             5,
	"PROMOTE_TO_LOCAL": 6,
}

func (x GeoDataSendPurpose) Enum() *GeoDataSendPurpose {
	p := new(GeoDataSendPurpose)
	*p = x
	return p
}
func (x GeoDataSendPurpose) String() string {
	return proto.EnumName(GeoDataSendPurpose_name, int32(x))
}
func (x *GeoDataSendPurpose) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GeoDataSendPurpose_value, data, "GeoDataSendPurpose")
	if err != nil {
		return err
	}
	*x = GeoDataSendPurpose(value)
	return nil
}
func (GeoDataSendPurpose) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type SecondaryIndexMetadataType int32

const (
	SecondaryIndexMetadataType_SYSTEM SecondaryIndexMetadataType = 0
	SecondaryIndexMetadataType_USER   SecondaryIndexMetadataType = 1
	SecondaryIndexMetadataType_HEAD   SecondaryIndexMetadataType = 2
)

var SecondaryIndexMetadataType_name = map[int32]string{
	0: "SYSTEM",
	1: "USER",
	2: "HEAD",
}
var SecondaryIndexMetadataType_value = map[string]int32{
	"SYSTEM": 0,
	"USER":   1,
	"HEAD":   2,
}

func (x SecondaryIndexMetadataType) Enum() *SecondaryIndexMetadataType {
	p := new(SecondaryIndexMetadataType)
	*p = x
	return p
}
func (x SecondaryIndexMetadataType) String() string {
	return proto.EnumName(SecondaryIndexMetadataType_name, int32(x))
}
func (x *SecondaryIndexMetadataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SecondaryIndexMetadataType_value, data, "SecondaryIndexMetadataType")
	if err != nil {
		return err
	}
	*x = SecondaryIndexMetadataType(value)
	return nil
}
func (SecondaryIndexMetadataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

type SecondaryIndexValueType int32

const (
	SecondaryIndexValueType_INTEGER_TYPE  SecondaryIndexValueType = 0
	SecondaryIndexValueType_DECIMAL_TYPE  SecondaryIndexValueType = 1
	SecondaryIndexValueType_STRING_TYPE   SecondaryIndexValueType = 2
	SecondaryIndexValueType_DATETIME_TYPE SecondaryIndexValueType = 3
)

var SecondaryIndexValueType_name = map[int32]string{
	0: "INTEGER_TYPE",
	1: "DECIMAL_TYPE",
	2: "STRING_TYPE",
	3: "DATETIME_TYPE",
}
var SecondaryIndexValueType_value = map[string]int32{
	"INTEGER_TYPE":  0,
	"DECIMAL_TYPE":  1,
	"STRING_TYPE":   2,
	"DATETIME_TYPE": 3,
}

func (x SecondaryIndexValueType) Enum() *SecondaryIndexValueType {
	p := new(SecondaryIndexValueType)
	*p = x
	return p
}
func (x SecondaryIndexValueType) String() string {
	return proto.EnumName(SecondaryIndexValueType_name, int32(x))
}
func (x *SecondaryIndexValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SecondaryIndexValueType_value, data, "SecondaryIndexValueType")
	if err != nil {
		return err
	}
	*x = SecondaryIndexValueType(value)
	return nil
}
func (SecondaryIndexValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

type DTRecordKey_DTRecordKeyType int32

const (
	DTRecordKey_JOURNAL_REGION              DTRecordKey_DTRecordKeyType = 0
	DTRecordKey_JOURNAL_PARSER_MARKER       DTRecordKey_DTRecordKeyType = 1
	DTRecordKey_JOURNAL_REGION_GEO_MARKER   DTRecordKey_DTRecordKeyType = 2
	DTRecordKey_JOURNAL_REGION_GC_MARKER    DTRecordKey_DTRecordKeyType = 3
	DTRecordKey_BPLUSTREE_INFO              DTRecordKey_DTRecordKeyType = 4
	DTRecordKey_BPLUSTREE_DUMP_MARKER       DTRecordKey_DTRecordKeyType = 5
	DTRecordKey_BPLUSTREE_PARSER_MARKER     DTRecordKey_DTRecordKeyType = 6
	DTRecordKey_OBJECT_INDEX_FORMAT_VERSION DTRecordKey_DTRecordKeyType = 7
	// geo related keys
	DTRecordKey_GEOREPLAYER_REPLICATION_CHECKER_MARKER         DTRecordKey_DTRecordKeyType = 8
	DTRecordKey_GEOREPLAYER_CONSISTENCY_CHECKER_MARKER         DTRecordKey_DTRecordKeyType = 9
	DTRecordKey_BPLUSTREE_REPLICATION_BOOTSTRAP_JOURNAL_MARKER DTRecordKey_DTRecordKeyType = 10
	DTRecordKey_BPLUSTREE_BOOTSTRAP_MARKER                     DTRecordKey_DTRecordKeyType = 11
	DTRecordKey_BPLUSTREE_RECOVERY_TRACKER                     DTRecordKey_DTRecordKeyType = 12
	DTRecordKey_OWNER_EPOCH                                    DTRecordKey_DTRecordKeyType = 13
	DTRecordKey_BPLUSTREE_OBMETERING_SCAN_MARKER               DTRecordKey_DTRecordKeyType = 14
	// metering journal parser marker
	DTRecordKey_METERING_JOURNAL_PARSER_MARKER DTRecordKey_DTRecordKeyType = 15
)

var DTRecordKey_DTRecordKeyType_name = map[int32]string{
	0:  "JOURNAL_REGION",
	1:  "JOURNAL_PARSER_MARKER",
	2:  "JOURNAL_REGION_GEO_MARKER",
	3:  "JOURNAL_REGION_GC_MARKER",
	4:  "BPLUSTREE_INFO",
	5:  "BPLUSTREE_DUMP_MARKER",
	6:  "BPLUSTREE_PARSER_MARKER",
	7:  "OBJECT_INDEX_FORMAT_VERSION",
	8:  "GEOREPLAYER_REPLICATION_CHECKER_MARKER",
	9:  "GEOREPLAYER_CONSISTENCY_CHECKER_MARKER",
	10: "BPLUSTREE_REPLICATION_BOOTSTRAP_JOURNAL_MARKER",
	11: "BPLUSTREE_BOOTSTRAP_MARKER",
	12: "BPLUSTREE_RECOVERY_TRACKER",
	13: "OWNER_EPOCH",
	14: "BPLUSTREE_OBMETERING_SCAN_MARKER",
	15: "METERING_JOURNAL_PARSER_MARKER",
}
var DTRecordKey_DTRecordKeyType_value = map[string]int32{
	"JOURNAL_REGION":                                 0,
	"JOURNAL_PARSER_MARKER":                          1,
	"JOURNAL_REGION_GEO_MARKER":                      2,
	"JOURNAL_REGION_GC_MARKER":                       3,
	"BPLUSTREE_INFO":                                 4,
	"BPLUSTREE_DUMP_MARKER":                          5,
	"BPLUSTREE_PARSER_MARKER":                        6,
	"OBJECT_INDEX_FORMAT_VERSION":                    7,
	"GEOREPLAYER_REPLICATION_CHECKER_MARKER":         8,
	"GEOREPLAYER_CONSISTENCY_CHECKER_MARKER":         9,
	"BPLUSTREE_REPLICATION_BOOTSTRAP_JOURNAL_MARKER": 10,
	"BPLUSTREE_BOOTSTRAP_MARKER":                     11,
	"BPLUSTREE_RECOVERY_TRACKER":                     12,
	"OWNER_EPOCH":                                    13,
	"BPLUSTREE_OBMETERING_SCAN_MARKER":               14,
	"METERING_JOURNAL_PARSER_MARKER":                 15,
}

func (x DTRecordKey_DTRecordKeyType) Enum() *DTRecordKey_DTRecordKeyType {
	p := new(DTRecordKey_DTRecordKeyType)
	*p = x
	return p
}
func (x DTRecordKey_DTRecordKeyType) String() string {
	return proto.EnumName(DTRecordKey_DTRecordKeyType_name, int32(x))
}
func (x *DTRecordKey_DTRecordKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DTRecordKey_DTRecordKeyType_value, data, "DTRecordKey_DTRecordKeyType")
	if err != nil {
		return err
	}
	*x = DTRecordKey_DTRecordKeyType(value)
	return nil
}
func (DTRecordKey_DTRecordKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{2, 0}
}

type MTTableRecordKey_Type int32

const (
	MTTableRecordKey_STORAGE_STAT     MTTableRecordKey_Type = 0
	MTTableRecordKey_AGG_STORAGE_STAT MTTableRecordKey_Type = 2
	MTTableRecordKey_BW_STAT          MTTableRecordKey_Type = 3
	MTTableRecordKey_AGG_BW_STAT      MTTableRecordKey_Type = 4
)

var MTTableRecordKey_Type_name = map[int32]string{
	0: "STORAGE_STAT",
	2: "AGG_STORAGE_STAT",
	3: "BW_STAT",
	4: "AGG_BW_STAT",
}
var MTTableRecordKey_Type_value = map[string]int32{
	"STORAGE_STAT":     0,
	"AGG_STORAGE_STAT": 2,
	"BW_STAT":          3,
	"AGG_BW_STAT":      4,
}

func (x MTTableRecordKey_Type) Enum() *MTTableRecordKey_Type {
	p := new(MTTableRecordKey_Type)
	*p = x
	return p
}
func (x MTTableRecordKey_Type) String() string {
	return proto.EnumName(MTTableRecordKey_Type_name, int32(x))
}
func (x *MTTableRecordKey_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MTTableRecordKey_Type_value, data, "MTTableRecordKey_Type")
	if err != nil {
		return err
	}
	*x = MTTableRecordKey_Type(value)
	return nil
}
func (MTTableRecordKey_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{9, 0} }

type MTStorageStatKey_State int32

const (
	MTStorageStatKey_InProgress MTStorageStatKey_State = 0
	MTStorageStatKey_Completed  MTStorageStatKey_State = 1
)

var MTStorageStatKey_State_name = map[int32]string{
	0: "InProgress",
	1: "Completed",
}
var MTStorageStatKey_State_value = map[string]int32{
	"InProgress": 0,
	"Completed":  1,
}

func (x MTStorageStatKey_State) Enum() *MTStorageStatKey_State {
	p := new(MTStorageStatKey_State)
	*p = x
	return p
}
func (x MTStorageStatKey_State) String() string {
	return proto.EnumName(MTStorageStatKey_State_name, int32(x))
}
func (x *MTStorageStatKey_State) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MTStorageStatKey_State_value, data, "MTStorageStatKey_State")
	if err != nil {
		return err
	}
	*x = MTStorageStatKey_State(value)
	return nil
}
func (MTStorageStatKey_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{10, 0} }

type MTRecordKey_MTRecordKeyType int32

const (
	MTRecordKey_BUCKET_STAT                            MTRecordKey_MTRecordKeyType = 0
	MTRecordKey_BUCKET_INTERMEDIATE_STAT               MTRecordKey_MTRecordKeyType = 1
	MTRecordKey_BANDWIDTH_STAT                         MTRecordKey_MTRecordKeyType = 2
	MTRecordKey_OBJECT_DELTA                           MTRecordKey_MTRecordKeyType = 3
	MTRecordKey_BUCKET_STAT_TRASH                      MTRecordKey_MTRecordKeyType = 4
	MTRecordKey_BANDWIDTH_STAT_TRASH                   MTRecordKey_MTRecordKeyType = 5
	MTRecordKey_AGG_OBJECT_DELTA                       MTRecordKey_MTRecordKeyType = 6
	MTRecordKey_NAMESPACE_INTERMEDIATE_STAT            MTRecordKey_MTRecordKeyType = 7
	MTRecordKey_NAMESPACE_INTERMEDIATE_AGGREGATED_STAT MTRecordKey_MTRecordKeyType = 8
	MTRecordKey_NAMESPACE_AGGREGATION_THRESHOLD        MTRecordKey_MTRecordKeyType = 9
	MTRecordKey_POSITIVE_REF_MARKER                    MTRecordKey_MTRecordKeyType = 10
	MTRecordKey_METERING_PROGRESS_MARKER               MTRecordKey_MTRecordKeyType = 11
	MTRecordKey_BLOB_POS_START_MAJOR                   MTRecordKey_MTRecordKeyType = 12
)

var MTRecordKey_MTRecordKeyType_name = map[int32]string{
	0:  "BUCKET_STAT",
	1:  "BUCKET_INTERMEDIATE_STAT",
	2:  "BANDWIDTH_STAT",
	3:  "OBJECT_DELTA",
	4:  "BUCKET_STAT_TRASH",
	5:  "BANDWIDTH_STAT_TRASH",
	6:  "AGG_OBJECT_DELTA",
	7:  "NAMESPACE_INTERMEDIATE_STAT",
	8:  "NAMESPACE_INTERMEDIATE_AGGREGATED_STAT",
	9:  "NAMESPACE_AGGREGATION_THRESHOLD",
	10: "POSITIVE_REF_MARKER",
	11: "METERING_PROGRESS_MARKER",
	12: "BLOB_POS_START_MAJOR",
}
var MTRecordKey_MTRecordKeyType_value = map[string]int32{
	"BUCKET_STAT":                            0,
	"BUCKET_INTERMEDIATE_STAT":               1,
	"BANDWIDTH_STAT":                         2,
	"OBJECT_DELTA":                           3,
	"BUCKET_STAT_TRASH":                      4,
	"BANDWIDTH_STAT_TRASH":                   5,
	"AGG_OBJECT_DELTA":                       6,
	"NAMESPACE_INTERMEDIATE_STAT":            7,
	"NAMESPACE_INTERMEDIATE_AGGREGATED_STAT": 8,
	"NAMESPACE_AGGREGATION_THRESHOLD":        9,
	"POSITIVE_REF_MARKER":                    10,
	"METERING_PROGRESS_MARKER":               11,
	"BLOB_POS_START_MAJOR":                   12,
}

func (x MTRecordKey_MTRecordKeyType) Enum() *MTRecordKey_MTRecordKeyType {
	p := new(MTRecordKey_MTRecordKeyType)
	*p = x
	return p
}
func (x MTRecordKey_MTRecordKeyType) String() string {
	return proto.EnumName(MTRecordKey_MTRecordKeyType_name, int32(x))
}
func (x *MTRecordKey_MTRecordKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MTRecordKey_MTRecordKeyType_value, data, "MTRecordKey_MTRecordKeyType")
	if err != nil {
		return err
	}
	*x = MTRecordKey_MTRecordKeyType(value)
	return nil
}
func (MTRecordKey_MTRecordKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{14, 0}
}

type MTAggregateRecordKey_MTAggregateRecordKeyType int32

const (
	MTAggregateRecordKey_BUCKET_INTERMEDIATE_STAT          MTAggregateRecordKey_MTAggregateRecordKeyType = 0
	MTAggregateRecordKey_BUCKET_INTERMEDIATE_STAT_TRASH    MTAggregateRecordKey_MTAggregateRecordKeyType = 1
	MTAggregateRecordKey_FIX_AGGREGATE_STAT                MTAggregateRecordKey_MTAggregateRecordKeyType = 2
	MTAggregateRecordKey_BUCKET_FINAL_STAT                 MTAggregateRecordKey_MTAggregateRecordKeyType = 3
	MTAggregateRecordKey_NAMESPACE_STAT                    MTAggregateRecordKey_MTAggregateRecordKeyType = 4
	MTAggregateRecordKey_NAMESPACE_INTERMEDIATE_STAT       MTAggregateRecordKey_MTAggregateRecordKeyType = 5
	MTAggregateRecordKey_NAMESPACE_INTERMEDIATE_STAT_TRASH MTAggregateRecordKey_MTAggregateRecordKeyType = 6
	MTAggregateRecordKey_FIX_NAMESPACE_AGGREGATE_STAT      MTAggregateRecordKey_MTAggregateRecordKeyType = 7
	MTAggregateRecordKey_NODE_STAT_FINAL                   MTAggregateRecordKey_MTAggregateRecordKeyType = 9
	MTAggregateRecordKey_SHIP_NODE_STAT_TASK               MTAggregateRecordKey_MTAggregateRecordKeyType = 10
	MTAggregateRecordKey_ZONE_STAT                         MTAggregateRecordKey_MTAggregateRecordKeyType = 11
	MTAggregateRecordKey_ZONE_STAT_TRASH                   MTAggregateRecordKey_MTAggregateRecordKeyType = 12
	MTAggregateRecordKey_ZONE_STAT_FINAL                   MTAggregateRecordKey_MTAggregateRecordKeyType = 13
	MTAggregateRecordKey_CHECK_FOR_AGGREGATION_ISSUES      MTAggregateRecordKey_MTAggregateRecordKeyType = 14
	MTAggregateRecordKey_GEO_METRICS_NODE_STAT             MTAggregateRecordKey_MTAggregateRecordKeyType = 15
	MTAggregateRecordKey_GEO_METRICS_NODE_STAT_TRASH       MTAggregateRecordKey_MTAggregateRecordKeyType = 16
	MTAggregateRecordKey_GEO_METRICS_ZONE_STAT_FINAL       MTAggregateRecordKey_MTAggregateRecordKeyType = 17
	MTAggregateRecordKey_GEO_METRICS_RG_STAT_FINAL         MTAggregateRecordKey_MTAggregateRecordKeyType = 18
)

var MTAggregateRecordKey_MTAggregateRecordKeyType_name = map[int32]string{
	0:  "BUCKET_INTERMEDIATE_STAT",
	1:  "BUCKET_INTERMEDIATE_STAT_TRASH",
	2:  "FIX_AGGREGATE_STAT",
	3:  "BUCKET_FINAL_STAT",
	4:  "NAMESPACE_STAT",
	5:  "NAMESPACE_INTERMEDIATE_STAT",
	6:  "NAMESPACE_INTERMEDIATE_STAT_TRASH",
	7:  "FIX_NAMESPACE_AGGREGATE_STAT",
	9:  "NODE_STAT_FINAL",
	10: "SHIP_NODE_STAT_TASK",
	11: "ZONE_STAT",
	12: "ZONE_STAT_TRASH",
	13: "ZONE_STAT_FINAL",
	14: "CHECK_FOR_AGGREGATION_ISSUES",
	15: "GEO_METRICS_NODE_STAT",
	16: "GEO_METRICS_NODE_STAT_TRASH",
	17: "GEO_METRICS_ZONE_STAT_FINAL",
	18: "GEO_METRICS_RG_STAT_FINAL",
}
var MTAggregateRecordKey_MTAggregateRecordKeyType_value = map[string]int32{
	"BUCKET_INTERMEDIATE_STAT":          0,
	"BUCKET_INTERMEDIATE_STAT_TRASH":    1,
	"FIX_AGGREGATE_STAT":                2,
	"BUCKET_FINAL_STAT":                 3,
	"NAMESPACE_STAT":                    4,
	"NAMESPACE_INTERMEDIATE_STAT":       5,
	"NAMESPACE_INTERMEDIATE_STAT_TRASH": 6,
	"FIX_NAMESPACE_AGGREGATE_STAT":      7,
	"NODE_STAT_FINAL":                   9,
	"SHIP_NODE_STAT_TASK":               10,
	"ZONE_STAT":                         11,
	"ZONE_STAT_TRASH":                   12,
	"ZONE_STAT_FINAL":                   13,
	"CHECK_FOR_AGGREGATION_ISSUES":      14,
	"GEO_METRICS_NODE_STAT":             15,
	"GEO_METRICS_NODE_STAT_TRASH":       16,
	"GEO_METRICS_ZONE_STAT_FINAL":       17,
	"GEO_METRICS_RG_STAT_FINAL":         18,
}

func (x MTAggregateRecordKey_MTAggregateRecordKeyType) Enum() *MTAggregateRecordKey_MTAggregateRecordKeyType {
	p := new(MTAggregateRecordKey_MTAggregateRecordKeyType)
	*p = x
	return p
}
func (x MTAggregateRecordKey_MTAggregateRecordKeyType) String() string {
	return proto.EnumName(MTAggregateRecordKey_MTAggregateRecordKeyType_name, int32(x))
}
func (x *MTAggregateRecordKey_MTAggregateRecordKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MTAggregateRecordKey_MTAggregateRecordKeyType_value, data, "MTAggregateRecordKey_MTAggregateRecordKeyType")
	if err != nil {
		return err
	}
	*x = MTAggregateRecordKey_MTAggregateRecordKeyType(value)
	return nil
}
func (MTAggregateRecordKey_MTAggregateRecordKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{15, 0}
}

type RMTaskKey_RMTaskType int32

const (
	RMTaskKey_JOURNAL_ENTRY_GEO_SEND RMTaskKey_RMTaskType = 0
	RMTaskKey_RECOVERY_POINT_SEND    RMTaskKey_RMTaskType = 1
)

var RMTaskKey_RMTaskType_name = map[int32]string{
	0: "JOURNAL_ENTRY_GEO_SEND",
	1: "RECOVERY_POINT_SEND",
}
var RMTaskKey_RMTaskType_value = map[string]int32{
	"JOURNAL_ENTRY_GEO_SEND": 0,
	"RECOVERY_POINT_SEND":    1,
}

func (x RMTaskKey_RMTaskType) Enum() *RMTaskKey_RMTaskType {
	p := new(RMTaskKey_RMTaskType)
	*p = x
	return p
}
func (x RMTaskKey_RMTaskType) String() string {
	return proto.EnumName(RMTaskKey_RMTaskType_name, int32(x))
}
func (x *RMTaskKey_RMTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RMTaskKey_RMTaskType_value, data, "RMTaskKey_RMTaskType")
	if err != nil {
		return err
	}
	*x = RMTaskKey_RMTaskType(value)
	return nil
}
func (RMTaskKey_RMTaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{38, 0} }

type ObjectTableKey_ObjectTableKeyType int32

const (
	ObjectTableKey_COMPACTION_MARKER      ObjectTableKey_ObjectTableKeyType = 0
	ObjectTableKey_INDEX                  ObjectTableKey_ObjectTableKeyType = 1
	ObjectTableKey_UPDATE                 ObjectTableKey_ObjectTableKeyType = 2
	ObjectTableKey_MPU_PART               ObjectTableKey_ObjectTableKeyType = 3
	ObjectTableKey_MPU_LIST               ObjectTableKey_ObjectTableKeyType = 4
	ObjectTableKey_MPU_MARKER             ObjectTableKey_ObjectTableKeyType = 5
	ObjectTableKey_CROSS_REFERENCE        ObjectTableKey_ObjectTableKeyType = 6
	ObjectTableKey_LOCK_COMPACTION_MARKER ObjectTableKey_ObjectTableKeyType = 7
)

var ObjectTableKey_ObjectTableKeyType_name = map[int32]string{
	0: "COMPACTION_MARKER",
	1: "INDEX",
	2: "UPDATE",
	3: "MPU_PART",
	4: "MPU_LIST",
	5: "MPU_MARKER",
	6: "CROSS_REFERENCE",
	7: "LOCK_COMPACTION_MARKER",
}
var ObjectTableKey_ObjectTableKeyType_value = map[string]int32{
	"COMPACTION_MARKER":      0,
	"INDEX":                  1,
	"UPDATE":                 2,
	"MPU_PART":               3,
	"MPU_LIST":               4,
	"MPU_MARKER":             5,
	"CROSS_REFERENCE":        6,
	"LOCK_COMPACTION_MARKER": 7,
}

func (x ObjectTableKey_ObjectTableKeyType) Enum() *ObjectTableKey_ObjectTableKeyType {
	p := new(ObjectTableKey_ObjectTableKeyType)
	*p = x
	return p
}
func (x ObjectTableKey_ObjectTableKeyType) String() string {
	return proto.EnumName(ObjectTableKey_ObjectTableKeyType_name, int32(x))
}
func (x *ObjectTableKey_ObjectTableKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ObjectTableKey_ObjectTableKeyType_value, data, "ObjectTableKey_ObjectTableKeyType")
	if err != nil {
		return err
	}
	*x = ObjectTableKey_ObjectTableKeyType(value)
	return nil
}
func (ObjectTableKey_ObjectTableKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{39, 0}
}

type ObjectTableKey_ObjectIndexKeySubType int32

const (
	ObjectTableKey_HEAD_METADATA   ObjectTableKey_ObjectIndexKeySubType = 0
	ObjectTableKey_SYSTEM_METADATA ObjectTableKey_ObjectIndexKeySubType = 1
	ObjectTableKey_USER_METADATA   ObjectTableKey_ObjectIndexKeySubType = 2
	ObjectTableKey_RANGE           ObjectTableKey_ObjectIndexKeySubType = 3
	ObjectTableKey_DELETION_MARKER ObjectTableKey_ObjectIndexKeySubType = 4
	ObjectTableKey_REMOVE_MARKER   ObjectTableKey_ObjectIndexKeySubType = 5
	ObjectTableKey_LOCK_RANGE      ObjectTableKey_ObjectIndexKeySubType = 6
)

var ObjectTableKey_ObjectIndexKeySubType_name = map[int32]string{
	0: "HEAD_METADATA",
	1: "SYSTEM_METADATA",
	2: "USER_METADATA",
	3: "RANGE",
	4: "DELETION_MARKER",
	5: "REMOVE_MARKER",
	6: "LOCK_RANGE",
}
var ObjectTableKey_ObjectIndexKeySubType_value = map[string]int32{
	"HEAD_METADATA":   0,
	"SYSTEM_METADATA": 1,
	"USER_METADATA":   2,
	"RANGE":           3,
	"DELETION_MARKER": 4,
	"REMOVE_MARKER":   5,
	"LOCK_RANGE":      6,
}

func (x ObjectTableKey_ObjectIndexKeySubType) Enum() *ObjectTableKey_ObjectIndexKeySubType {
	p := new(ObjectTableKey_ObjectIndexKeySubType)
	*p = x
	return p
}
func (x ObjectTableKey_ObjectIndexKeySubType) String() string {
	return proto.EnumName(ObjectTableKey_ObjectIndexKeySubType_name, int32(x))
}
func (x *ObjectTableKey_ObjectIndexKeySubType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ObjectTableKey_ObjectIndexKeySubType_value, data, "ObjectTableKey_ObjectIndexKeySubType")
	if err != nil {
		return err
	}
	*x = ObjectTableKey_ObjectIndexKeySubType(value)
	return nil
}
func (ObjectTableKey_ObjectIndexKeySubType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{39, 1}
}

type SSTableRecordKey_Type int32

const (
	SSTableRecordKey_FREE_BLOCK SSTableRecordKey_Type = 0
	SSTableRecordKey_BUSY_BLOCK SSTableRecordKey_Type = 1
	SSTableRecordKey_DEVICE     SSTableRecordKey_Type = 2
	SSTableRecordKey_PARTITION  SSTableRecordKey_Type = 3
	SSTableRecordKey_BLOCK_BIN  SSTableRecordKey_Type = 4
)

var SSTableRecordKey_Type_name = map[int32]string{
	0: "FREE_BLOCK",
	1: "BUSY_BLOCK",
	2: "DEVICE",
	3: "PARTITION",
	4: "BLOCK_BIN",
}
var SSTableRecordKey_Type_value = map[string]int32{
	"FREE_BLOCK": 0,
	"BUSY_BLOCK": 1,
	"DEVICE":     2,
	"PARTITION":  3,
	"BLOCK_BIN":  4,
}

func (x SSTableRecordKey_Type) Enum() *SSTableRecordKey_Type {
	p := new(SSTableRecordKey_Type)
	*p = x
	return p
}
func (x SSTableRecordKey_Type) String() string {
	return proto.EnumName(SSTableRecordKey_Type_name, int32(x))
}
func (x *SSTableRecordKey_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SSTableRecordKey_Type_value, data, "SSTableRecordKey_Type")
	if err != nil {
		return err
	}
	*x = SSTableRecordKey_Type(value)
	return nil
}
func (SSTableRecordKey_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{42, 0} }

type SSTableBlockLevelTaskKey_Type int32

const (
	SSTableBlockLevelTaskKey_BLOCK_ALLOCATE_TASK   SSTableBlockLevelTaskKey_Type = 0
	SSTableBlockLevelTaskKey_BLOCK_FREE_TASK       SSTableBlockLevelTaskKey_Type = 1
	SSTableBlockLevelTaskKey_BLOCK_RELINQUISH_TASK SSTableBlockLevelTaskKey_Type = 2
	SSTableBlockLevelTaskKey_BLOCK_RECEIVE_TASK    SSTableBlockLevelTaskKey_Type = 3
)

var SSTableBlockLevelTaskKey_Type_name = map[int32]string{
	0: "BLOCK_ALLOCATE_TASK",
	1: "BLOCK_FREE_TASK",
	2: "BLOCK_RELINQUISH_TASK",
	3: "BLOCK_RECEIVE_TASK",
}
var SSTableBlockLevelTaskKey_Type_value = map[string]int32{
	"BLOCK_ALLOCATE_TASK":   0,
	"BLOCK_FREE_TASK":       1,
	"BLOCK_RELINQUISH_TASK": 2,
	"BLOCK_RECEIVE_TASK":    3,
}

func (x SSTableBlockLevelTaskKey_Type) Enum() *SSTableBlockLevelTaskKey_Type {
	p := new(SSTableBlockLevelTaskKey_Type)
	*p = x
	return p
}
func (x SSTableBlockLevelTaskKey_Type) String() string {
	return proto.EnumName(SSTableBlockLevelTaskKey_Type_name, int32(x))
}
func (x *SSTableBlockLevelTaskKey_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SSTableBlockLevelTaskKey_Type_value, data, "SSTableBlockLevelTaskKey_Type")
	if err != nil {
		return err
	}
	*x = SSTableBlockLevelTaskKey_Type(value)
	return nil
}
func (SSTableBlockLevelTaskKey_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{48, 0}
}

type GCRefCollectionKey_GCRefType int32

const (
	GCRefCollectionKey_REPO    GCRefCollectionKey_GCRefType = 0
	GCRefCollectionKey_BTREE   GCRefCollectionKey_GCRefType = 1
	GCRefCollectionKey_JOURNAL GCRefCollectionKey_GCRefType = 2
)

var GCRefCollectionKey_GCRefType_name = map[int32]string{
	0: "REPO",
	1: "BTREE",
	2: "JOURNAL",
}
var GCRefCollectionKey_GCRefType_value = map[string]int32{
	"REPO":    0,
	"BTREE":   1,
	"JOURNAL": 2,
}

func (x GCRefCollectionKey_GCRefType) Enum() *GCRefCollectionKey_GCRefType {
	p := new(GCRefCollectionKey_GCRefType)
	*p = x
	return p
}
func (x GCRefCollectionKey_GCRefType) String() string {
	return proto.EnumName(GCRefCollectionKey_GCRefType_name, int32(x))
}
func (x *GCRefCollectionKey_GCRefType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GCRefCollectionKey_GCRefType_value, data, "GCRefCollectionKey_GCRefType")
	if err != nil {
		return err
	}
	*x = GCRefCollectionKey_GCRefType(value)
	return nil
}
func (GCRefCollectionKey_GCRefType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{50, 0}
}

type CMTaskKey_CMTaskType int32

const (
	// seal chunk
	CMTaskKey_SEAL CMTaskKey_CMTaskType = 0
	// EC encoding
	CMTaskKey_EC CMTaskKey_CMTaskType = 1
	// consistency checking task, only in memory
	CMTaskKey_CC CMTaskKey_CMTaskType = 2
	// repair chunk
	CMTaskKey_REPAIR CMTaskKey_CMTaskType = 3
	// sweep extra copy in chunk
	CMTaskKey_SWEEP CMTaskKey_CMTaskType = 4
	// geo replicate chunk info (CHUNK_INFO_GEO_SEND_TASK) !!
	CMTaskKey_GEO_INFO_SEND CMTaskKey_CMTaskType = 5
	// geo replicate chunk data (CHUNK_GEO_REPLICATION_TASK)
	CMTaskKey_GEO_DATA_SEND CMTaskKey_CMTaskType = 6
	// start COPY chunk write (CHUNK_GEO_COPY_ENTRY)
	CMTaskKey_GEO_COPY CMTaskKey_CMTaskType = 7
	// geo delete chunk
	CMTaskKey_GEO_DELETE CMTaskKey_CMTaskType = 8
	// grouping chunks for XOR (CHUNK_XOR_TASK)
	CMTaskKey_XOR_GROUP CMTaskKey_CMTaskType = 9
	// XOR encoding
	CMTaskKey_XOR_ENCODE CMTaskKey_CMTaskType = 10
	// XOR decoding
	CMTaskKey_XOR_DECODE CMTaskKey_CMTaskType = 11
	// free blocks in chunk
	CMTaskKey_FREE_BLOCKS CMTaskKey_CMTaskType = 12
	// check if a sealed journal chunk could be reclaimed
	CMTaskKey_CHECK_JOURNAL CMTaskKey_CMTaskType = 13
	// check if a sealed btree chunk could be reclaimed (BPLUSTREE_RECLAIM_CHUNK)
	CMTaskKey_CHECK_BTREE        CMTaskKey_CMTaskType = 14
	CMTaskKey_REMOTE_CHUNK_CACHE CMTaskKey_CMTaskType = 15
	// unseal geo replication task track
	CMTaskKey_GEO_DATA_SEND_TRACKER CMTaskKey_CMTaskType = 16
	// rebalance task
	CMTaskKey_REBALANCE CMTaskKey_CMTaskType = 17
	// type for store result ec task
	CMTaskKey_EC_PROGRESS CMTaskKey_CMTaskType = 18
)

var CMTaskKey_CMTaskType_name = map[int32]string{
	0:  "SEAL",
	1:  "EC",
	2:  "CC",
	3:  "REPAIR",
	4:  "SWEEP",
	5:  "GEO_INFO_SEND",
	6:  "GEO_DATA_SEND",
	7:  "GEO_COPY",
	8:  "GEO_DELETE",
	9:  "XOR_GROUP",
	10: "XOR_ENCODE",
	11: "XOR_DECODE",
	12: "FREE_BLOCKS",
	13: "CHECK_JOURNAL",
	14: "CHECK_BTREE",
	15: "REMOTE_CHUNK_CACHE",
	16: "GEO_DATA_SEND_TRACKER",
	17: "REBALANCE",
	18: "EC_PROGRESS",
}
var CMTaskKey_CMTaskType_value = map[string]int32{
	"SEAL":                  0,
	"EC":                    1,
	"CC":                    2,
	"REPAIR":                3,
	"SWEEP":                 4,
	"GEO_INFO_SEND":         5,
	"GEO_DATA_SEND":         6,
	"GEO_COPY":              7,
	"GEO_DELETE":            8,
	"XOR_GROUP":             9,
	"XOR_ENCODE":            10,
	"XOR_DECODE":            11,
	"FREE_BLOCKS":           12,
	"CHECK_JOURNAL":         13,
	"CHECK_BTREE":           14,
	"REMOTE_CHUNK_CACHE":    15,
	"GEO_DATA_SEND_TRACKER": 16,
	"REBALANCE":             17,
	"EC_PROGRESS":           18,
}

func (x CMTaskKey_CMTaskType) Enum() *CMTaskKey_CMTaskType {
	p := new(CMTaskKey_CMTaskType)
	*p = x
	return p
}
func (x CMTaskKey_CMTaskType) String() string {
	return proto.EnumName(CMTaskKey_CMTaskType_name, int32(x))
}
func (x *CMTaskKey_CMTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMTaskKey_CMTaskType_value, data, "CMTaskKey_CMTaskType")
	if err != nil {
		return err
	}
	*x = CMTaskKey_CMTaskType(value)
	return nil
}
func (CMTaskKey_CMTaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{54, 0} }

type CMTaskProgress_TaskStatus int32

const (
	CMTaskProgress_Pending    CMTaskProgress_TaskStatus = 0
	CMTaskProgress_InProgress CMTaskProgress_TaskStatus = 1
	CMTaskProgress_Failed     CMTaskProgress_TaskStatus = 2
	CMTaskProgress_Completed  CMTaskProgress_TaskStatus = 3
)

var CMTaskProgress_TaskStatus_name = map[int32]string{
	0: "Pending",
	1: "InProgress",
	2: "Failed",
	3: "Completed",
}
var CMTaskProgress_TaskStatus_value = map[string]int32{
	"Pending":    0,
	"InProgress": 1,
	"Failed":     2,
	"Completed":  3,
}

func (x CMTaskProgress_TaskStatus) Enum() *CMTaskProgress_TaskStatus {
	p := new(CMTaskProgress_TaskStatus)
	*p = x
	return p
}
func (x CMTaskProgress_TaskStatus) String() string {
	return proto.EnumName(CMTaskProgress_TaskStatus_name, int32(x))
}
func (x *CMTaskProgress_TaskStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMTaskProgress_TaskStatus_value, data, "CMTaskProgress_TaskStatus")
	if err != nil {
		return err
	}
	*x = CMTaskProgress_TaskStatus(value)
	return nil
}
func (CMTaskProgress_TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{56, 0}
}

type CMEcTaskKey_ChunkType int32

const (
	CMEcTaskKey_LOCAL   CMEcTaskKey_ChunkType = 0
	CMEcTaskKey_REMOTE  CMEcTaskKey_ChunkType = 1
	CMEcTaskKey_COPY    CMEcTaskKey_ChunkType = 2
	CMEcTaskKey_ENCODED CMEcTaskKey_ChunkType = 3
	CMEcTaskKey_PARITY  CMEcTaskKey_ChunkType = 4
)

var CMEcTaskKey_ChunkType_name = map[int32]string{
	0: "LOCAL",
	1: "REMOTE",
	2: "COPY",
	3: "ENCODED",
	4: "PARITY",
}
var CMEcTaskKey_ChunkType_value = map[string]int32{
	"LOCAL":   0,
	"REMOTE":  1,
	"COPY":    2,
	"ENCODED": 3,
	"PARITY":  4,
}

func (x CMEcTaskKey_ChunkType) Enum() *CMEcTaskKey_ChunkType {
	p := new(CMEcTaskKey_ChunkType)
	*p = x
	return p
}
func (x CMEcTaskKey_ChunkType) String() string {
	return proto.EnumName(CMEcTaskKey_ChunkType_name, int32(x))
}
func (x *CMEcTaskKey_ChunkType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMEcTaskKey_ChunkType_value, data, "CMEcTaskKey_ChunkType")
	if err != nil {
		return err
	}
	*x = CMEcTaskKey_ChunkType(value)
	return nil
}
func (CMEcTaskKey_ChunkType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{57, 0} }

type CMGeoInfoSendTaskKey_UpdateType int32

const (
	CMGeoInfoSendTaskKey_CREATE CMGeoInfoSendTaskKey_UpdateType = 0
	CMGeoInfoSendTaskKey_DELETE CMGeoInfoSendTaskKey_UpdateType = 1
	CMGeoInfoSendTaskKey_UPDATE CMGeoInfoSendTaskKey_UpdateType = 2
)

var CMGeoInfoSendTaskKey_UpdateType_name = map[int32]string{
	0: "CREATE",
	1: "DELETE",
	2: "UPDATE",
}
var CMGeoInfoSendTaskKey_UpdateType_value = map[string]int32{
	"CREATE": 0,
	"DELETE": 1,
	"UPDATE": 2,
}

func (x CMGeoInfoSendTaskKey_UpdateType) Enum() *CMGeoInfoSendTaskKey_UpdateType {
	p := new(CMGeoInfoSendTaskKey_UpdateType)
	*p = x
	return p
}
func (x CMGeoInfoSendTaskKey_UpdateType) String() string {
	return proto.EnumName(CMGeoInfoSendTaskKey_UpdateType_name, int32(x))
}
func (x *CMGeoInfoSendTaskKey_UpdateType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMGeoInfoSendTaskKey_UpdateType_value, data, "CMGeoInfoSendTaskKey_UpdateType")
	if err != nil {
		return err
	}
	*x = CMGeoInfoSendTaskKey_UpdateType(value)
	return nil
}
func (CMGeoInfoSendTaskKey_UpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{58, 0}
}

type CMJobKey_CMJobType int32

const (
	// type for listing all jobs
	CMJobKey_ALL                    CMJobKey_CMJobType = 0
	CMJobKey_CHECKSUM               CMJobKey_CMJobType = 1
	CMJobKey_FIND_SEAL_LENGTH       CMJobKey_CMJobType = 2
	CMJobKey_GEO_REPLICATION        CMJobKey_CMJobType = 3
	CMJobKey_GEO_DELETE             CMJobKey_CMJobType = 4
	CMJobKey_LOCAL_COPY             CMJobKey_CMJobType = 5
	CMJobKey_EC_RECOVER             CMJobKey_CMJobType = 6
	CMJobKey_EC                     CMJobKey_CMJobType = 7
	CMJobKey_GEO_UNSEAL_REPLICATION CMJobKey_CMJobType = 8
	CMJobKey_GEO_UNSEAL_COMMIT      CMJobKey_CMJobType = 9
	CMJobKey_REBALANCE              CMJobKey_CMJobType = 10
)

var CMJobKey_CMJobType_name = map[int32]string{
	0:  "ALL",
	1:  "CHECKSUM",
	2:  "FIND_SEAL_LENGTH",
	3:  "GEO_REPLICATION",
	4:  "GEO_DELETE",
	5:  "LOCAL_COPY",
	6:  "EC_RECOVER",
	7:  "EC",
	8:  "GEO_UNSEAL_REPLICATION",
	9:  "GEO_UNSEAL_COMMIT",
	10: "REBALANCE",
}
var CMJobKey_CMJobType_value = map[string]int32{
	"ALL":              0,
	"CHECKSUM":         1,
	"FIND_SEAL_LENGTH": 2,
	"GEO_REPLICATION":  3,
	"GEO_DELETE":       4,
	"LOCAL_COPY":       5,
	"EC_RECOVER":       6,
	"EC":               7,
	"GEO_UNSEAL_REPLICATION": 8,
	"GEO_UNSEAL_COMMIT":      9,
	"REBALANCE":              10,
}

func (x CMJobKey_CMJobType) Enum() *CMJobKey_CMJobType {
	p := new(CMJobKey_CMJobType)
	*p = x
	return p
}
func (x CMJobKey_CMJobType) String() string {
	return proto.EnumName(CMJobKey_CMJobType_name, int32(x))
}
func (x *CMJobKey_CMJobType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMJobKey_CMJobType_value, data, "CMJobKey_CMJobType")
	if err != nil {
		return err
	}
	*x = CMJobKey_CMJobType(value)
	return nil
}
func (CMJobKey_CMJobType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{65, 0} }

type CMProgressKey_CMProgressType int32

const (
	CMProgressKey_CC            CMProgressKey_CMProgressType = 0
	CMProgressKey_GC            CMProgressKey_CMProgressType = 1
	CMProgressKey_CMCC          CMProgressKey_CMProgressType = 2
	CMProgressKey_STATS         CMProgressKey_CMProgressType = 3
	CMProgressKey_RB            CMProgressKey_CMProgressType = 4
	CMProgressKey_CS            CMProgressKey_CMProgressType = 5
	CMProgressKey_CS_DONE       CMProgressKey_CMProgressType = 6
	CMProgressKey_ES            CMProgressKey_CMProgressType = 7
	CMProgressKey_ES_DONE       CMProgressKey_CMProgressType = 8
	CMProgressKey_BTREE_RECLAIM CMProgressKey_CMProgressType = 9
)

var CMProgressKey_CMProgressType_name = map[int32]string{
	0: "CC",
	1: "GC",
	2: "CMCC",
	3: "STATS",
	4: "RB",
	5: "CS",
	6: "CS_DONE",
	7: "ES",
	8: "ES_DONE",
	9: "BTREE_RECLAIM",
}
var CMProgressKey_CMProgressType_value = map[string]int32{
	"CC":            0,
	"GC":            1,
	"CMCC":          2,
	"STATS":         3,
	"RB":            4,
	"CS":            5,
	"CS_DONE":       6,
	"ES":            7,
	"ES_DONE":       8,
	"BTREE_RECLAIM": 9,
}

func (x CMProgressKey_CMProgressType) Enum() *CMProgressKey_CMProgressType {
	p := new(CMProgressKey_CMProgressType)
	*p = x
	return p
}
func (x CMProgressKey_CMProgressType) String() string {
	return proto.EnumName(CMProgressKey_CMProgressType_name, int32(x))
}
func (x *CMProgressKey_CMProgressType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CMProgressKey_CMProgressType_value, data, "CMProgressKey_CMProgressType")
	if err != nil {
		return err
	}
	*x = CMProgressKey_CMProgressType(value)
	return nil
}
func (CMProgressKey_CMProgressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{66, 0}
}

type RgReconfigTaskKey_ReconfigType int32

const (
	// for listing purpose
	RgReconfigTaskKey_ALL    RgReconfigTaskKey_ReconfigType = 0
	RgReconfigTaskKey_ADD    RgReconfigTaskKey_ReconfigType = 1
	RgReconfigTaskKey_REMOVE RgReconfigTaskKey_ReconfigType = 2
	RgReconfigTaskKey_FAIL   RgReconfigTaskKey_ReconfigType = 3
	// the ReconfigAdd is caught by a remote zone and then the remote zone
	// notify the local zone to insert ReconfigType task
	RgReconfigTaskKey_REMOTEADD RgReconfigTaskKey_ReconfigType = 4
)

var RgReconfigTaskKey_ReconfigType_name = map[int32]string{
	0: "ALL",
	1: "ADD",
	2: "REMOVE",
	3: "FAIL",
	4: "REMOTEADD",
}
var RgReconfigTaskKey_ReconfigType_value = map[string]int32{
	"ALL":       0,
	"ADD":       1,
	"REMOVE":    2,
	"FAIL":      3,
	"REMOTEADD": 4,
}

func (x RgReconfigTaskKey_ReconfigType) Enum() *RgReconfigTaskKey_ReconfigType {
	p := new(RgReconfigTaskKey_ReconfigType)
	*p = x
	return p
}
func (x RgReconfigTaskKey_ReconfigType) String() string {
	return proto.EnumName(RgReconfigTaskKey_ReconfigType_name, int32(x))
}
func (x *RgReconfigTaskKey_ReconfigType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RgReconfigTaskKey_ReconfigType_value, data, "RgReconfigTaskKey_ReconfigType")
	if err != nil {
		return err
	}
	*x = RgReconfigTaskKey_ReconfigType(value)
	return nil
}
func (RgReconfigTaskKey_ReconfigType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{68, 0}
}

type ListEntryKey_ListEntryType int32

const (
	ListEntryKey_KEYPOOL              ListEntryKey_ListEntryType = 0
	ListEntryKey_FSNS_DIR             ListEntryKey_ListEntryType = 1
	ListEntryKey_FSNS_FILE            ListEntryKey_ListEntryType = 2
	ListEntryKey_OBJECT_OWNER_HISTORY ListEntryKey_ListEntryType = 3
	ListEntryKey_OBJECT_LOCK          ListEntryKey_ListEntryType = 4
)

var ListEntryKey_ListEntryType_name = map[int32]string{
	0: "KEYPOOL",
	1: "FSNS_DIR",
	2: "FSNS_FILE",
	3: "OBJECT_OWNER_HISTORY",
	4: "OBJECT_LOCK",
}
var ListEntryKey_ListEntryType_value = map[string]int32{
	"KEYPOOL":              0,
	"FSNS_DIR":             1,
	"FSNS_FILE":            2,
	"OBJECT_OWNER_HISTORY": 3,
	"OBJECT_LOCK":          4,
}

func (x ListEntryKey_ListEntryType) Enum() *ListEntryKey_ListEntryType {
	p := new(ListEntryKey_ListEntryType)
	*p = x
	return p
}
func (x ListEntryKey_ListEntryType) String() string {
	return proto.EnumName(ListEntryKey_ListEntryType_name, int32(x))
}
func (x *ListEntryKey_ListEntryType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ListEntryKey_ListEntryType_value, data, "ListEntryKey_ListEntryType")
	if err != nil {
		return err
	}
	*x = ListEntryKey_ListEntryType(value)
	return nil
}
func (ListEntryKey_ListEntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{69, 0}
}

type DeleteJobTableKey_DeleteJobTableKeyType int32

const (
	DeleteJobTableKey_DELETE_JOB                 DeleteJobTableKey_DeleteJobTableKeyType = 0
	DeleteJobTableKey_CLEANUP_JOB                DeleteJobTableKey_DeleteJobTableKeyType = 1
	DeleteJobTableKey_DELETE_LIST_ENTRY_JOB      DeleteJobTableKey_DeleteJobTableKeyType = 2
	DeleteJobTableKey_ADD_POSITIVE_REFERENCE_JOB DeleteJobTableKey_DeleteJobTableKeyType = 3
	DeleteJobTableKey_DELETE_ALL_INDICES_JOB     DeleteJobTableKey_DeleteJobTableKeyType = 4
)

var DeleteJobTableKey_DeleteJobTableKeyType_name = map[int32]string{
	0: "DELETE_JOB",
	1: "CLEANUP_JOB",
	2: "DELETE_LIST_ENTRY_JOB",
	3: "ADD_POSITIVE_REFERENCE_JOB",
	4: "DELETE_ALL_INDICES_JOB",
}
var DeleteJobTableKey_DeleteJobTableKeyType_value = map[string]int32{
	"DELETE_JOB":                 0,
	"CLEANUP_JOB":                1,
	"DELETE_LIST_ENTRY_JOB":      2,
	"ADD_POSITIVE_REFERENCE_JOB": 3,
	"DELETE_ALL_INDICES_JOB":     4,
}

func (x DeleteJobTableKey_DeleteJobTableKeyType) Enum() *DeleteJobTableKey_DeleteJobTableKeyType {
	p := new(DeleteJobTableKey_DeleteJobTableKeyType)
	*p = x
	return p
}
func (x DeleteJobTableKey_DeleteJobTableKeyType) String() string {
	return proto.EnumName(DeleteJobTableKey_DeleteJobTableKeyType_name, int32(x))
}
func (x *DeleteJobTableKey_DeleteJobTableKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeleteJobTableKey_DeleteJobTableKeyType_value, data, "DeleteJobTableKey_DeleteJobTableKeyType")
	if err != nil {
		return err
	}
	*x = DeleteJobTableKey_DeleteJobTableKeyType(value)
	return nil
}
func (DeleteJobTableKey_DeleteJobTableKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{70, 0}
}

type DeleteJobTableKey_KeyVersionType int32

const (
	DeleteJobTableKey_version22 DeleteJobTableKey_KeyVersionType = 0
	DeleteJobTableKey_version31 DeleteJobTableKey_KeyVersionType = 1
)

var DeleteJobTableKey_KeyVersionType_name = map[int32]string{
	0: "version22",
	1: "version31",
}
var DeleteJobTableKey_KeyVersionType_value = map[string]int32{
	"version22": 0,
	"version31": 1,
}

func (x DeleteJobTableKey_KeyVersionType) Enum() *DeleteJobTableKey_KeyVersionType {
	p := new(DeleteJobTableKey_KeyVersionType)
	*p = x
	return p
}
func (x DeleteJobTableKey_KeyVersionType) String() string {
	return proto.EnumName(DeleteJobTableKey_KeyVersionType_name, int32(x))
}
func (x *DeleteJobTableKey_KeyVersionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeleteJobTableKey_KeyVersionType_value, data, "DeleteJobTableKey_KeyVersionType")
	if err != nil {
		return err
	}
	*x = DeleteJobTableKey_KeyVersionType(value)
	return nil
}
func (DeleteJobTableKey_KeyVersionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{70, 1}
}

type RepoReferenceKey_ReferenceType int32

const (
	// for listing purpose
	RepoReferenceKey_ALL      RepoReferenceKey_ReferenceType = 0
	RepoReferenceKey_POSITIVE RepoReferenceKey_ReferenceType = 1
	RepoReferenceKey_NEGATIVE RepoReferenceKey_ReferenceType = 2
)

var RepoReferenceKey_ReferenceType_name = map[int32]string{
	0: "ALL",
	1: "POSITIVE",
	2: "NEGATIVE",
}
var RepoReferenceKey_ReferenceType_value = map[string]int32{
	"ALL":      0,
	"POSITIVE": 1,
	"NEGATIVE": 2,
}

func (x RepoReferenceKey_ReferenceType) Enum() *RepoReferenceKey_ReferenceType {
	p := new(RepoReferenceKey_ReferenceType)
	*p = x
	return p
}
func (x RepoReferenceKey_ReferenceType) String() string {
	return proto.EnumName(RepoReferenceKey_ReferenceType_name, int32(x))
}
func (x *RepoReferenceKey_ReferenceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RepoReferenceKey_ReferenceType_value, data, "RepoReferenceKey_ReferenceType")
	if err != nil {
		return err
	}
	*x = RepoReferenceKey_ReferenceType(value)
	return nil
}
func (RepoReferenceKey_ReferenceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{73, 0}
}

// only meaningful for positive entry
type RepoReferenceKey_CrossType int32

const (
	// for listing purpose
	RepoReferenceKey_ANY    RepoReferenceKey_CrossType = 0
	RepoReferenceKey_NORMAL RepoReferenceKey_CrossType = 1
	// positive added for cross reference
	RepoReferenceKey_CROSS RepoReferenceKey_CrossType = 2
)

var RepoReferenceKey_CrossType_name = map[int32]string{
	0: "ANY",
	1: "NORMAL",
	2: "CROSS",
}
var RepoReferenceKey_CrossType_value = map[string]int32{
	"ANY":    0,
	"NORMAL": 1,
	"CROSS":  2,
}

func (x RepoReferenceKey_CrossType) Enum() *RepoReferenceKey_CrossType {
	p := new(RepoReferenceKey_CrossType)
	*p = x
	return p
}
func (x RepoReferenceKey_CrossType) String() string {
	return proto.EnumName(RepoReferenceKey_CrossType_name, int32(x))
}
func (x *RepoReferenceKey_CrossType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RepoReferenceKey_CrossType_value, data, "RepoReferenceKey_CrossType")
	if err != nil {
		return err
	}
	*x = RepoReferenceKey_CrossType(value)
	return nil
}
func (RepoReferenceKey_CrossType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{73, 1}
}

type NKEntryReplicationTaskKey_NKTaskType int32

const (
	NKEntryReplicationTaskKey_ADD    NKEntryReplicationTaskKey_NKTaskType = 1
	NKEntryReplicationTaskKey_REMOVE NKEntryReplicationTaskKey_NKTaskType = 2
)

var NKEntryReplicationTaskKey_NKTaskType_name = map[int32]string{
	1: "ADD",
	2: "REMOVE",
}
var NKEntryReplicationTaskKey_NKTaskType_value = map[string]int32{
	"ADD":    1,
	"REMOVE": 2,
}

func (x NKEntryReplicationTaskKey_NKTaskType) Enum() *NKEntryReplicationTaskKey_NKTaskType {
	p := new(NKEntryReplicationTaskKey_NKTaskType)
	*p = x
	return p
}
func (x NKEntryReplicationTaskKey_NKTaskType) String() string {
	return proto.EnumName(NKEntryReplicationTaskKey_NKTaskType_name, int32(x))
}
func (x *NKEntryReplicationTaskKey_NKTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NKEntryReplicationTaskKey_NKTaskType_value, data, "NKEntryReplicationTaskKey_NKTaskType")
	if err != nil {
		return err
	}
	*x = NKEntryReplicationTaskKey_NKTaskType(value)
	return nil
}
func (NKEntryReplicationTaskKey_NKTaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{87, 0}
}

type ZKConfigKey_ConfigKeyType int32

const (
	ZKConfigKey_HEAD_TYPE_INFO     ZKConfigKey_ConfigKeyType = 0
	ZKConfigKey_OBJECT_BASE_URL    ZKConfigKey_ConfigKeyType = 1
	ZKConfigKey_INGESTION_TASK     ZKConfigKey_ConfigKeyType = 2
	ZKConfigKey_VARRAY             ZKConfigKey_ConfigKeyType = 3
	ZKConfigKey_LOCAL_USER_INFO    ZKConfigKey_ConfigKeyType = 4
	ZKConfigKey_AUTH_PROVIDER_INFO ZKConfigKey_ConfigKeyType = 5
	ZKConfigKey_BORROWED_TOKEN_KEY ZKConfigKey_ConfigKeyType = 6
	ZKConfigKey_AUTH_TOKEN_COUNT   ZKConfigKey_ConfigKeyType = 7
)

var ZKConfigKey_ConfigKeyType_name = map[int32]string{
	0: "HEAD_TYPE_INFO",
	1: "OBJECT_BASE_URL",
	2: "INGESTION_TASK",
	3: "VARRAY",
	4: "LOCAL_USER_INFO",
	5: "AUTH_PROVIDER_INFO",
	6: "BORROWED_TOKEN_KEY",
	7: "AUTH_TOKEN_COUNT",
}
var ZKConfigKey_ConfigKeyType_value = map[string]int32{
	"HEAD_TYPE_INFO":     0,
	"OBJECT_BASE_URL":    1,
	"INGESTION_TASK":     2,
	"VARRAY":             3,
	"LOCAL_USER_INFO":    4,
	"AUTH_PROVIDER_INFO": 5,
	"BORROWED_TOKEN_KEY": 6,
	"AUTH_TOKEN_COUNT":   7,
}

func (x ZKConfigKey_ConfigKeyType) Enum() *ZKConfigKey_ConfigKeyType {
	p := new(ZKConfigKey_ConfigKeyType)
	*p = x
	return p
}
func (x ZKConfigKey_ConfigKeyType) String() string {
	return proto.EnumName(ZKConfigKey_ConfigKeyType_name, int32(x))
}
func (x *ZKConfigKey_ConfigKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ZKConfigKey_ConfigKeyType_value, data, "ZKConfigKey_ConfigKeyType")
	if err != nil {
		return err
	}
	*x = ZKConfigKey_ConfigKeyType(value)
	return nil
}
func (ZKConfigKey_ConfigKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{88, 0}
}

type ViprNestSystemKey_SystemKeyType int32

const (
	ViprNestSystemKey_NONE  ViprNestSystemKey_SystemKeyType = 0
	ViprNestSystemKey_GROUP ViprNestSystemKey_SystemKeyType = 1
	ViprNestSystemKey_NODE  ViprNestSystemKey_SystemKeyType = 2
)

var ViprNestSystemKey_SystemKeyType_name = map[int32]string{
	0: "NONE",
	1: "GROUP",
	2: "NODE",
}
var ViprNestSystemKey_SystemKeyType_value = map[string]int32{
	"NONE":  0,
	"GROUP": 1,
	"NODE":  2,
}

func (x ViprNestSystemKey_SystemKeyType) Enum() *ViprNestSystemKey_SystemKeyType {
	p := new(ViprNestSystemKey_SystemKeyType)
	*p = x
	return p
}
func (x ViprNestSystemKey_SystemKeyType) String() string {
	return proto.EnumName(ViprNestSystemKey_SystemKeyType_name, int32(x))
}
func (x *ViprNestSystemKey_SystemKeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ViprNestSystemKey_SystemKeyType_value, data, "ViprNestSystemKey_SystemKeyType")
	if err != nil {
		return err
	}
	*x = ViprNestSystemKey_SystemKeyType(value)
	return nil
}
func (ViprNestSystemKey_SystemKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{91, 0}
}

type VNestTaskKey_VNestTaskType int32

const (
	VNestTaskKey_NONE            VNestTaskKey_VNestTaskType = 0
	VNestTaskKey_LEADER_ELECTION VNestTaskKey_VNestTaskType = 1
	VNestTaskKey_KEY_RECONFIG    VNestTaskKey_VNestTaskType = 2
)

var VNestTaskKey_VNestTaskType_name = map[int32]string{
	0: "NONE",
	1: "LEADER_ELECTION",
	2: "KEY_RECONFIG",
}
var VNestTaskKey_VNestTaskType_value = map[string]int32{
	"NONE":            0,
	"LEADER_ELECTION": 1,
	"KEY_RECONFIG":    2,
}

func (x VNestTaskKey_VNestTaskType) Enum() *VNestTaskKey_VNestTaskType {
	p := new(VNestTaskKey_VNestTaskType)
	*p = x
	return p
}
func (x VNestTaskKey_VNestTaskType) String() string {
	return proto.EnumName(VNestTaskKey_VNestTaskType_name, int32(x))
}
func (x *VNestTaskKey_VNestTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(VNestTaskKey_VNestTaskType_value, data, "VNestTaskKey_VNestTaskType")
	if err != nil {
		return err
	}
	*x = VNestTaskKey_VNestTaskType(value)
	return nil
}
func (VNestTaskKey_VNestTaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{94, 0}
}

type PaxosTaskKey_PaxosTaskType int32

const (
	PaxosTaskKey_PAXOS_DELETE              PaxosTaskKey_PaxosTaskType = 0
	PaxosTaskKey_PAXOS_ELECT_NOTIFICATION  PaxosTaskKey_PaxosTaskType = 1
	PaxosTaskKey_PAXOS_COMMIT_NOTIFICATION PaxosTaskKey_PaxosTaskType = 2
	PaxosTaskKey_PAXOS_PURGE               PaxosTaskKey_PaxosTaskType = 3
)

var PaxosTaskKey_PaxosTaskType_name = map[int32]string{
	0: "PAXOS_DELETE",
	1: "PAXOS_ELECT_NOTIFICATION",
	2: "PAXOS_COMMIT_NOTIFICATION",
	3: "PAXOS_PURGE",
}
var PaxosTaskKey_PaxosTaskType_value = map[string]int32{
	"PAXOS_DELETE":              0,
	"PAXOS_ELECT_NOTIFICATION":  1,
	"PAXOS_COMMIT_NOTIFICATION": 2,
	"PAXOS_PURGE":               3,
}

func (x PaxosTaskKey_PaxosTaskType) Enum() *PaxosTaskKey_PaxosTaskType {
	p := new(PaxosTaskKey_PaxosTaskType)
	*p = x
	return p
}
func (x PaxosTaskKey_PaxosTaskType) String() string {
	return proto.EnumName(PaxosTaskKey_PaxosTaskType_name, int32(x))
}
func (x *PaxosTaskKey_PaxosTaskType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PaxosTaskKey_PaxosTaskType_value, data, "PaxosTaskKey_PaxosTaskType")
	if err != nil {
		return err
	}
	*x = PaxosTaskKey_PaxosTaskType(value)
	return nil
}
func (PaxosTaskKey_PaxosTaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{96, 0}
}

type ChunkReferenceScanProgressKey_ChunkDataType int32

const (
	ChunkReferenceScanProgressKey_REPO    ChunkReferenceScanProgressKey_ChunkDataType = 0
	ChunkReferenceScanProgressKey_JOURNAL ChunkReferenceScanProgressKey_ChunkDataType = 1
	ChunkReferenceScanProgressKey_BTREE   ChunkReferenceScanProgressKey_ChunkDataType = 2
)

var ChunkReferenceScanProgressKey_ChunkDataType_name = map[int32]string{
	0: "REPO",
	1: "JOURNAL",
	2: "BTREE",
}
var ChunkReferenceScanProgressKey_ChunkDataType_value = map[string]int32{
	"REPO":    0,
	"JOURNAL": 1,
	"BTREE":   2,
}

func (x ChunkReferenceScanProgressKey_ChunkDataType) Enum() *ChunkReferenceScanProgressKey_ChunkDataType {
	p := new(ChunkReferenceScanProgressKey_ChunkDataType)
	*p = x
	return p
}
func (x ChunkReferenceScanProgressKey_ChunkDataType) String() string {
	return proto.EnumName(ChunkReferenceScanProgressKey_ChunkDataType_name, int32(x))
}
func (x *ChunkReferenceScanProgressKey_ChunkDataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChunkReferenceScanProgressKey_ChunkDataType_value, data, "ChunkReferenceScanProgressKey_ChunkDataType")
	if err != nil {
		return err
	}
	*x = ChunkReferenceScanProgressKey_ChunkDataType(value)
	return nil
}
func (ChunkReferenceScanProgressKey_ChunkDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{102, 0}
}

type BTreeCorruptionScanProgressKey_ProgressType int32

const (
	// ALL for dtQuery without ProgressType
	BTreeCorruptionScanProgressKey_ALL     BTreeCorruptionScanProgressKey_ProgressType = 0
	BTreeCorruptionScanProgressKey_ONGOING BTreeCorruptionScanProgressKey_ProgressType = 1
	BTreeCorruptionScanProgressKey_LAST    BTreeCorruptionScanProgressKey_ProgressType = 2
)

var BTreeCorruptionScanProgressKey_ProgressType_name = map[int32]string{
	0: "ALL",
	1: "ONGOING",
	2: "LAST",
}
var BTreeCorruptionScanProgressKey_ProgressType_value = map[string]int32{
	"ALL":     0,
	"ONGOING": 1,
	"LAST":    2,
}

func (x BTreeCorruptionScanProgressKey_ProgressType) Enum() *BTreeCorruptionScanProgressKey_ProgressType {
	p := new(BTreeCorruptionScanProgressKey_ProgressType)
	*p = x
	return p
}
func (x BTreeCorruptionScanProgressKey_ProgressType) String() string {
	return proto.EnumName(BTreeCorruptionScanProgressKey_ProgressType_name, int32(x))
}
func (x *BTreeCorruptionScanProgressKey_ProgressType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BTreeCorruptionScanProgressKey_ProgressType_value, data, "BTreeCorruptionScanProgressKey_ProgressType")
	if err != nil {
		return err
	}
	*x = BTreeCorruptionScanProgressKey_ProgressType(value)
	return nil
}
func (BTreeCorruptionScanProgressKey_ProgressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{103, 0}
}

type ChunkGcScanStatusTaskKey_ChunkDataType int32

const (
	ChunkGcScanStatusTaskKey_REPO    ChunkGcScanStatusTaskKey_ChunkDataType = 0
	ChunkGcScanStatusTaskKey_JOURNAL ChunkGcScanStatusTaskKey_ChunkDataType = 1
	ChunkGcScanStatusTaskKey_BTREE   ChunkGcScanStatusTaskKey_ChunkDataType = 2
)

var ChunkGcScanStatusTaskKey_ChunkDataType_name = map[int32]string{
	0: "REPO",
	1: "JOURNAL",
	2: "BTREE",
}
var ChunkGcScanStatusTaskKey_ChunkDataType_value = map[string]int32{
	"REPO":    0,
	"JOURNAL": 1,
	"BTREE":   2,
}

func (x ChunkGcScanStatusTaskKey_ChunkDataType) Enum() *ChunkGcScanStatusTaskKey_ChunkDataType {
	p := new(ChunkGcScanStatusTaskKey_ChunkDataType)
	*p = x
	return p
}
func (x ChunkGcScanStatusTaskKey_ChunkDataType) String() string {
	return proto.EnumName(ChunkGcScanStatusTaskKey_ChunkDataType_name, int32(x))
}
func (x *ChunkGcScanStatusTaskKey_ChunkDataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChunkGcScanStatusTaskKey_ChunkDataType_value, data, "ChunkGcScanStatusTaskKey_ChunkDataType")
	if err != nil {
		return err
	}
	*x = ChunkGcScanStatusTaskKey_ChunkDataType(value)
	return nil
}
func (ChunkGcScanStatusTaskKey_ChunkDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{105, 0}
}

type DynamicConfigKey_KeyType int32

const (
	DynamicConfigKey_GENCOUNT DynamicConfigKey_KeyType = 1
	DynamicConfigKey_VALUE    DynamicConfigKey_KeyType = 2
	DynamicConfigKey_UPDATE   DynamicConfigKey_KeyType = 3
)

var DynamicConfigKey_KeyType_name = map[int32]string{
	1: "GENCOUNT",
	2: "VALUE",
	3: "UPDATE",
}
var DynamicConfigKey_KeyType_value = map[string]int32{
	"GENCOUNT": 1,
	"VALUE":    2,
	"UPDATE":   3,
}

func (x DynamicConfigKey_KeyType) Enum() *DynamicConfigKey_KeyType {
	p := new(DynamicConfigKey_KeyType)
	*p = x
	return p
}
func (x DynamicConfigKey_KeyType) String() string {
	return proto.EnumName(DynamicConfigKey_KeyType_name, int32(x))
}
func (x *DynamicConfigKey_KeyType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DynamicConfigKey_KeyType_value, data, "DynamicConfigKey_KeyType")
	if err != nil {
		return err
	}
	*x = DynamicConfigKey_KeyType(value)
	return nil
}
func (DynamicConfigKey_KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{114, 0}
}

type PartialGCTaskKey_PartialGCTaskState int32

const (
	PartialGCTaskKey_ALL                  PartialGCTaskKey_PartialGCTaskState = 0
	PartialGCTaskKey_CHUNK_COPY           PartialGCTaskKey_PartialGCTaskState = 1
	PartialGCTaskKey_GEO_REPLICATION      PartialGCTaskKey_PartialGCTaskState = 2
	PartialGCTaskKey_OB_UPDATE            PartialGCTaskKey_PartialGCTaskState = 3
	PartialGCTaskKey_OB_UPDATE_VALIDATION PartialGCTaskKey_PartialGCTaskState = 4
)

var PartialGCTaskKey_PartialGCTaskState_name = map[int32]string{
	0: "ALL",
	1: "CHUNK_COPY",
	2: "GEO_REPLICATION",
	3: "OB_UPDATE",
	4: "OB_UPDATE_VALIDATION",
}
var PartialGCTaskKey_PartialGCTaskState_value = map[string]int32{
	"ALL":                  0,
	"CHUNK_COPY":           1,
	"GEO_REPLICATION":      2,
	"OB_UPDATE":            3,
	"OB_UPDATE_VALIDATION": 4,
}

func (x PartialGCTaskKey_PartialGCTaskState) Enum() *PartialGCTaskKey_PartialGCTaskState {
	p := new(PartialGCTaskKey_PartialGCTaskState)
	*p = x
	return p
}
func (x PartialGCTaskKey_PartialGCTaskState) String() string {
	return proto.EnumName(PartialGCTaskKey_PartialGCTaskState_name, int32(x))
}
func (x *PartialGCTaskKey_PartialGCTaskState) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PartialGCTaskKey_PartialGCTaskState_value, data, "PartialGCTaskKey_PartialGCTaskState")
	if err != nil {
		return err
	}
	*x = PartialGCTaskKey_PartialGCTaskState(value)
	return nil
}
func (PartialGCTaskKey_PartialGCTaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor5, []int{124, 0}
}

type LockMgrKey_Type int32

const (
	LockMgrKey_GRANTED    LockMgrKey_Type = 0
	LockMgrKey_WAITING    LockMgrKey_Type = 1
	LockMgrKey_CONVERTING LockMgrKey_Type = 2
	LockMgrKey_UNLOCKED   LockMgrKey_Type = 3
)

var LockMgrKey_Type_name = map[int32]string{
	0: "GRANTED",
	1: "WAITING",
	2: "CONVERTING",
	3: "UNLOCKED",
}
var LockMgrKey_Type_value = map[string]int32{
	"GRANTED":    0,
	"WAITING":    1,
	"CONVERTING": 2,
	"UNLOCKED":   3,
}

func (x LockMgrKey_Type) Enum() *LockMgrKey_Type {
	p := new(LockMgrKey_Type)
	*p = x
	return p
}
func (x LockMgrKey_Type) String() string {
	return proto.EnumName(LockMgrKey_Type_name, int32(x))
}
func (x *LockMgrKey_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LockMgrKey_Type_value, data, "LockMgrKey_Type")
	if err != nil {
		return err
	}
	*x = LockMgrKey_Type(value)
	return nil
}
func (LockMgrKey_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{133, 0} }

type SchemaKey struct {
	Type             *SchemaKeyType `protobuf:"varint,1,req,name=type,enum=or.SchemaKeyType" json:"type,omitempty"`
	UserKey          []byte         `protobuf:"bytes,2,req,name=userKey" json:"userKey,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *SchemaKey) Reset()                    { *m = SchemaKey{} }
func (m *SchemaKey) String() string            { return proto.CompactTextString(m) }
func (*SchemaKey) ProtoMessage()               {}
func (*SchemaKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *SchemaKey) GetType() SchemaKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SchemaKeyType_DEFAULT_KEY
}

func (m *SchemaKey) GetUserKey() []byte {
	if m != nil {
		return m.UserKey
	}
	return nil
}

// The default key for old DirectoryTableKey
type DefaultSchemaKey struct {
	Parent           *string `protobuf:"bytes,1,req,name=parent" json:"parent,omitempty"`
	Type             *string `protobuf:"bytes,2,req,name=type" json:"type,omitempty"`
	Child            *string `protobuf:"bytes,3,req,name=child" json:"child,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DefaultSchemaKey) Reset()                    { *m = DefaultSchemaKey{} }
func (m *DefaultSchemaKey) String() string            { return proto.CompactTextString(m) }
func (*DefaultSchemaKey) ProtoMessage()               {}
func (*DefaultSchemaKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *DefaultSchemaKey) GetParent() string {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return ""
}

func (m *DefaultSchemaKey) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *DefaultSchemaKey) GetChild() string {
	if m != nil && m.Child != nil {
		return *m.Child
	}
	return ""
}

// DirectoryTable Record related keys
type DTRecordKey struct {
	Type *DTRecordKey_DTRecordKeyType `protobuf:"varint,1,req,name=type,enum=or.DTRecordKey_DTRecordKeyType" json:"type,omitempty"`
	DtId *string                      `protobuf:"bytes,2,req,name=dtId" json:"dtId,omitempty"`
	Zone *string                      `protobuf:"bytes,3,req,name=zone" json:"zone,omitempty"`
	// the detail keys for different type DTRecordKey
	SubKey           []byte `protobuf:"bytes,4,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *DTRecordKey) Reset()                    { *m = DTRecordKey{} }
func (m *DTRecordKey) String() string            { return proto.CompactTextString(m) }
func (*DTRecordKey) ProtoMessage()               {}
func (*DTRecordKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *DTRecordKey) GetType() DTRecordKey_DTRecordKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DTRecordKey_JOURNAL_REGION
}

func (m *DTRecordKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *DTRecordKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

func (m *DTRecordKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type DTRecordJournalRegionSubKey struct {
	Major            *string `protobuf:"bytes,1,req,name=major" json:"major,omitempty"`
	Minor            *string `protobuf:"bytes,2,req,name=minor" json:"minor,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTRecordJournalRegionSubKey) Reset()                    { *m = DTRecordJournalRegionSubKey{} }
func (m *DTRecordJournalRegionSubKey) String() string            { return proto.CompactTextString(m) }
func (*DTRecordJournalRegionSubKey) ProtoMessage()               {}
func (*DTRecordJournalRegionSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *DTRecordJournalRegionSubKey) GetMajor() string {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return ""
}

func (m *DTRecordJournalRegionSubKey) GetMinor() string {
	if m != nil && m.Minor != nil {
		return *m.Minor
	}
	return ""
}

type DTRecordBPTreeInfoSubKey struct {
	Major            *string `protobuf:"bytes,1,req,name=major" json:"major,omitempty"`
	Minor            *string `protobuf:"bytes,2,req,name=minor" json:"minor,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTRecordBPTreeInfoSubKey) Reset()                    { *m = DTRecordBPTreeInfoSubKey{} }
func (m *DTRecordBPTreeInfoSubKey) String() string            { return proto.CompactTextString(m) }
func (*DTRecordBPTreeInfoSubKey) ProtoMessage()               {}
func (*DTRecordBPTreeInfoSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *DTRecordBPTreeInfoSubKey) GetMajor() string {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return ""
}

func (m *DTRecordBPTreeInfoSubKey) GetMinor() string {
	if m != nil && m.Minor != nil {
		return *m.Minor
	}
	return ""
}

type DTRecordBPTreeBootstrapSubKey struct {
	DstZone          *string `protobuf:"bytes,1,req,name=dstZone" json:"dstZone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTRecordBPTreeBootstrapSubKey) Reset()                    { *m = DTRecordBPTreeBootstrapSubKey{} }
func (m *DTRecordBPTreeBootstrapSubKey) String() string            { return proto.CompactTextString(m) }
func (*DTRecordBPTreeBootstrapSubKey) ProtoMessage()               {}
func (*DTRecordBPTreeBootstrapSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *DTRecordBPTreeBootstrapSubKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

type DTRecordBPTreeBootstrapJournalSubKey struct {
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTRecordBPTreeBootstrapJournalSubKey) Reset()         { *m = DTRecordBPTreeBootstrapJournalSubKey{} }
func (m *DTRecordBPTreeBootstrapJournalSubKey) String() string { return proto.CompactTextString(m) }
func (*DTRecordBPTreeBootstrapJournalSubKey) ProtoMessage()    {}
func (*DTRecordBPTreeBootstrapJournalSubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{6}
}

func (m *DTRecordBPTreeBootstrapJournalSubKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

// DirectoryTable ownership related keys
type DTOwnerKey struct {
	DtType           *string `protobuf:"bytes,1,req,name=dtType" json:"dtType,omitempty"`
	DtId             *string `protobuf:"bytes,2,req,name=dtId" json:"dtId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTOwnerKey) Reset()                    { *m = DTOwnerKey{} }
func (m *DTOwnerKey) String() string            { return proto.CompactTextString(m) }
func (*DTOwnerKey) ProtoMessage()               {}
func (*DTOwnerKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *DTOwnerKey) GetDtType() string {
	if m != nil && m.DtType != nil {
		return *m.DtType
	}
	return ""
}

func (m *DTOwnerKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

// OrderedTask common definitions
type TaskOrder struct {
	Order            *int64 `protobuf:"varint,1,req,name=order" json:"order,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *TaskOrder) Reset()                    { *m = TaskOrder{} }
func (m *TaskOrder) String() string            { return proto.CompactTextString(m) }
func (*TaskOrder) ProtoMessage()               {}
func (*TaskOrder) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *TaskOrder) GetOrder() int64 {
	if m != nil && m.Order != nil {
		return *m.Order
	}
	return 0
}

// Metering related keys V 1
type MTTableRecordKey struct {
	Type             *MTTableRecordKey_Type `protobuf:"varint,1,req,name=type,enum=or.MTTableRecordKey_Type" json:"type,omitempty"`
	SubKey           []byte                 `protobuf:"bytes,2,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *MTTableRecordKey) Reset()                    { *m = MTTableRecordKey{} }
func (m *MTTableRecordKey) String() string            { return proto.CompactTextString(m) }
func (*MTTableRecordKey) ProtoMessage()               {}
func (*MTTableRecordKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *MTTableRecordKey) GetType() MTTableRecordKey_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MTTableRecordKey_STORAGE_STAT
}

func (m *MTTableRecordKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type MTStorageStatKey struct {
	DtId             *string                 `protobuf:"bytes,1,req,name=DtId" json:"DtId,omitempty"`
	StatState        *MTStorageStatKey_State `protobuf:"varint,2,opt,name=StatState,enum=or.MTStorageStatKey_State" json:"StatState,omitempty"`
	CollectorVersion *int64                  `protobuf:"varint,3,req,name=CollectorVersion" json:"CollectorVersion,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *MTStorageStatKey) Reset()                    { *m = MTStorageStatKey{} }
func (m *MTStorageStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTStorageStatKey) ProtoMessage()               {}
func (*MTStorageStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *MTStorageStatKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *MTStorageStatKey) GetStatState() MTStorageStatKey_State {
	if m != nil && m.StatState != nil {
		return *m.StatState
	}
	return MTStorageStatKey_InProgress
}

func (m *MTStorageStatKey) GetCollectorVersion() int64 {
	if m != nil && m.CollectorVersion != nil {
		return *m.CollectorVersion
	}
	return 0
}

type MTAggregatedStorageStatKey struct {
	AggregatorVersion *int64 `protobuf:"varint,1,req,name=AggregatorVersion" json:"AggregatorVersion,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *MTAggregatedStorageStatKey) Reset()                    { *m = MTAggregatedStorageStatKey{} }
func (m *MTAggregatedStorageStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTAggregatedStorageStatKey) ProtoMessage()               {}
func (*MTAggregatedStorageStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *MTAggregatedStorageStatKey) GetAggregatorVersion() int64 {
	if m != nil && m.AggregatorVersion != nil {
		return *m.AggregatorVersion
	}
	return 0
}

type MTBandwidthStatKey struct {
	NodeId           *string `protobuf:"bytes,1,req,name=NodeId" json:"NodeId,omitempty"`
	BandwidthVersion *int64  `protobuf:"varint,2,req,name=BandwidthVersion" json:"BandwidthVersion,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTBandwidthStatKey) Reset()                    { *m = MTBandwidthStatKey{} }
func (m *MTBandwidthStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTBandwidthStatKey) ProtoMessage()               {}
func (*MTBandwidthStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *MTBandwidthStatKey) GetNodeId() string {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return ""
}

func (m *MTBandwidthStatKey) GetBandwidthVersion() int64 {
	if m != nil && m.BandwidthVersion != nil {
		return *m.BandwidthVersion
	}
	return 0
}

type MTAggregatedBandwidthStatKey struct {
	AggregatorVersion *int64 `protobuf:"varint,1,req,name=AggregatorVersion" json:"AggregatorVersion,omitempty"`
	XXX_unrecognized  []byte `json:"-"`
}

func (m *MTAggregatedBandwidthStatKey) Reset()                    { *m = MTAggregatedBandwidthStatKey{} }
func (m *MTAggregatedBandwidthStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTAggregatedBandwidthStatKey) ProtoMessage()               {}
func (*MTAggregatedBandwidthStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *MTAggregatedBandwidthStatKey) GetAggregatorVersion() int64 {
	if m != nil && m.AggregatorVersion != nil {
		return *m.AggregatorVersion
	}
	return 0
}

// Metering Keys for MT2
type MTRecordKey struct {
	Type             *MTRecordKey_MTRecordKeyType `protobuf:"varint,1,req,name=type,enum=or.MTRecordKey_MTRecordKeyType" json:"type,omitempty"`
	SubKey           []byte                       `protobuf:"bytes,2,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *MTRecordKey) Reset()                    { *m = MTRecordKey{} }
func (m *MTRecordKey) String() string            { return proto.CompactTextString(m) }
func (*MTRecordKey) ProtoMessage()               {}
func (*MTRecordKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *MTRecordKey) GetType() MTRecordKey_MTRecordKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MTRecordKey_BUCKET_STAT
}

func (m *MTRecordKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

// Metering Keys for MTAGG
type MTAggregateRecordKey struct {
	Type             *MTAggregateRecordKey_MTAggregateRecordKeyType `protobuf:"varint,1,req,name=type,enum=or.MTAggregateRecordKey_MTAggregateRecordKeyType" json:"type,omitempty"`
	SubKey           []byte                                         `protobuf:"bytes,2,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte                                         `json:"-"`
}

func (m *MTAggregateRecordKey) Reset()                    { *m = MTAggregateRecordKey{} }
func (m *MTAggregateRecordKey) String() string            { return proto.CompactTextString(m) }
func (*MTAggregateRecordKey) ProtoMessage()               {}
func (*MTAggregateRecordKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *MTAggregateRecordKey) GetType() MTAggregateRecordKey_MTAggregateRecordKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return MTAggregateRecordKey_BUCKET_INTERMEDIATE_STAT
}

func (m *MTAggregateRecordKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type MTNamespaceAggregationThresholdSubKey struct {
	// DT Id of the DT whose upgrade status is specified by this entry
	// not really necessary this is always equal to the DT in which the entry is present
	// but adding it just to not have subkey empty
	DtId             *string `protobuf:"bytes,1,req,name=dtId" json:"dtId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTNamespaceAggregationThresholdSubKey) Reset()         { *m = MTNamespaceAggregationThresholdSubKey{} }
func (m *MTNamespaceAggregationThresholdSubKey) String() string { return proto.CompactTextString(m) }
func (*MTNamespaceAggregationThresholdSubKey) ProtoMessage()    {}
func (*MTNamespaceAggregationThresholdSubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{16}
}

func (m *MTNamespaceAggregationThresholdSubKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

type MTCheckForAggregationIssuesSubKey struct {
	// DT Id of the DT whose upgrade status is specified by this entry
	// not really necessary this is always equal to the DT in which the entry is present
	// but adding it just to not have subkey empty
	DtId             *string `protobuf:"bytes,1,req,name=dtId" json:"dtId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTCheckForAggregationIssuesSubKey) Reset()         { *m = MTCheckForAggregationIssuesSubKey{} }
func (m *MTCheckForAggregationIssuesSubKey) String() string { return proto.CompactTextString(m) }
func (*MTCheckForAggregationIssuesSubKey) ProtoMessage()    {}
func (*MTCheckForAggregationIssuesSubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{17}
}

func (m *MTCheckForAggregationIssuesSubKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

type MTBucketStatSubKey struct {
	Namespace        *string `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Bucket           *string `protobuf:"bytes,2,req,name=bucket" json:"bucket,omitempty"`
	Time             *int64  `protobuf:"varint,3,req,name=time" json:"time,omitempty"`
	DtId             *string `protobuf:"bytes,4,req,name=dtId" json:"dtId,omitempty"`
	ResourceId       *string `protobuf:"bytes,5,req,name=resourceId" json:"resourceId,omitempty"`
	Offset           *int64  `protobuf:"varint,6,opt,name=offset" json:"offset,omitempty"`
	RandomId         *string `protobuf:"bytes,7,opt,name=randomId" json:"randomId,omitempty"`
	EndOffset        *int64  `protobuf:"varint,8,opt,name=endOffset" json:"endOffset,omitempty"`
	NotCounted       *bool   `protobuf:"varint,9,opt,name=notCounted" json:"notCounted,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTBucketStatSubKey) Reset()                    { *m = MTBucketStatSubKey{} }
func (m *MTBucketStatSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTBucketStatSubKey) ProtoMessage()               {}
func (*MTBucketStatSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *MTBucketStatSubKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *MTBucketStatSubKey) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *MTBucketStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *MTBucketStatSubKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *MTBucketStatSubKey) GetResourceId() string {
	if m != nil && m.ResourceId != nil {
		return *m.ResourceId
	}
	return ""
}

func (m *MTBucketStatSubKey) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *MTBucketStatSubKey) GetRandomId() string {
	if m != nil && m.RandomId != nil {
		return *m.RandomId
	}
	return ""
}

func (m *MTBucketStatSubKey) GetEndOffset() int64 {
	if m != nil && m.EndOffset != nil {
		return *m.EndOffset
	}
	return 0
}

func (m *MTBucketStatSubKey) GetNotCounted() bool {
	if m != nil && m.NotCounted != nil {
		return *m.NotCounted
	}
	return false
}

type MTBandwidthStatSubKey struct {
	Namespace        *string `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Bucket           *string `protobuf:"bytes,2,req,name=bucket" json:"bucket,omitempty"`
	Time             *int64  `protobuf:"varint,3,req,name=time" json:"time,omitempty"`
	NodeId           *string `protobuf:"bytes,4,req,name=nodeId" json:"nodeId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTBandwidthStatSubKey) Reset()                    { *m = MTBandwidthStatSubKey{} }
func (m *MTBandwidthStatSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTBandwidthStatSubKey) ProtoMessage()               {}
func (*MTBandwidthStatSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *MTBandwidthStatSubKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *MTBandwidthStatSubKey) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *MTBandwidthStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *MTBandwidthStatSubKey) GetNodeId() string {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return ""
}

type MTBucketIntermediateStatSubKey struct {
	Namespace        *string `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Bucket           *string `protobuf:"bytes,2,req,name=bucket" json:"bucket,omitempty"`
	Time             *int64  `protobuf:"varint,3,req,name=time" json:"time,omitempty"`
	RandomId         *string `protobuf:"bytes,4,req,name=randomId" json:"randomId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTBucketIntermediateStatSubKey) Reset()                    { *m = MTBucketIntermediateStatSubKey{} }
func (m *MTBucketIntermediateStatSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTBucketIntermediateStatSubKey) ProtoMessage()               {}
func (*MTBucketIntermediateStatSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *MTBucketIntermediateStatSubKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *MTBucketIntermediateStatSubKey) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *MTBucketIntermediateStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *MTBucketIntermediateStatSubKey) GetRandomId() string {
	if m != nil && m.RandomId != nil {
		return *m.RandomId
	}
	return ""
}

type MTBucketFinalStatSubKey struct {
	Namespace        *string `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Bucket           *string `protobuf:"bytes,2,req,name=bucket" json:"bucket,omitempty"`
	Time             *int64  `protobuf:"varint,3,req,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTBucketFinalStatSubKey) Reset()                    { *m = MTBucketFinalStatSubKey{} }
func (m *MTBucketFinalStatSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTBucketFinalStatSubKey) ProtoMessage()               {}
func (*MTBucketFinalStatSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *MTBucketFinalStatSubKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *MTBucketFinalStatSubKey) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *MTBucketFinalStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type MTFixAggregateStatSubKey struct {
	Namespace        *string `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Bucket           *string `protobuf:"bytes,2,req,name=bucket" json:"bucket,omitempty"`
	Time             *int64  `protobuf:"varint,3,req,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTFixAggregateStatSubKey) Reset()                    { *m = MTFixAggregateStatSubKey{} }
func (m *MTFixAggregateStatSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTFixAggregateStatSubKey) ProtoMessage()               {}
func (*MTFixAggregateStatSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *MTFixAggregateStatSubKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *MTFixAggregateStatSubKey) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *MTFixAggregateStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type MTNamespaceIntermediateStatSubKey struct {
	Namespace        *string `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Time             *int64  `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	Bucket           *string `protobuf:"bytes,3,req,name=bucket" json:"bucket,omitempty"`
	RandomId         *string `protobuf:"bytes,4,req,name=randomId" json:"randomId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTNamespaceIntermediateStatSubKey) Reset()         { *m = MTNamespaceIntermediateStatSubKey{} }
func (m *MTNamespaceIntermediateStatSubKey) String() string { return proto.CompactTextString(m) }
func (*MTNamespaceIntermediateStatSubKey) ProtoMessage()    {}
func (*MTNamespaceIntermediateStatSubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{23}
}

func (m *MTNamespaceIntermediateStatSubKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *MTNamespaceIntermediateStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *MTNamespaceIntermediateStatSubKey) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *MTNamespaceIntermediateStatSubKey) GetRandomId() string {
	if m != nil && m.RandomId != nil {
		return *m.RandomId
	}
	return ""
}

type MTNamespaceStatSubKey struct {
	Namespace        *string `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Time             *int64  `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTNamespaceStatSubKey) Reset()                    { *m = MTNamespaceStatSubKey{} }
func (m *MTNamespaceStatSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTNamespaceStatSubKey) ProtoMessage()               {}
func (*MTNamespaceStatSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *MTNamespaceStatSubKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *MTNamespaceStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

type MTNamespaceFixAggregateStatSubKey struct {
	Namespace        *string `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Time             *int64  `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTNamespaceFixAggregateStatSubKey) Reset()         { *m = MTNamespaceFixAggregateStatSubKey{} }
func (m *MTNamespaceFixAggregateStatSubKey) String() string { return proto.CompactTextString(m) }
func (*MTNamespaceFixAggregateStatSubKey) ProtoMessage()    {}
func (*MTNamespaceFixAggregateStatSubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{25}
}

func (m *MTNamespaceFixAggregateStatSubKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *MTNamespaceFixAggregateStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// The following 2 messages don't need the zone in the key as zone associated with the index store determines the Zone
type MTNodeFinalStatSubKey struct {
	Node             *string `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`
	Time             *int64  `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTNodeFinalStatSubKey) Reset()                    { *m = MTNodeFinalStatSubKey{} }
func (m *MTNodeFinalStatSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTNodeFinalStatSubKey) ProtoMessage()               {}
func (*MTNodeFinalStatSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{26} }

func (m *MTNodeFinalStatSubKey) GetNode() string {
	if m != nil && m.Node != nil {
		return *m.Node
	}
	return ""
}

func (m *MTNodeFinalStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// made on the owner of the zone entry
type MTZoneStatSubKey struct {
	Time             *int64  `protobuf:"varint,1,req,name=time" json:"time,omitempty"`
	SecondaryKey     *string `protobuf:"bytes,3,req,name=secondaryKey" json:"secondaryKey,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTZoneStatSubKey) Reset()                    { *m = MTZoneStatSubKey{} }
func (m *MTZoneStatSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTZoneStatSubKey) ProtoMessage()               {}
func (*MTZoneStatSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{27} }

func (m *MTZoneStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *MTZoneStatSubKey) GetSecondaryKey() string {
	if m != nil && m.SecondaryKey != nil {
		return *m.SecondaryKey
	}
	return ""
}

type MTZoneFinalStatSubKey struct {
	Time             *int64 `protobuf:"varint,1,req,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MTZoneFinalStatSubKey) Reset()                    { *m = MTZoneFinalStatSubKey{} }
func (m *MTZoneFinalStatSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTZoneFinalStatSubKey) ProtoMessage()               {}
func (*MTZoneFinalStatSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{28} }

func (m *MTZoneFinalStatSubKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// the subkey will be populated in OB for metering usage
// All fields made optional to facilitate listing.
type MTObjectDeltaSubKey struct {
	Timestamp        *int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	ObjectId         *string `protobuf:"bytes,2,opt,name=objectId" json:"objectId,omitempty"`
	Sequence         *int64  `protobuf:"varint,3,opt,name=sequence" json:"sequence,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTObjectDeltaSubKey) Reset()                    { *m = MTObjectDeltaSubKey{} }
func (m *MTObjectDeltaSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTObjectDeltaSubKey) ProtoMessage()               {}
func (*MTObjectDeltaSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{29} }

func (m *MTObjectDeltaSubKey) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *MTObjectDeltaSubKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *MTObjectDeltaSubKey) GetSequence() int64 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

// the subkey will be populated in OB for metering usage
type MTAggregatedObjectDeltaSubKey struct {
	Namespace        *string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	Keypool          *string `protobuf:"bytes,2,opt,name=keypool" json:"keypool,omitempty"`
	Timestamp        *int64  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	RandomId         *string `protobuf:"bytes,4,opt,name=randomId" json:"randomId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTAggregatedObjectDeltaSubKey) Reset()                    { *m = MTAggregatedObjectDeltaSubKey{} }
func (m *MTAggregatedObjectDeltaSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTAggregatedObjectDeltaSubKey) ProtoMessage()               {}
func (*MTAggregatedObjectDeltaSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{30} }

func (m *MTAggregatedObjectDeltaSubKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *MTAggregatedObjectDeltaSubKey) GetKeypool() string {
	if m != nil && m.Keypool != nil {
		return *m.Keypool
	}
	return ""
}

func (m *MTAggregatedObjectDeltaSubKey) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *MTAggregatedObjectDeltaSubKey) GetRandomId() string {
	if m != nil && m.RandomId != nil {
		return *m.RandomId
	}
	return ""
}

type MTPosRefProcessingMarkerSubKey struct {
	DtId                 *string `protobuf:"bytes,1,req,name=dtId" json:"dtId,omitempty"`
	MajorNumberProcessed *int64  `protobuf:"varint,2,req,name=majorNumberProcessed" json:"majorNumberProcessed,omitempty"`
	XXX_unrecognized     []byte  `json:"-"`
}

func (m *MTPosRefProcessingMarkerSubKey) Reset()                    { *m = MTPosRefProcessingMarkerSubKey{} }
func (m *MTPosRefProcessingMarkerSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTPosRefProcessingMarkerSubKey) ProtoMessage()               {}
func (*MTPosRefProcessingMarkerSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{31} }

func (m *MTPosRefProcessingMarkerSubKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *MTPosRefProcessingMarkerSubKey) GetMajorNumberProcessed() int64 {
	if m != nil && m.MajorNumberProcessed != nil {
		return *m.MajorNumberProcessed
	}
	return 0
}

type MTProgressMarkerSubKey struct {
	DtId             *string `protobuf:"bytes,1,req,name=dtId" json:"dtId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTProgressMarkerSubKey) Reset()                    { *m = MTProgressMarkerSubKey{} }
func (m *MTProgressMarkerSubKey) String() string            { return proto.CompactTextString(m) }
func (*MTProgressMarkerSubKey) ProtoMessage()               {}
func (*MTProgressMarkerSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{32} }

func (m *MTProgressMarkerSubKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

type MTBlobPosStartMajorKey struct {
	DtId             *string `protobuf:"bytes,1,req,name=dtId" json:"dtId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTBlobPosStartMajorKey) Reset()                    { *m = MTBlobPosStartMajorKey{} }
func (m *MTBlobPosStartMajorKey) String() string            { return proto.CompactTextString(m) }
func (*MTBlobPosStartMajorKey) ProtoMessage()               {}
func (*MTBlobPosStartMajorKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{33} }

func (m *MTBlobPosStartMajorKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

type MTGeoMetricsNodeStatKey struct {
	Node             *string `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`
	Time             *int64  `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	Pid              *string `protobuf:"bytes,3,req,name=pid" json:"pid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTGeoMetricsNodeStatKey) Reset()                    { *m = MTGeoMetricsNodeStatKey{} }
func (m *MTGeoMetricsNodeStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTGeoMetricsNodeStatKey) ProtoMessage()               {}
func (*MTGeoMetricsNodeStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{34} }

func (m *MTGeoMetricsNodeStatKey) GetNode() string {
	if m != nil && m.Node != nil {
		return *m.Node
	}
	return ""
}

func (m *MTGeoMetricsNodeStatKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *MTGeoMetricsNodeStatKey) GetPid() string {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ""
}

type MTGeoMetricsNodeStatTrashKey struct {
	Node             *string `protobuf:"bytes,1,req,name=node" json:"node,omitempty"`
	Time             *int64  `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	Pid              *string `protobuf:"bytes,3,req,name=pid" json:"pid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTGeoMetricsNodeStatTrashKey) Reset()                    { *m = MTGeoMetricsNodeStatTrashKey{} }
func (m *MTGeoMetricsNodeStatTrashKey) String() string            { return proto.CompactTextString(m) }
func (*MTGeoMetricsNodeStatTrashKey) ProtoMessage()               {}
func (*MTGeoMetricsNodeStatTrashKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{35} }

func (m *MTGeoMetricsNodeStatTrashKey) GetNode() string {
	if m != nil && m.Node != nil {
		return *m.Node
	}
	return ""
}

func (m *MTGeoMetricsNodeStatTrashKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *MTGeoMetricsNodeStatTrashKey) GetPid() string {
	if m != nil && m.Pid != nil {
		return *m.Pid
	}
	return ""
}

type MTGeoMetricsRGFinalStatKey struct {
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	Time             *int64  `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	Zone             *string `protobuf:"bytes,3,req,name=zone" json:"zone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTGeoMetricsRGFinalStatKey) Reset()                    { *m = MTGeoMetricsRGFinalStatKey{} }
func (m *MTGeoMetricsRGFinalStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTGeoMetricsRGFinalStatKey) ProtoMessage()               {}
func (*MTGeoMetricsRGFinalStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{36} }

func (m *MTGeoMetricsRGFinalStatKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *MTGeoMetricsRGFinalStatKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *MTGeoMetricsRGFinalStatKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

type MTGeoMetricsZoneFinalStatKey struct {
	Zone             *string `protobuf:"bytes,1,req,name=zone" json:"zone,omitempty"`
	Time             *int64  `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTGeoMetricsZoneFinalStatKey) Reset()                    { *m = MTGeoMetricsZoneFinalStatKey{} }
func (m *MTGeoMetricsZoneFinalStatKey) String() string            { return proto.CompactTextString(m) }
func (*MTGeoMetricsZoneFinalStatKey) ProtoMessage()               {}
func (*MTGeoMetricsZoneFinalStatKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{37} }

func (m *MTGeoMetricsZoneFinalStatKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

func (m *MTGeoMetricsZoneFinalStatKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

// RM task related keys
type RMTaskKey struct {
	Type             *RMTaskKey_RMTaskType `protobuf:"varint,1,req,name=type,enum=or.RMTaskKey_RMTaskType" json:"type,omitempty"`
	TaskOrder        *TaskOrder            `protobuf:"bytes,2,req,name=taskOrder" json:"taskOrder,omitempty"`
	DtId             *string               `protobuf:"bytes,3,req,name=dtId" json:"dtId,omitempty"`
	SubKey           []byte                `protobuf:"bytes,4,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *RMTaskKey) Reset()                    { *m = RMTaskKey{} }
func (m *RMTaskKey) String() string            { return proto.CompactTextString(m) }
func (*RMTaskKey) ProtoMessage()               {}
func (*RMTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{38} }

func (m *RMTaskKey) GetType() RMTaskKey_RMTaskType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RMTaskKey_JOURNAL_ENTRY_GEO_SEND
}

func (m *RMTaskKey) GetTaskOrder() *TaskOrder {
	if m != nil {
		return m.TaskOrder
	}
	return nil
}

func (m *RMTaskKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *RMTaskKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type ObjectTableKey struct {
	ObjectId *string                            `protobuf:"bytes,1,req,name=objectId" json:"objectId,omitempty"`
	Type     *ObjectTableKey_ObjectTableKeyType `protobuf:"varint,2,opt,name=type,enum=or.ObjectTableKey_ObjectTableKeyType" json:"type,omitempty"`
	// update entry does not have versionId
	// index entry always has version, null version will have versionId = 0
	VersionId             *int64                                `protobuf:"varint,3,opt,name=versionId" json:"versionId,omitempty"`
	ObjectIndexKeySubType *ObjectTableKey_ObjectIndexKeySubType `protobuf:"varint,4,opt,name=objectIndexKeySubType,enum=or.ObjectTableKey_ObjectIndexKeySubType" json:"objectIndexKeySubType,omitempty"`
	// Only for range key
	Offset *int64 `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	// update sequence
	Sequence         *int64  `protobuf:"varint,6,opt,name=sequence" json:"sequence,omitempty"`
	UploadId         *string `protobuf:"bytes,7,opt,name=uploadId" json:"uploadId,omitempty"`
	PartNum          *int32  `protobuf:"varint,8,opt,name=partNum" json:"partNum,omitempty"`
	PartSeq          *int64  `protobuf:"varint,9,opt,name=partSeq" json:"partSeq,omitempty"`
	KeypoolId        *string `protobuf:"bytes,10,opt,name=keypoolId" json:"keypoolId,omitempty"`
	CrossReferenceId *string `protobuf:"bytes,11,opt,name=crossReferenceId" json:"crossReferenceId,omitempty"`
	// source chunkId if "COPY" scenario; for CROSS_REFERENCE type
	ChunkId *string `protobuf:"bytes,12,opt,name=chunkId" json:"chunkId,omitempty"`
	// IC sequence that created this index entry; only for RANGE subtype
	IndexSequence    *int64 `protobuf:"varint,13,opt,name=indexSequence" json:"indexSequence,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ObjectTableKey) Reset()                    { *m = ObjectTableKey{} }
func (m *ObjectTableKey) String() string            { return proto.CompactTextString(m) }
func (*ObjectTableKey) ProtoMessage()               {}
func (*ObjectTableKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{39} }

func (m *ObjectTableKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *ObjectTableKey) GetType() ObjectTableKey_ObjectTableKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ObjectTableKey_COMPACTION_MARKER
}

func (m *ObjectTableKey) GetVersionId() int64 {
	if m != nil && m.VersionId != nil {
		return *m.VersionId
	}
	return 0
}

func (m *ObjectTableKey) GetObjectIndexKeySubType() ObjectTableKey_ObjectIndexKeySubType {
	if m != nil && m.ObjectIndexKeySubType != nil {
		return *m.ObjectIndexKeySubType
	}
	return ObjectTableKey_HEAD_METADATA
}

func (m *ObjectTableKey) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *ObjectTableKey) GetSequence() int64 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

func (m *ObjectTableKey) GetUploadId() string {
	if m != nil && m.UploadId != nil {
		return *m.UploadId
	}
	return ""
}

func (m *ObjectTableKey) GetPartNum() int32 {
	if m != nil && m.PartNum != nil {
		return *m.PartNum
	}
	return 0
}

func (m *ObjectTableKey) GetPartSeq() int64 {
	if m != nil && m.PartSeq != nil {
		return *m.PartSeq
	}
	return 0
}

func (m *ObjectTableKey) GetKeypoolId() string {
	if m != nil && m.KeypoolId != nil {
		return *m.KeypoolId
	}
	return ""
}

func (m *ObjectTableKey) GetCrossReferenceId() string {
	if m != nil && m.CrossReferenceId != nil {
		return *m.CrossReferenceId
	}
	return ""
}

func (m *ObjectTableKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *ObjectTableKey) GetIndexSequence() int64 {
	if m != nil && m.IndexSequence != nil {
		return *m.IndexSequence
	}
	return 0
}

type RMTaskJournalEntryGeoSendKey struct {
	Major            *string `protobuf:"bytes,1,req,name=major" json:"major,omitempty"`
	DstZone          *string `protobuf:"bytes,2,req,name=dstZone" json:"dstZone,omitempty"`
	Cos              *string `protobuf:"bytes,3,req,name=cos" json:"cos,omitempty"`
	RgId             *string `protobuf:"bytes,4,req,name=rgId" json:"rgId,omitempty"`
	Minor            *string `protobuf:"bytes,5,opt,name=minor" json:"minor,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RMTaskJournalEntryGeoSendKey) Reset()                    { *m = RMTaskJournalEntryGeoSendKey{} }
func (m *RMTaskJournalEntryGeoSendKey) String() string            { return proto.CompactTextString(m) }
func (*RMTaskJournalEntryGeoSendKey) ProtoMessage()               {}
func (*RMTaskJournalEntryGeoSendKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{40} }

func (m *RMTaskJournalEntryGeoSendKey) GetMajor() string {
	if m != nil && m.Major != nil {
		return *m.Major
	}
	return ""
}

func (m *RMTaskJournalEntryGeoSendKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

func (m *RMTaskJournalEntryGeoSendKey) GetCos() string {
	if m != nil && m.Cos != nil {
		return *m.Cos
	}
	return ""
}

func (m *RMTaskJournalEntryGeoSendKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *RMTaskJournalEntryGeoSendKey) GetMinor() string {
	if m != nil && m.Minor != nil {
		return *m.Minor
	}
	return ""
}

type RMTaskRecoveryPointSendKey struct {
	FailedZone       *string `protobuf:"bytes,1,req,name=failedZone" json:"failedZone,omitempty"`
	Cos              *string `protobuf:"bytes,2,req,name=cos" json:"cos,omitempty"`
	RgId             *string `protobuf:"bytes,3,req,name=rgId" json:"rgId,omitempty"`
	DstZone          *string `protobuf:"bytes,4,req,name=dstZone" json:"dstZone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RMTaskRecoveryPointSendKey) Reset()                    { *m = RMTaskRecoveryPointSendKey{} }
func (m *RMTaskRecoveryPointSendKey) String() string            { return proto.CompactTextString(m) }
func (*RMTaskRecoveryPointSendKey) ProtoMessage()               {}
func (*RMTaskRecoveryPointSendKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{41} }

func (m *RMTaskRecoveryPointSendKey) GetFailedZone() string {
	if m != nil && m.FailedZone != nil {
		return *m.FailedZone
	}
	return ""
}

func (m *RMTaskRecoveryPointSendKey) GetCos() string {
	if m != nil && m.Cos != nil {
		return *m.Cos
	}
	return ""
}

func (m *RMTaskRecoveryPointSendKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *RMTaskRecoveryPointSendKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

// SSM realted keys
type SSTableRecordKey struct {
	Type             *SSTableRecordKey_Type `protobuf:"varint,1,req,name=type,enum=or.SSTableRecordKey_Type" json:"type,omitempty"`
	SubKey           []byte                 `protobuf:"bytes,2,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *SSTableRecordKey) Reset()                    { *m = SSTableRecordKey{} }
func (m *SSTableRecordKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableRecordKey) ProtoMessage()               {}
func (*SSTableRecordKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{42} }

func (m *SSTableRecordKey) GetType() SSTableRecordKey_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SSTableRecordKey_FREE_BLOCK
}

func (m *SSTableRecordKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type SSTableDeviceEntryKey struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSTableDeviceEntryKey) Reset()                    { *m = SSTableDeviceEntryKey{} }
func (m *SSTableDeviceEntryKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableDeviceEntryKey) ProtoMessage()               {}
func (*SSTableDeviceEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{43} }

func (m *SSTableDeviceEntryKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

type SSTablePartitionEntryKey struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	PartitionId      *string `protobuf:"bytes,2,req,name=partitionId" json:"partitionId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSTablePartitionEntryKey) Reset()                    { *m = SSTablePartitionEntryKey{} }
func (m *SSTablePartitionEntryKey) String() string            { return proto.CompactTextString(m) }
func (*SSTablePartitionEntryKey) ProtoMessage()               {}
func (*SSTablePartitionEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{44} }

func (m *SSTablePartitionEntryKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *SSTablePartitionEntryKey) GetPartitionId() string {
	if m != nil && m.PartitionId != nil {
		return *m.PartitionId
	}
	return ""
}

type SSTableFreeBlockEntryKey struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	PartitionId      *string `protobuf:"bytes,2,req,name=partitionId" json:"partitionId,omitempty"`
	BlockBinId       *string `protobuf:"bytes,3,req,name=blockBinId" json:"blockBinId,omitempty"`
	Offset           *int64  `protobuf:"varint,4,req,name=offset" json:"offset,omitempty"`
	FreedTime        *int64  `protobuf:"varint,5,opt,name=freedTime" json:"freedTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSTableFreeBlockEntryKey) Reset()                    { *m = SSTableFreeBlockEntryKey{} }
func (m *SSTableFreeBlockEntryKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableFreeBlockEntryKey) ProtoMessage()               {}
func (*SSTableFreeBlockEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{45} }

func (m *SSTableFreeBlockEntryKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *SSTableFreeBlockEntryKey) GetPartitionId() string {
	if m != nil && m.PartitionId != nil {
		return *m.PartitionId
	}
	return ""
}

func (m *SSTableFreeBlockEntryKey) GetBlockBinId() string {
	if m != nil && m.BlockBinId != nil {
		return *m.BlockBinId
	}
	return ""
}

func (m *SSTableFreeBlockEntryKey) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

func (m *SSTableFreeBlockEntryKey) GetFreedTime() int64 {
	if m != nil && m.FreedTime != nil {
		return *m.FreedTime
	}
	return 0
}

type SSTableBusyBlockEntryKey struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	PartitionId      *string `protobuf:"bytes,2,req,name=partitionId" json:"partitionId,omitempty"`
	BlockBinId       *string `protobuf:"bytes,3,req,name=blockBinId" json:"blockBinId,omitempty"`
	Offset           *int64  `protobuf:"varint,4,req,name=offset" json:"offset,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSTableBusyBlockEntryKey) Reset()                    { *m = SSTableBusyBlockEntryKey{} }
func (m *SSTableBusyBlockEntryKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableBusyBlockEntryKey) ProtoMessage()               {}
func (*SSTableBusyBlockEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{46} }

func (m *SSTableBusyBlockEntryKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *SSTableBusyBlockEntryKey) GetPartitionId() string {
	if m != nil && m.PartitionId != nil {
		return *m.PartitionId
	}
	return ""
}

func (m *SSTableBusyBlockEntryKey) GetBlockBinId() string {
	if m != nil && m.BlockBinId != nil {
		return *m.BlockBinId
	}
	return ""
}

func (m *SSTableBusyBlockEntryKey) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

type SSTableBlockBinEntryKey struct {
	DeviceId         *string `protobuf:"bytes,1,req,name=deviceId" json:"deviceId,omitempty"`
	PartitionId      *string `protobuf:"bytes,2,req,name=partitionId" json:"partitionId,omitempty"`
	BlockBinId       *string `protobuf:"bytes,3,req,name=blockBinId" json:"blockBinId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SSTableBlockBinEntryKey) Reset()                    { *m = SSTableBlockBinEntryKey{} }
func (m *SSTableBlockBinEntryKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableBlockBinEntryKey) ProtoMessage()               {}
func (*SSTableBlockBinEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{47} }

func (m *SSTableBlockBinEntryKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *SSTableBlockBinEntryKey) GetPartitionId() string {
	if m != nil && m.PartitionId != nil {
		return *m.PartitionId
	}
	return ""
}

func (m *SSTableBlockBinEntryKey) GetBlockBinId() string {
	if m != nil && m.BlockBinId != nil {
		return *m.BlockBinId
	}
	return ""
}

type SSTableBlockLevelTaskKey struct {
	Type             *SSTableBlockLevelTaskKey_Type `protobuf:"varint,1,req,name=type,enum=or.SSTableBlockLevelTaskKey_Type" json:"type,omitempty"`
	DeviceId         *string                        `protobuf:"bytes,2,req,name=deviceId" json:"deviceId,omitempty"`
	PartitionId      *string                        `protobuf:"bytes,3,req,name=partitionId" json:"partitionId,omitempty"`
	BlockBinId       *string                        `protobuf:"bytes,4,req,name=blockBinId" json:"blockBinId,omitempty"`
	Offset           *int64                         `protobuf:"varint,5,req,name=offset" json:"offset,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *SSTableBlockLevelTaskKey) Reset()                    { *m = SSTableBlockLevelTaskKey{} }
func (m *SSTableBlockLevelTaskKey) String() string            { return proto.CompactTextString(m) }
func (*SSTableBlockLevelTaskKey) ProtoMessage()               {}
func (*SSTableBlockLevelTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{48} }

func (m *SSTableBlockLevelTaskKey) GetType() SSTableBlockLevelTaskKey_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return SSTableBlockLevelTaskKey_BLOCK_ALLOCATE_TASK
}

func (m *SSTableBlockLevelTaskKey) GetDeviceId() string {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return ""
}

func (m *SSTableBlockLevelTaskKey) GetPartitionId() string {
	if m != nil && m.PartitionId != nil {
		return *m.PartitionId
	}
	return ""
}

func (m *SSTableBlockLevelTaskKey) GetBlockBinId() string {
	if m != nil && m.BlockBinId != nil {
		return *m.BlockBinId
	}
	return ""
}

func (m *SSTableBlockLevelTaskKey) GetOffset() int64 {
	if m != nil && m.Offset != nil {
		return *m.Offset
	}
	return 0
}

type DTBootstrapTaskKey struct {
	Type             *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	RgId             *string `protobuf:"bytes,2,req,name=rgId" json:"rgId,omitempty"`
	Cos              *string `protobuf:"bytes,3,req,name=cos" json:"cos,omitempty"`
	DstZone          *string `protobuf:"bytes,4,req,name=dstZone" json:"dstZone,omitempty"`
	DtId             *string `protobuf:"bytes,5,req,name=dtId" json:"dtId,omitempty"`
	SrcZone          *string `protobuf:"bytes,6,req,name=srcZone" json:"srcZone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DTBootstrapTaskKey) Reset()                    { *m = DTBootstrapTaskKey{} }
func (m *DTBootstrapTaskKey) String() string            { return proto.CompactTextString(m) }
func (*DTBootstrapTaskKey) ProtoMessage()               {}
func (*DTBootstrapTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{49} }

func (m *DTBootstrapTaskKey) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *DTBootstrapTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *DTBootstrapTaskKey) GetCos() string {
	if m != nil && m.Cos != nil {
		return *m.Cos
	}
	return ""
}

func (m *DTBootstrapTaskKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

func (m *DTBootstrapTaskKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *DTBootstrapTaskKey) GetSrcZone() string {
	if m != nil && m.SrcZone != nil {
		return *m.SrcZone
	}
	return ""
}

type GCRefCollectionKey struct {
	Type *GCRefCollectionKey_GCRefType `protobuf:"varint,1,req,name=type,enum=or.GCRefCollectionKey_GCRefType" json:"type,omitempty"`
	// chunk table id
	CtId *string `protobuf:"bytes,2,req,name=ctId" json:"ctId,omitempty"`
	Zone *string `protobuf:"bytes,3,req,name=zone" json:"zone,omitempty"`
	RgId *string `protobuf:"bytes,4,req,name=rgId" json:"rgId,omitempty"`
	// OB table id
	ObId             *string `protobuf:"bytes,5,req,name=obId" json:"obId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GCRefCollectionKey) Reset()                    { *m = GCRefCollectionKey{} }
func (m *GCRefCollectionKey) String() string            { return proto.CompactTextString(m) }
func (*GCRefCollectionKey) ProtoMessage()               {}
func (*GCRefCollectionKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{50} }

func (m *GCRefCollectionKey) GetType() GCRefCollectionKey_GCRefType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return GCRefCollectionKey_REPO
}

func (m *GCRefCollectionKey) GetCtId() string {
	if m != nil && m.CtId != nil {
		return *m.CtId
	}
	return ""
}

func (m *GCRefCollectionKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

func (m *GCRefCollectionKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *GCRefCollectionKey) GetObId() string {
	if m != nil && m.ObId != nil {
		return *m.ObId
	}
	return ""
}

type ChunkTagKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChunkTagKey) Reset()                    { *m = ChunkTagKey{} }
func (m *ChunkTagKey) String() string            { return proto.CompactTextString(m) }
func (*ChunkTagKey) ProtoMessage()               {}
func (*ChunkTagKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{51} }

func (m *ChunkTagKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

type ChunkKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChunkKey) Reset()                    { *m = ChunkKey{} }
func (m *ChunkKey) String() string            { return proto.CompactTextString(m) }
func (*ChunkKey) ProtoMessage()               {}
func (*ChunkKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{52} }

func (m *ChunkKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

type RepoChunkGarbageInfoKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RepoChunkGarbageInfoKey) Reset()                    { *m = RepoChunkGarbageInfoKey{} }
func (m *RepoChunkGarbageInfoKey) String() string            { return proto.CompactTextString(m) }
func (*RepoChunkGarbageInfoKey) ProtoMessage()               {}
func (*RepoChunkGarbageInfoKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{53} }

func (m *RepoChunkGarbageInfoKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

type CMTaskKey struct {
	Type      *CMTaskKey_CMTaskType `protobuf:"varint,1,req,name=type,enum=or.CMTaskKey_CMTaskType" json:"type,omitempty"`
	TaskOrder *TaskOrder            `protobuf:"bytes,2,req,name=taskOrder" json:"taskOrder,omitempty"`
	ChunkId   *string               `protobuf:"bytes,3,req,name=chunkId" json:"chunkId,omitempty"`
	// extended part for each detailed task, just a simple manual GPB extension
	SubKey           []byte `protobuf:"bytes,4,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMTaskKey) Reset()                    { *m = CMTaskKey{} }
func (m *CMTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMTaskKey) ProtoMessage()               {}
func (*CMTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{54} }

func (m *CMTaskKey) GetType() CMTaskKey_CMTaskType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMTaskKey_SEAL
}

func (m *CMTaskKey) GetTaskOrder() *TaskOrder {
	if m != nil {
		return m.TaskOrder
	}
	return nil
}

func (m *CMTaskKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *CMTaskKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type BTreeReclaimProgress struct {
	Checkpoint       *CMTaskKey `protobuf:"bytes,1,opt,name=checkpoint" json:"checkpoint,omitempty"`
	Timestamp        *uint64    `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	IsComplete       *bool      `protobuf:"varint,3,opt,name=isComplete" json:"isComplete,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *BTreeReclaimProgress) Reset()                    { *m = BTreeReclaimProgress{} }
func (m *BTreeReclaimProgress) String() string            { return proto.CompactTextString(m) }
func (*BTreeReclaimProgress) ProtoMessage()               {}
func (*BTreeReclaimProgress) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{55} }

func (m *BTreeReclaimProgress) GetCheckpoint() *CMTaskKey {
	if m != nil {
		return m.Checkpoint
	}
	return nil
}

func (m *BTreeReclaimProgress) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *BTreeReclaimProgress) GetIsComplete() bool {
	if m != nil && m.IsComplete != nil {
		return *m.IsComplete
	}
	return false
}

type CMTaskProgress struct {
	Status           *CMTaskProgress_TaskStatus `protobuf:"varint,1,req,name=status,enum=or.CMTaskProgress_TaskStatus" json:"status,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *CMTaskProgress) Reset()                    { *m = CMTaskProgress{} }
func (m *CMTaskProgress) String() string            { return proto.CompactTextString(m) }
func (*CMTaskProgress) ProtoMessage()               {}
func (*CMTaskProgress) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{56} }

func (m *CMTaskProgress) GetStatus() CMTaskProgress_TaskStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return CMTaskProgress_Pending
}

type CMEcTaskKey struct {
	ChunkType        *CMEcTaskKey_ChunkType `protobuf:"varint,1,opt,name=chunkType,enum=or.CMEcTaskKey_ChunkType" json:"chunkType,omitempty"`
	IsTrackProgress  *bool                  `protobuf:"varint,2,opt,name=isTrackProgress" json:"isTrackProgress,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *CMEcTaskKey) Reset()                    { *m = CMEcTaskKey{} }
func (m *CMEcTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMEcTaskKey) ProtoMessage()               {}
func (*CMEcTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{57} }

func (m *CMEcTaskKey) GetChunkType() CMEcTaskKey_ChunkType {
	if m != nil && m.ChunkType != nil {
		return *m.ChunkType
	}
	return CMEcTaskKey_LOCAL
}

func (m *CMEcTaskKey) GetIsTrackProgress() bool {
	if m != nil && m.IsTrackProgress != nil {
		return *m.IsTrackProgress
	}
	return false
}

type CMGeoInfoSendTaskKey struct {
	// dest zone precedes order and chunk id in comparing
	DestZone   *string                          `protobuf:"bytes,1,req,name=destZone" json:"destZone,omitempty"`
	Cos        *string                          `protobuf:"bytes,2,req,name=cos" json:"cos,omitempty"`
	RgId       *string                          `protobuf:"bytes,3,req,name=rgId" json:"rgId,omitempty"`
	UpdateType *CMGeoInfoSendTaskKey_UpdateType `protobuf:"varint,4,req,name=updateType,enum=or.CMGeoInfoSendTaskKey_UpdateType" json:"updateType,omitempty"`
	// secondary zone
	Secondary    *string `protobuf:"bytes,5,req,name=secondary" json:"secondary,omitempty"`
	IsReplicated *bool   `protobuf:"varint,6,req,name=isReplicated" json:"isReplicated,omitempty"`
	SealedLength *int32  `protobuf:"varint,7,opt,name=sealedLength" json:"sealedLength,omitempty"`
	Capacity     *int32  `protobuf:"varint,8,opt,name=capacity,def=-1" json:"capacity,omitempty"`
	// Failover zone attribute will be added to chunk info when full replication flag
	// for the RG is enable. In case of full rep, we have 1 LOCAL chunk and rest of them
	// are COPY. When the LOCAL goes down, the VDC which is the failoverZone will take
	// ownership and will be promoted to local. When the failoverZone itself goes down
	// the LOCAL will elect a new failover zone and set it on ChunkInfo.
	FailoverZone     *string `protobuf:"bytes,9,opt,name=failoverZone" json:"failoverZone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMGeoInfoSendTaskKey) Reset()                    { *m = CMGeoInfoSendTaskKey{} }
func (m *CMGeoInfoSendTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMGeoInfoSendTaskKey) ProtoMessage()               {}
func (*CMGeoInfoSendTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{58} }

const Default_CMGeoInfoSendTaskKey_Capacity int32 = -1

func (m *CMGeoInfoSendTaskKey) GetDestZone() string {
	if m != nil && m.DestZone != nil {
		return *m.DestZone
	}
	return ""
}

func (m *CMGeoInfoSendTaskKey) GetCos() string {
	if m != nil && m.Cos != nil {
		return *m.Cos
	}
	return ""
}

func (m *CMGeoInfoSendTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *CMGeoInfoSendTaskKey) GetUpdateType() CMGeoInfoSendTaskKey_UpdateType {
	if m != nil && m.UpdateType != nil {
		return *m.UpdateType
	}
	return CMGeoInfoSendTaskKey_CREATE
}

func (m *CMGeoInfoSendTaskKey) GetSecondary() string {
	if m != nil && m.Secondary != nil {
		return *m.Secondary
	}
	return ""
}

func (m *CMGeoInfoSendTaskKey) GetIsReplicated() bool {
	if m != nil && m.IsReplicated != nil {
		return *m.IsReplicated
	}
	return false
}

func (m *CMGeoInfoSendTaskKey) GetSealedLength() int32 {
	if m != nil && m.SealedLength != nil {
		return *m.SealedLength
	}
	return 0
}

func (m *CMGeoInfoSendTaskKey) GetCapacity() int32 {
	if m != nil && m.Capacity != nil {
		return *m.Capacity
	}
	return Default_CMGeoInfoSendTaskKey_Capacity
}

func (m *CMGeoInfoSendTaskKey) GetFailoverZone() string {
	if m != nil && m.FailoverZone != nil {
		return *m.FailoverZone
	}
	return ""
}

// Previously variables of this message were used as part of CMGeoDataSendTaskKey
// for accounting geo replication stats.
// With unsealed geo stats implementation it was suggested to use this in value
// part of task, so that it does not pollute CMGeoDataSendTrackerTaskIndexKey
type CMGeoDataSendTaskValue struct {
	Purpose             *GeoDataSendPurpose `protobuf:"varint,1,opt,name=purpose,enum=or.GeoDataSendPurpose" json:"purpose,omitempty"`
	StatsAccountingZone *string             `protobuf:"bytes,2,opt,name=statsAccountingZone" json:"statsAccountingZone,omitempty"`
	XXX_unrecognized    []byte              `json:"-"`
}

func (m *CMGeoDataSendTaskValue) Reset()                    { *m = CMGeoDataSendTaskValue{} }
func (m *CMGeoDataSendTaskValue) String() string            { return proto.CompactTextString(m) }
func (*CMGeoDataSendTaskValue) ProtoMessage()               {}
func (*CMGeoDataSendTaskValue) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{59} }

func (m *CMGeoDataSendTaskValue) GetPurpose() GeoDataSendPurpose {
	if m != nil && m.Purpose != nil {
		return *m.Purpose
	}
	return GeoDataSendPurpose_NONE
}

func (m *CMGeoDataSendTaskValue) GetStatsAccountingZone() string {
	if m != nil && m.StatsAccountingZone != nil {
		return *m.StatsAccountingZone
	}
	return ""
}

type CMGeoDataSendTaskKey struct {
	Secondary           *string             `protobuf:"bytes,1,req,name=secondary" json:"secondary,omitempty"`
	Purpose             *GeoDataSendPurpose `protobuf:"varint,2,opt,name=purpose,enum=or.GeoDataSendPurpose" json:"purpose,omitempty"`
	StatsAccountingZone *string             `protobuf:"bytes,3,opt,name=statsAccountingZone" json:"statsAccountingZone,omitempty"`
	XXX_unrecognized    []byte              `json:"-"`
}

func (m *CMGeoDataSendTaskKey) Reset()                    { *m = CMGeoDataSendTaskKey{} }
func (m *CMGeoDataSendTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMGeoDataSendTaskKey) ProtoMessage()               {}
func (*CMGeoDataSendTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{60} }

func (m *CMGeoDataSendTaskKey) GetSecondary() string {
	if m != nil && m.Secondary != nil {
		return *m.Secondary
	}
	return ""
}

func (m *CMGeoDataSendTaskKey) GetPurpose() GeoDataSendPurpose {
	if m != nil && m.Purpose != nil {
		return *m.Purpose
	}
	return GeoDataSendPurpose_NONE
}

func (m *CMGeoDataSendTaskKey) GetStatsAccountingZone() string {
	if m != nil && m.StatsAccountingZone != nil {
		return *m.StatsAccountingZone
	}
	return ""
}

type CMGeoCopyTaskKey struct {
	OpId             *string `protobuf:"bytes,1,req,name=opId" json:"opId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMGeoCopyTaskKey) Reset()                    { *m = CMGeoCopyTaskKey{} }
func (m *CMGeoCopyTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMGeoCopyTaskKey) ProtoMessage()               {}
func (*CMGeoCopyTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{61} }

func (m *CMGeoCopyTaskKey) GetOpId() string {
	if m != nil && m.OpId != nil {
		return *m.OpId
	}
	return ""
}

type CMXorGroupTaskKey struct {
	// rgId and primary precede order and chunk id in comparing
	RgId *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	// primary zone
	Primary          *string `protobuf:"bytes,2,req,name=primary" json:"primary,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMXorGroupTaskKey) Reset()                    { *m = CMXorGroupTaskKey{} }
func (m *CMXorGroupTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMXorGroupTaskKey) ProtoMessage()               {}
func (*CMXorGroupTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{62} }

func (m *CMXorGroupTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *CMXorGroupTaskKey) GetPrimary() string {
	if m != nil && m.Primary != nil {
		return *m.Primary
	}
	return ""
}

type CMXorEncodeTaskKey struct {
	// rgId precedes order and chunk id in comparing
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMXorEncodeTaskKey) Reset()                    { *m = CMXorEncodeTaskKey{} }
func (m *CMXorEncodeTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMXorEncodeTaskKey) ProtoMessage()               {}
func (*CMXorEncodeTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{63} }

func (m *CMXorEncodeTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

// keep the XOR encode and decode as two separate ones,
// so it is free to add field in one without impact the other
type CMXorDecodeTaskKey struct {
	// rgId precedes order and chunk id in comparing
	RgId                *string             `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	Purpose             *GeoDataSendPurpose `protobuf:"varint,2,opt,name=purpose,enum=or.GeoDataSendPurpose" json:"purpose,omitempty"`
	StatsAccountingZone *string             `protobuf:"bytes,3,opt,name=statsAccountingZone" json:"statsAccountingZone,omitempty"`
	XXX_unrecognized    []byte              `json:"-"`
}

func (m *CMXorDecodeTaskKey) Reset()                    { *m = CMXorDecodeTaskKey{} }
func (m *CMXorDecodeTaskKey) String() string            { return proto.CompactTextString(m) }
func (*CMXorDecodeTaskKey) ProtoMessage()               {}
func (*CMXorDecodeTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{64} }

func (m *CMXorDecodeTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *CMXorDecodeTaskKey) GetPurpose() GeoDataSendPurpose {
	if m != nil && m.Purpose != nil {
		return *m.Purpose
	}
	return GeoDataSendPurpose_NONE
}

func (m *CMXorDecodeTaskKey) GetStatsAccountingZone() string {
	if m != nil && m.StatsAccountingZone != nil {
		return *m.StatsAccountingZone
	}
	return ""
}

type CMJobKey struct {
	ChunkId          *string             `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	Type             *CMJobKey_CMJobType `protobuf:"varint,2,req,name=type,enum=or.CMJobKey_CMJobType" json:"type,omitempty"`
	JobId            *string             `protobuf:"bytes,3,req,name=jobId" json:"jobId,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *CMJobKey) Reset()                    { *m = CMJobKey{} }
func (m *CMJobKey) String() string            { return proto.CompactTextString(m) }
func (*CMJobKey) ProtoMessage()               {}
func (*CMJobKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{65} }

func (m *CMJobKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *CMJobKey) GetType() CMJobKey_CMJobType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMJobKey_ALL
}

func (m *CMJobKey) GetJobId() string {
	if m != nil && m.JobId != nil {
		return *m.JobId
	}
	return ""
}

type CMProgressKey struct {
	Type             *CMProgressKey_CMProgressType `protobuf:"varint,1,req,name=type,enum=or.CMProgressKey_CMProgressType" json:"type,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CMProgressKey) Reset()                    { *m = CMProgressKey{} }
func (m *CMProgressKey) String() string            { return proto.CompactTextString(m) }
func (*CMProgressKey) ProtoMessage()               {}
func (*CMProgressKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{66} }

func (m *CMProgressKey) GetType() CMProgressKey_CMProgressType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return CMProgressKey_CC
}

type ChunkSequenceKey struct {
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	DataType         *string `protobuf:"bytes,2,opt,name=dataType" json:"dataType,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChunkSequenceKey) Reset()                    { *m = ChunkSequenceKey{} }
func (m *ChunkSequenceKey) String() string            { return proto.CompactTextString(m) }
func (*ChunkSequenceKey) ProtoMessage()               {}
func (*ChunkSequenceKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{67} }

func (m *ChunkSequenceKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *ChunkSequenceKey) GetDataType() string {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return ""
}

type RgReconfigTaskKey struct {
	RgId             *string                         `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	Type             *RgReconfigTaskKey_ReconfigType `protobuf:"varint,2,req,name=type,enum=or.RgReconfigTaskKey_ReconfigType" json:"type,omitempty"`
	Zone             *string                         `protobuf:"bytes,3,req,name=zone" json:"zone,omitempty"`
	DtId             *string                         `protobuf:"bytes,4,req,name=dtId" json:"dtId,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *RgReconfigTaskKey) Reset()                    { *m = RgReconfigTaskKey{} }
func (m *RgReconfigTaskKey) String() string            { return proto.CompactTextString(m) }
func (*RgReconfigTaskKey) ProtoMessage()               {}
func (*RgReconfigTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{68} }

func (m *RgReconfigTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *RgReconfigTaskKey) GetType() RgReconfigTaskKey_ReconfigType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RgReconfigTaskKey_ALL
}

func (m *RgReconfigTaskKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

func (m *RgReconfigTaskKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

// the keypool/namespace listing entry
type ListEntryKey struct {
	Type             *ListEntryKey_ListEntryType `protobuf:"varint,1,req,name=type,enum=or.ListEntryKey_ListEntryType" json:"type,omitempty"`
	Parent           *string                     `protobuf:"bytes,2,req,name=parent" json:"parent,omitempty"`
	Child            *string                     `protobuf:"bytes,3,req,name=child" json:"child,omitempty"`
	SingleOwner      *bool                       `protobuf:"varint,4,opt,name=singleOwner,def=0" json:"singleOwner,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *ListEntryKey) Reset()                    { *m = ListEntryKey{} }
func (m *ListEntryKey) String() string            { return proto.CompactTextString(m) }
func (*ListEntryKey) ProtoMessage()               {}
func (*ListEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{69} }

const Default_ListEntryKey_SingleOwner bool = false

func (m *ListEntryKey) GetType() ListEntryKey_ListEntryType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ListEntryKey_KEYPOOL
}

func (m *ListEntryKey) GetParent() string {
	if m != nil && m.Parent != nil {
		return *m.Parent
	}
	return ""
}

func (m *ListEntryKey) GetChild() string {
	if m != nil && m.Child != nil {
		return *m.Child
	}
	return ""
}

func (m *ListEntryKey) GetSingleOwner() bool {
	if m != nil && m.SingleOwner != nil {
		return *m.SingleOwner
	}
	return Default_ListEntryKey_SingleOwner
}

type DeleteJobTableKey struct {
	Type *DeleteJobTableKey_DeleteJobTableKeyType `protobuf:"varint,1,req,name=type,enum=or.DeleteJobTableKey_DeleteJobTableKeyType" json:"type,omitempty"`
	// Time at which the job should be run
	ExpireTime *int64 `protobuf:"varint,2,req,name=expireTime" json:"expireTime,omitempty"`
	// For delete job
	ObjectId *string `protobuf:"bytes,3,opt,name=objectId" json:"objectId,omitempty"`
	// For cleanup job
	ObjectKey *ObjectTableKey `protobuf:"bytes,4,opt,name=objectKey" json:"objectKey,omitempty"`
	// For delete list entry job
	KeypoolId *string `protobuf:"bytes,5,opt,name=keypoolId" json:"keypoolId,omitempty"`
	// For delete list entry job
	KeyName    *string                           `protobuf:"bytes,6,opt,name=keyName" json:"keyName,omitempty"`
	KeyVersion *DeleteJobTableKey_KeyVersionType `protobuf:"varint,7,opt,name=keyVersion,enum=or.DeleteJobTableKey_KeyVersionType" json:"keyVersion,omitempty"`
	// for clean up update entries
	VersionId *string `protobuf:"bytes,8,opt,name=versionId" json:"versionId,omitempty"`
	// the IC sequence that creates this task.
	// present for delete list entry job and cleanup job
	IndexSequence *int64 `protobuf:"varint,9,opt,name=indexSequence" json:"indexSequence,omitempty"`
	// For delete list entry job
	KeypoolFullName  *string `protobuf:"bytes,10,opt,name=keypoolFullName" json:"keypoolFullName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeleteJobTableKey) Reset()                    { *m = DeleteJobTableKey{} }
func (m *DeleteJobTableKey) String() string            { return proto.CompactTextString(m) }
func (*DeleteJobTableKey) ProtoMessage()               {}
func (*DeleteJobTableKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{70} }

func (m *DeleteJobTableKey) GetType() DeleteJobTableKey_DeleteJobTableKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DeleteJobTableKey_DELETE_JOB
}

func (m *DeleteJobTableKey) GetExpireTime() int64 {
	if m != nil && m.ExpireTime != nil {
		return *m.ExpireTime
	}
	return 0
}

func (m *DeleteJobTableKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *DeleteJobTableKey) GetObjectKey() *ObjectTableKey {
	if m != nil {
		return m.ObjectKey
	}
	return nil
}

func (m *DeleteJobTableKey) GetKeypoolId() string {
	if m != nil && m.KeypoolId != nil {
		return *m.KeypoolId
	}
	return ""
}

func (m *DeleteJobTableKey) GetKeyName() string {
	if m != nil && m.KeyName != nil {
		return *m.KeyName
	}
	return ""
}

func (m *DeleteJobTableKey) GetKeyVersion() DeleteJobTableKey_KeyVersionType {
	if m != nil && m.KeyVersion != nil {
		return *m.KeyVersion
	}
	return DeleteJobTableKey_version22
}

func (m *DeleteJobTableKey) GetVersionId() string {
	if m != nil && m.VersionId != nil {
		return *m.VersionId
	}
	return ""
}

func (m *DeleteJobTableKey) GetIndexSequence() int64 {
	if m != nil && m.IndexSequence != nil {
		return *m.IndexSequence
	}
	return 0
}

func (m *DeleteJobTableKey) GetKeypoolFullName() string {
	if m != nil && m.KeypoolFullName != nil {
		return *m.KeypoolFullName
	}
	return ""
}

type ReconcileTaskKey struct {
	ObjectId *string `protobuf:"bytes,1,req,name=objectId" json:"objectId,omitempty"`
	// start sequence of conflict range (inclusive),
	// use -1 for listing
	StartSequence *int64 `protobuf:"varint,2,req,name=startSequence" json:"startSequence,omitempty"`
	// end sequence of conflict range (exclusive),
	// use -1 for listing
	EndSequence      *int64 `protobuf:"varint,3,req,name=endSequence" json:"endSequence,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ReconcileTaskKey) Reset()                    { *m = ReconcileTaskKey{} }
func (m *ReconcileTaskKey) String() string            { return proto.CompactTextString(m) }
func (*ReconcileTaskKey) ProtoMessage()               {}
func (*ReconcileTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{71} }

func (m *ReconcileTaskKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *ReconcileTaskKey) GetStartSequence() int64 {
	if m != nil && m.StartSequence != nil {
		return *m.StartSequence
	}
	return 0
}

func (m *ReconcileTaskKey) GetEndSequence() int64 {
	if m != nil && m.EndSequence != nil {
		return *m.EndSequence
	}
	return 0
}

type BtreeReferenceKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	DtId             *string `protobuf:"bytes,2,req,name=dtId" json:"dtId,omitempty"`
	Zone             *string `protobuf:"bytes,3,opt,name=zone" json:"zone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BtreeReferenceKey) Reset()                    { *m = BtreeReferenceKey{} }
func (m *BtreeReferenceKey) String() string            { return proto.CompactTextString(m) }
func (*BtreeReferenceKey) ProtoMessage()               {}
func (*BtreeReferenceKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{72} }

func (m *BtreeReferenceKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *BtreeReferenceKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *BtreeReferenceKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

type RepoReferenceKey struct {
	ChunkId        *string                         `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	Type           *RepoReferenceKey_ReferenceType `protobuf:"varint,2,req,name=type,enum=or.RepoReferenceKey_ReferenceType" json:"type,omitempty"`
	CrossType      *RepoReferenceKey_CrossType     `protobuf:"varint,3,req,name=crossType,enum=or.RepoReferenceKey_CrossType" json:"crossType,omitempty"`
	ObjectId       *string                         `protobuf:"bytes,4,req,name=objectId" json:"objectId,omitempty"`
	VersionId      *string                         `protobuf:"bytes,5,req,name=versionId" json:"versionId,omitempty"`
	PhysicalOffset *int64                          `protobuf:"varint,6,req,name=physicalOffset" json:"physicalOffset,omitempty"`
	PhysicalLength *int64                          `protobuf:"varint,7,req,name=physicalLength" json:"physicalLength,omitempty"`
	LogicalOffset  *int64                          `protobuf:"varint,8,req,name=logicalOffset" json:"logicalOffset,omitempty"`
	LogicalLength  *int64                          `protobuf:"varint,9,req,name=logicalLength" json:"logicalLength,omitempty"`
	OffsetInObject *int64                          `protobuf:"varint,10,opt,name=offsetInObject" json:"offsetInObject,omitempty"`
	// used by cross reference, if true
	// cross reference scanner needs to update offsetInObject
	IsAppend         *bool  `protobuf:"varint,11,opt,name=isAppend" json:"isAppend,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *RepoReferenceKey) Reset()                    { *m = RepoReferenceKey{} }
func (m *RepoReferenceKey) String() string            { return proto.CompactTextString(m) }
func (*RepoReferenceKey) ProtoMessage()               {}
func (*RepoReferenceKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{73} }

func (m *RepoReferenceKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *RepoReferenceKey) GetType() RepoReferenceKey_ReferenceType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RepoReferenceKey_ALL
}

func (m *RepoReferenceKey) GetCrossType() RepoReferenceKey_CrossType {
	if m != nil && m.CrossType != nil {
		return *m.CrossType
	}
	return RepoReferenceKey_ANY
}

func (m *RepoReferenceKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *RepoReferenceKey) GetVersionId() string {
	if m != nil && m.VersionId != nil {
		return *m.VersionId
	}
	return ""
}

func (m *RepoReferenceKey) GetPhysicalOffset() int64 {
	if m != nil && m.PhysicalOffset != nil {
		return *m.PhysicalOffset
	}
	return 0
}

func (m *RepoReferenceKey) GetPhysicalLength() int64 {
	if m != nil && m.PhysicalLength != nil {
		return *m.PhysicalLength
	}
	return 0
}

func (m *RepoReferenceKey) GetLogicalOffset() int64 {
	if m != nil && m.LogicalOffset != nil {
		return *m.LogicalOffset
	}
	return 0
}

func (m *RepoReferenceKey) GetLogicalLength() int64 {
	if m != nil && m.LogicalLength != nil {
		return *m.LogicalLength
	}
	return 0
}

func (m *RepoReferenceKey) GetOffsetInObject() int64 {
	if m != nil && m.OffsetInObject != nil {
		return *m.OffsetInObject
	}
	return 0
}

func (m *RepoReferenceKey) GetIsAppend() bool {
	if m != nil && m.IsAppend != nil {
		return *m.IsAppend
	}
	return false
}

type NamespaceKey struct {
	NamespaceId      *string `protobuf:"bytes,1,req,name=namespaceId" json:"namespaceId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NamespaceKey) Reset()                    { *m = NamespaceKey{} }
func (m *NamespaceKey) String() string            { return proto.CompactTextString(m) }
func (*NamespaceKey) ProtoMessage()               {}
func (*NamespaceKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{74} }

func (m *NamespaceKey) GetNamespaceId() string {
	if m != nil && m.NamespaceId != nil {
		return *m.NamespaceId
	}
	return ""
}

type AlertKey struct {
	Timestamp        *int64  `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
	AlertId          *string `protobuf:"bytes,2,req,name=alertId" json:"alertId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AlertKey) Reset()                    { *m = AlertKey{} }
func (m *AlertKey) String() string            { return proto.CompactTextString(m) }
func (*AlertKey) ProtoMessage()               {}
func (*AlertKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{75} }

func (m *AlertKey) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *AlertKey) GetAlertId() string {
	if m != nil && m.AlertId != nil {
		return *m.AlertId
	}
	return ""
}

type AlertStatsKey struct {
	AlertStatsId     *string `protobuf:"bytes,1,req,name=alertStatsId" json:"alertStatsId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AlertStatsKey) Reset()                    { *m = AlertStatsKey{} }
func (m *AlertStatsKey) String() string            { return proto.CompactTextString(m) }
func (*AlertStatsKey) ProtoMessage()               {}
func (*AlertStatsKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{76} }

func (m *AlertStatsKey) GetAlertStatsId() string {
	if m != nil && m.AlertStatsId != nil {
		return *m.AlertStatsId
	}
	return ""
}

type AuditKey struct {
	Timestamp        *int64  `protobuf:"varint,1,req,name=timestamp" json:"timestamp,omitempty"`
	AuditId          *string `protobuf:"bytes,2,req,name=auditId" json:"auditId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuditKey) Reset()                    { *m = AuditKey{} }
func (m *AuditKey) String() string            { return proto.CompactTextString(m) }
func (*AuditKey) ProtoMessage()               {}
func (*AuditKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{77} }

func (m *AuditKey) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *AuditKey) GetAuditId() string {
	if m != nil && m.AuditId != nil {
		return *m.AuditId
	}
	return ""
}

type FabricSequenceKey struct {
	FabricSequenceId *string `protobuf:"bytes,1,req,name=fabricSequenceId" json:"fabricSequenceId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FabricSequenceKey) Reset()                    { *m = FabricSequenceKey{} }
func (m *FabricSequenceKey) String() string            { return proto.CompactTextString(m) }
func (*FabricSequenceKey) ProtoMessage()               {}
func (*FabricSequenceKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{78} }

func (m *FabricSequenceKey) GetFabricSequenceId() string {
	if m != nil && m.FabricSequenceId != nil {
		return *m.FabricSequenceId
	}
	return ""
}

type BucketKey struct {
	BucketId         *string `protobuf:"bytes,1,req,name=bucketId" json:"bucketId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BucketKey) Reset()                    { *m = BucketKey{} }
func (m *BucketKey) String() string            { return proto.CompactTextString(m) }
func (*BucketKey) ProtoMessage()               {}
func (*BucketKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{79} }

func (m *BucketKey) GetBucketId() string {
	if m != nil && m.BucketId != nil {
		return *m.BucketId
	}
	return ""
}

type DeletedBucketKey struct {
	BucketId         *string `protobuf:"bytes,1,req,name=bucketId" json:"bucketId,omitempty"`
	BucketHashId     *string `protobuf:"bytes,2,req,name=bucketHashId" json:"bucketHashId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeletedBucketKey) Reset()                    { *m = DeletedBucketKey{} }
func (m *DeletedBucketKey) String() string            { return proto.CompactTextString(m) }
func (*DeletedBucketKey) ProtoMessage()               {}
func (*DeletedBucketKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{80} }

func (m *DeletedBucketKey) GetBucketId() string {
	if m != nil && m.BucketId != nil {
		return *m.BucketId
	}
	return ""
}

func (m *DeletedBucketKey) GetBucketHashId() string {
	if m != nil && m.BucketHashId != nil {
		return *m.BucketHashId
	}
	return ""
}

type UserKey struct {
	Namespace        *string `protobuf:"bytes,1,opt,name=namespace" json:"namespace,omitempty"`
	UserId           *string `protobuf:"bytes,2,req,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserKey) Reset()                    { *m = UserKey{} }
func (m *UserKey) String() string            { return proto.CompactTextString(m) }
func (*UserKey) ProtoMessage()               {}
func (*UserKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{81} }

func (m *UserKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *UserKey) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type ConfigKey struct {
	ConfigId         *string `protobuf:"bytes,1,req,name=configId" json:"configId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ConfigKey) Reset()                    { *m = ConfigKey{} }
func (m *ConfigKey) String() string            { return proto.CompactTextString(m) }
func (*ConfigKey) ProtoMessage()               {}
func (*ConfigKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{82} }

func (m *ConfigKey) GetConfigId() string {
	if m != nil && m.ConfigId != nil {
		return *m.ConfigId
	}
	return ""
}

type RGKey struct {
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RGKey) Reset()                    { *m = RGKey{} }
func (m *RGKey) String() string            { return proto.CompactTextString(m) }
func (*RGKey) ProtoMessage()               {}
func (*RGKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{83} }

func (m *RGKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

type RGUpdateKey struct {
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RGUpdateKey) Reset()                    { *m = RGUpdateKey{} }
func (m *RGUpdateKey) String() string            { return proto.CompactTextString(m) }
func (*RGUpdateKey) ProtoMessage()               {}
func (*RGUpdateKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{84} }

func (m *RGUpdateKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

type ResourceTableBootstrapTaskKey struct {
	Type             *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	RgId             *string `protobuf:"bytes,2,req,name=rgId" json:"rgId,omitempty"`
	DstZone          *string `protobuf:"bytes,4,req,name=dstZone" json:"dstZone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResourceTableBootstrapTaskKey) Reset()                    { *m = ResourceTableBootstrapTaskKey{} }
func (m *ResourceTableBootstrapTaskKey) String() string            { return proto.CompactTextString(m) }
func (*ResourceTableBootstrapTaskKey) ProtoMessage()               {}
func (*ResourceTableBootstrapTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{85} }

func (m *ResourceTableBootstrapTaskKey) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *ResourceTableBootstrapTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *ResourceTableBootstrapTaskKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

type NKEntryKey struct {
	Namespace        *string `protobuf:"bytes,1,req,name=namespace" json:"namespace,omitempty"`
	Bucket           *string `protobuf:"bytes,2,req,name=bucket" json:"bucket,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NKEntryKey) Reset()                    { *m = NKEntryKey{} }
func (m *NKEntryKey) String() string            { return proto.CompactTextString(m) }
func (*NKEntryKey) ProtoMessage()               {}
func (*NKEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{86} }

func (m *NKEntryKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *NKEntryKey) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

type NKEntryReplicationTaskKey struct {
	TaskOrder        *TaskOrder                            `protobuf:"bytes,1,req,name=taskOrder" json:"taskOrder,omitempty"`
	Namespace        *string                               `protobuf:"bytes,2,req,name=namespace" json:"namespace,omitempty"`
	Bucket           *string                               `protobuf:"bytes,3,req,name=bucket" json:"bucket,omitempty"`
	DstZone          *string                               `protobuf:"bytes,4,req,name=dstZone" json:"dstZone,omitempty"`
	Type             *NKEntryReplicationTaskKey_NKTaskType `protobuf:"varint,5,req,name=type,enum=or.NKEntryReplicationTaskKey_NKTaskType" json:"type,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *NKEntryReplicationTaskKey) Reset()                    { *m = NKEntryReplicationTaskKey{} }
func (m *NKEntryReplicationTaskKey) String() string            { return proto.CompactTextString(m) }
func (*NKEntryReplicationTaskKey) ProtoMessage()               {}
func (*NKEntryReplicationTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{87} }

func (m *NKEntryReplicationTaskKey) GetTaskOrder() *TaskOrder {
	if m != nil {
		return m.TaskOrder
	}
	return nil
}

func (m *NKEntryReplicationTaskKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func (m *NKEntryReplicationTaskKey) GetBucket() string {
	if m != nil && m.Bucket != nil {
		return *m.Bucket
	}
	return ""
}

func (m *NKEntryReplicationTaskKey) GetDstZone() string {
	if m != nil && m.DstZone != nil {
		return *m.DstZone
	}
	return ""
}

func (m *NKEntryReplicationTaskKey) GetType() NKEntryReplicationTaskKey_NKTaskType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return NKEntryReplicationTaskKey_ADD
}

// misc keys stored to ZKConfigTable
type ZKConfigKey struct {
	Type             *ZKConfigKey_ConfigKeyType `protobuf:"varint,1,req,name=type,enum=or.ZKConfigKey_ConfigKeyType" json:"type,omitempty"`
	KeyId            *string                    `protobuf:"bytes,2,req,name=keyId" json:"keyId,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *ZKConfigKey) Reset()                    { *m = ZKConfigKey{} }
func (m *ZKConfigKey) String() string            { return proto.CompactTextString(m) }
func (*ZKConfigKey) ProtoMessage()               {}
func (*ZKConfigKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{88} }

func (m *ZKConfigKey) GetType() ZKConfigKey_ConfigKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ZKConfigKey_HEAD_TYPE_INFO
}

func (m *ZKConfigKey) GetKeyId() string {
	if m != nil && m.KeyId != nil {
		return *m.KeyId
	}
	return ""
}

type ZoneInfoKey struct {
	VdcId            *string `protobuf:"bytes,1,req,name=vdcId" json:"vdcId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ZoneInfoKey) Reset()                    { *m = ZoneInfoKey{} }
func (m *ZoneInfoKey) String() string            { return proto.CompactTextString(m) }
func (*ZoneInfoKey) ProtoMessage()               {}
func (*ZoneInfoKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{89} }

func (m *ZoneInfoKey) GetVdcId() string {
	if m != nil && m.VdcId != nil {
		return *m.VdcId
	}
	return ""
}

// if SchemaKey is omitted, path is the 'key' name
// if SchemaKey is provided, full path is path + SchemaKey
// when SchemaKey provided, path is effectively parent path
// any combination is valid: {path}, {path, key}, {key}
type ViprNestKey struct {
	Epoch            *int64     `protobuf:"varint,1,opt,name=epoch" json:"epoch,omitempty"`
	Path             *string    `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Key              *SchemaKey `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	IsSecure         *bool      `protobuf:"varint,4,opt,name=isSecure" json:"isSecure,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ViprNestKey) Reset()                    { *m = ViprNestKey{} }
func (m *ViprNestKey) String() string            { return proto.CompactTextString(m) }
func (*ViprNestKey) ProtoMessage()               {}
func (*ViprNestKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{90} }

func (m *ViprNestKey) GetEpoch() int64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

func (m *ViprNestKey) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *ViprNestKey) GetKey() *SchemaKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ViprNestKey) GetIsSecure() bool {
	if m != nil && m.IsSecure != nil {
		return *m.IsSecure
	}
	return false
}

type ViprNestSystemKey struct {
	Type             *ViprNestSystemKey_SystemKeyType `protobuf:"varint,1,req,name=type,enum=or.ViprNestSystemKey_SystemKeyType" json:"type,omitempty"`
	KeyId            *string                          `protobuf:"bytes,2,req,name=keyId" json:"keyId,omitempty"`
	XXX_unrecognized []byte                           `json:"-"`
}

func (m *ViprNestSystemKey) Reset()                    { *m = ViprNestSystemKey{} }
func (m *ViprNestSystemKey) String() string            { return proto.CompactTextString(m) }
func (*ViprNestSystemKey) ProtoMessage()               {}
func (*ViprNestSystemKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{91} }

func (m *ViprNestSystemKey) GetType() ViprNestSystemKey_SystemKeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ViprNestSystemKey_NONE
}

func (m *ViprNestSystemKey) GetKeyId() string {
	if m != nil && m.KeyId != nil {
		return *m.KeyId
	}
	return ""
}

type GcProgressKey struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *GcProgressKey) Reset()                    { *m = GcProgressKey{} }
func (m *GcProgressKey) String() string            { return proto.CompactTextString(m) }
func (*GcProgressKey) ProtoMessage()               {}
func (*GcProgressKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{92} }

type CachedChunkKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CachedChunkKey) Reset()                    { *m = CachedChunkKey{} }
func (m *CachedChunkKey) String() string            { return proto.CompactTextString(m) }
func (*CachedChunkKey) ProtoMessage()               {}
func (*CachedChunkKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{93} }

func (m *CachedChunkKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

// ViprNest task keys
type VNestTaskKey struct {
	Type             *VNestTaskKey_VNestTaskType `protobuf:"varint,1,req,name=type,enum=or.VNestTaskKey_VNestTaskType" json:"type,omitempty"`
	TaskOrder        *TaskOrder                  `protobuf:"bytes,2,req,name=taskOrder" json:"taskOrder,omitempty"`
	SubKey           []byte                      `protobuf:"bytes,3,req,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *VNestTaskKey) Reset()                    { *m = VNestTaskKey{} }
func (m *VNestTaskKey) String() string            { return proto.CompactTextString(m) }
func (*VNestTaskKey) ProtoMessage()               {}
func (*VNestTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{94} }

func (m *VNestTaskKey) GetType() VNestTaskKey_VNestTaskType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return VNestTaskKey_NONE
}

func (m *VNestTaskKey) GetTaskOrder() *TaskOrder {
	if m != nil {
		return m.TaskOrder
	}
	return nil
}

func (m *VNestTaskKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type VNestLeaderElectionKey struct {
	Epoch            *int64  `protobuf:"varint,1,req,name=epoch" json:"epoch,omitempty"`
	Leader           *string `protobuf:"bytes,2,req,name=leader" json:"leader,omitempty"`
	FailedLeader     *string `protobuf:"bytes,3,opt,name=failedLeader" json:"failedLeader,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *VNestLeaderElectionKey) Reset()                    { *m = VNestLeaderElectionKey{} }
func (m *VNestLeaderElectionKey) String() string            { return proto.CompactTextString(m) }
func (*VNestLeaderElectionKey) ProtoMessage()               {}
func (*VNestLeaderElectionKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{95} }

func (m *VNestLeaderElectionKey) GetEpoch() int64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

func (m *VNestLeaderElectionKey) GetLeader() string {
	if m != nil && m.Leader != nil {
		return *m.Leader
	}
	return ""
}

func (m *VNestLeaderElectionKey) GetFailedLeader() string {
	if m != nil && m.FailedLeader != nil {
		return *m.FailedLeader
	}
	return ""
}

// paxos task keys
type PaxosTaskKey struct {
	Type             *PaxosTaskKey_PaxosTaskType `protobuf:"varint,1,req,name=type,enum=or.PaxosTaskKey_PaxosTaskType" json:"type,omitempty"`
	TaskOrder        *TaskOrder                  `protobuf:"bytes,2,req,name=taskOrder" json:"taskOrder,omitempty"`
	Key              *SchemaKey                  `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	SubKey           []byte                      `protobuf:"bytes,4,opt,name=subKey" json:"subKey,omitempty"`
	XXX_unrecognized []byte                      `json:"-"`
}

func (m *PaxosTaskKey) Reset()                    { *m = PaxosTaskKey{} }
func (m *PaxosTaskKey) String() string            { return proto.CompactTextString(m) }
func (*PaxosTaskKey) ProtoMessage()               {}
func (*PaxosTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{96} }

func (m *PaxosTaskKey) GetType() PaxosTaskKey_PaxosTaskType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return PaxosTaskKey_PAXOS_DELETE
}

func (m *PaxosTaskKey) GetTaskOrder() *TaskOrder {
	if m != nil {
		return m.TaskOrder
	}
	return nil
}

func (m *PaxosTaskKey) GetKey() *SchemaKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PaxosTaskKey) GetSubKey() []byte {
	if m != nil {
		return m.SubKey
	}
	return nil
}

type PaxosDeleteSubKey struct {
	RequestId        *string `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PaxosDeleteSubKey) Reset()                    { *m = PaxosDeleteSubKey{} }
func (m *PaxosDeleteSubKey) String() string            { return proto.CompactTextString(m) }
func (*PaxosDeleteSubKey) ProtoMessage()               {}
func (*PaxosDeleteSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{97} }

func (m *PaxosDeleteSubKey) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

type PaxosPurgeSubKey struct {
	RequestId        *string `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PaxosPurgeSubKey) Reset()                    { *m = PaxosPurgeSubKey{} }
func (m *PaxosPurgeSubKey) String() string            { return proto.CompactTextString(m) }
func (*PaxosPurgeSubKey) ProtoMessage()               {}
func (*PaxosPurgeSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{98} }

func (m *PaxosPurgeSubKey) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

type PaxosElectionNotificationSubKey struct {
	RequestId        *string `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	Epoch            *int64  `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PaxosElectionNotificationSubKey) Reset()         { *m = PaxosElectionNotificationSubKey{} }
func (m *PaxosElectionNotificationSubKey) String() string { return proto.CompactTextString(m) }
func (*PaxosElectionNotificationSubKey) ProtoMessage()    {}
func (*PaxosElectionNotificationSubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{99}
}

func (m *PaxosElectionNotificationSubKey) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

func (m *PaxosElectionNotificationSubKey) GetEpoch() int64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return 0
}

type PaxosCommitNotificationSubKey struct {
	RequestId        *string `protobuf:"bytes,1,opt,name=requestId" json:"requestId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PaxosCommitNotificationSubKey) Reset()                    { *m = PaxosCommitNotificationSubKey{} }
func (m *PaxosCommitNotificationSubKey) String() string            { return proto.CompactTextString(m) }
func (*PaxosCommitNotificationSubKey) ProtoMessage()               {}
func (*PaxosCommitNotificationSubKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{100} }

func (m *PaxosCommitNotificationSubKey) GetRequestId() string {
	if m != nil && m.RequestId != nil {
		return *m.RequestId
	}
	return ""
}

type VNestReconfigKey struct {
	Epoch            *int64 `protobuf:"varint,1,opt,name=epoch,def=0" json:"epoch,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *VNestReconfigKey) Reset()                    { *m = VNestReconfigKey{} }
func (m *VNestReconfigKey) String() string            { return proto.CompactTextString(m) }
func (*VNestReconfigKey) ProtoMessage()               {}
func (*VNestReconfigKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{101} }

const Default_VNestReconfigKey_Epoch int64 = 0

func (m *VNestReconfigKey) GetEpoch() int64 {
	if m != nil && m.Epoch != nil {
		return *m.Epoch
	}
	return Default_VNestReconfigKey_Epoch
}

type ChunkReferenceScanProgressKey struct {
	DtId             *string                                      `protobuf:"bytes,1,req,name=dtId" json:"dtId,omitempty"`
	ChunkType        *ChunkReferenceScanProgressKey_ChunkDataType `protobuf:"varint,2,req,name=chunkType,enum=or.ChunkReferenceScanProgressKey_ChunkDataType" json:"chunkType,omitempty"`
	Sequence         *int32                                       `protobuf:"varint,3,opt,name=sequence" json:"sequence,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *ChunkReferenceScanProgressKey) Reset()                    { *m = ChunkReferenceScanProgressKey{} }
func (m *ChunkReferenceScanProgressKey) String() string            { return proto.CompactTextString(m) }
func (*ChunkReferenceScanProgressKey) ProtoMessage()               {}
func (*ChunkReferenceScanProgressKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{102} }

func (m *ChunkReferenceScanProgressKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *ChunkReferenceScanProgressKey) GetChunkType() ChunkReferenceScanProgressKey_ChunkDataType {
	if m != nil && m.ChunkType != nil {
		return *m.ChunkType
	}
	return ChunkReferenceScanProgressKey_REPO
}

func (m *ChunkReferenceScanProgressKey) GetSequence() int32 {
	if m != nil && m.Sequence != nil {
		return *m.Sequence
	}
	return 0
}

type BTreeCorruptionScanProgressKey struct {
	DtId             *string                                      `protobuf:"bytes,1,req,name=dtId" json:"dtId,omitempty"`
	ProgressType     *BTreeCorruptionScanProgressKey_ProgressType `protobuf:"varint,2,req,name=progressType,enum=or.BTreeCorruptionScanProgressKey_ProgressType" json:"progressType,omitempty"`
	XXX_unrecognized []byte                                       `json:"-"`
}

func (m *BTreeCorruptionScanProgressKey) Reset()         { *m = BTreeCorruptionScanProgressKey{} }
func (m *BTreeCorruptionScanProgressKey) String() string { return proto.CompactTextString(m) }
func (*BTreeCorruptionScanProgressKey) ProtoMessage()    {}
func (*BTreeCorruptionScanProgressKey) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{103}
}

func (m *BTreeCorruptionScanProgressKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *BTreeCorruptionScanProgressKey) GetProgressType() BTreeCorruptionScanProgressKey_ProgressType {
	if m != nil && m.ProgressType != nil {
		return *m.ProgressType
	}
	return BTreeCorruptionScanProgressKey_ALL
}

type ChunkGcScanStatusKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	DtId             *string `protobuf:"bytes,2,req,name=dtId" json:"dtId,omitempty"`
	Zone             *string `protobuf:"bytes,3,req,name=zone" json:"zone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChunkGcScanStatusKey) Reset()                    { *m = ChunkGcScanStatusKey{} }
func (m *ChunkGcScanStatusKey) String() string            { return proto.CompactTextString(m) }
func (*ChunkGcScanStatusKey) ProtoMessage()               {}
func (*ChunkGcScanStatusKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{104} }

func (m *ChunkGcScanStatusKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *ChunkGcScanStatusKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *ChunkGcScanStatusKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

type ChunkGcScanStatusTaskKey struct {
	Zone *string                                 `protobuf:"bytes,1,req,name=zone" json:"zone,omitempty"`
	Type *ChunkGcScanStatusTaskKey_ChunkDataType `protobuf:"varint,2,opt,name=type,enum=or.ChunkGcScanStatusTaskKey_ChunkDataType" json:"type,omitempty"`
	// this field is used for sorting by time
	// for each chunkId there are two ChunkGcScanStatusTaskKey in all
	// e.g.
	// keyForTimestamp: zone z1 type REPO time null chunkId chunk1
	// keyForTimestampValue: ChunkGcScanStatusTaskValue { time=$triggerTimestamp }
	// keyWithTimestamp: zone z1 type REPO time $triggerTimestamp chunkId chunk1
	// keyWithTimestampValue: ChunkGcScanStatusTaskValue { time=null }
	// keyForTimestamp is used to stored the $triggerTimestamp for keyWithTimestamp
	// keyWithTimestamp is used for sorting by time
	Time             *int64  `protobuf:"varint,3,opt,name=time" json:"time,omitempty"`
	ChunkId          *string `protobuf:"bytes,4,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChunkGcScanStatusTaskKey) Reset()                    { *m = ChunkGcScanStatusTaskKey{} }
func (m *ChunkGcScanStatusTaskKey) String() string            { return proto.CompactTextString(m) }
func (*ChunkGcScanStatusTaskKey) ProtoMessage()               {}
func (*ChunkGcScanStatusTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{105} }

func (m *ChunkGcScanStatusTaskKey) GetZone() string {
	if m != nil && m.Zone != nil {
		return *m.Zone
	}
	return ""
}

func (m *ChunkGcScanStatusTaskKey) GetType() ChunkGcScanStatusTaskKey_ChunkDataType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ChunkGcScanStatusTaskKey_REPO
}

func (m *ChunkGcScanStatusTaskKey) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *ChunkGcScanStatusTaskKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

type OBMeteringCollectorTaskKey struct {
	Type             *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Cos              *string `protobuf:"bytes,2,req,name=cos" json:"cos,omitempty"`
	DtId             *string `protobuf:"bytes,3,req,name=dtId" json:"dtId,omitempty"`
	InsertTimestamp  *int64  `protobuf:"varint,4,req,name=insertTimestamp" json:"insertTimestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *OBMeteringCollectorTaskKey) Reset()                    { *m = OBMeteringCollectorTaskKey{} }
func (m *OBMeteringCollectorTaskKey) String() string            { return proto.CompactTextString(m) }
func (*OBMeteringCollectorTaskKey) ProtoMessage()               {}
func (*OBMeteringCollectorTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{106} }

func (m *OBMeteringCollectorTaskKey) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *OBMeteringCollectorTaskKey) GetCos() string {
	if m != nil && m.Cos != nil {
		return *m.Cos
	}
	return ""
}

func (m *OBMeteringCollectorTaskKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *OBMeteringCollectorTaskKey) GetInsertTimestamp() int64 {
	if m != nil && m.InsertTimestamp != nil {
		return *m.InsertTimestamp
	}
	return 0
}

type RejoinTaskKey struct {
	Type *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	RgId *string `protobuf:"bytes,2,req,name=rgId" json:"rgId,omitempty"`
	// where the rejoin operation should be sent to
	RemoteZone               *string `protobuf:"bytes,3,req,name=remoteZone" json:"remoteZone,omitempty"`
	KeypoolId                *string `protobuf:"bytes,4,req,name=keypoolId" json:"keypoolId,omitempty"`
	KeyName                  *string `protobuf:"bytes,5,req,name=keyName" json:"keyName,omitempty"`
	Timestamp                *int64  `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	PreviousOwnerEndSequence *int64  `protobuf:"varint,7,opt,name=previousOwnerEndSequence" json:"previousOwnerEndSequence,omitempty"`
	// indicating the routing of LS key based on this rejoin task
	SingleOwner      *bool   `protobuf:"varint,8,opt,name=singleOwner" json:"singleOwner,omitempty"`
	Oid              *string `protobuf:"bytes,9,opt,name=oid" json:"oid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RejoinTaskKey) Reset()                    { *m = RejoinTaskKey{} }
func (m *RejoinTaskKey) String() string            { return proto.CompactTextString(m) }
func (*RejoinTaskKey) ProtoMessage()               {}
func (*RejoinTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{107} }

func (m *RejoinTaskKey) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *RejoinTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *RejoinTaskKey) GetRemoteZone() string {
	if m != nil && m.RemoteZone != nil {
		return *m.RemoteZone
	}
	return ""
}

func (m *RejoinTaskKey) GetKeypoolId() string {
	if m != nil && m.KeypoolId != nil {
		return *m.KeypoolId
	}
	return ""
}

func (m *RejoinTaskKey) GetKeyName() string {
	if m != nil && m.KeyName != nil {
		return *m.KeyName
	}
	return ""
}

func (m *RejoinTaskKey) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *RejoinTaskKey) GetPreviousOwnerEndSequence() int64 {
	if m != nil && m.PreviousOwnerEndSequence != nil {
		return *m.PreviousOwnerEndSequence
	}
	return 0
}

func (m *RejoinTaskKey) GetSingleOwner() bool {
	if m != nil && m.SingleOwner != nil {
		return *m.SingleOwner
	}
	return false
}

func (m *RejoinTaskKey) GetOid() string {
	if m != nil && m.Oid != nil {
		return *m.Oid
	}
	return ""
}

type TempFailedZoneStatusTransitionTaskKey struct {
	RgId             *string `protobuf:"bytes,1,req,name=rgId" json:"rgId,omitempty"`
	TempFailedZoneId *string `protobuf:"bytes,2,req,name=tempFailedZoneId" json:"tempFailedZoneId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TempFailedZoneStatusTransitionTaskKey) Reset()         { *m = TempFailedZoneStatusTransitionTaskKey{} }
func (m *TempFailedZoneStatusTransitionTaskKey) String() string { return proto.CompactTextString(m) }
func (*TempFailedZoneStatusTransitionTaskKey) ProtoMessage()    {}
func (*TempFailedZoneStatusTransitionTaskKey) Descriptor() ([]byte, []int) {
	return fileDescriptor5, []int{108}
}

func (m *TempFailedZoneStatusTransitionTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *TempFailedZoneStatusTransitionTaskKey) GetTempFailedZoneId() string {
	if m != nil && m.TempFailedZoneId != nil {
		return *m.TempFailedZoneId
	}
	return ""
}

type RefTableRebuildTaskKey struct {
	FailedZone       *string `protobuf:"bytes,1,req,name=failedZone" json:"failedZone,omitempty"`
	LocalZone        *string `protobuf:"bytes,2,req,name=localZone" json:"localZone,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RefTableRebuildTaskKey) Reset()                    { *m = RefTableRebuildTaskKey{} }
func (m *RefTableRebuildTaskKey) String() string            { return proto.CompactTextString(m) }
func (*RefTableRebuildTaskKey) ProtoMessage()               {}
func (*RefTableRebuildTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{109} }

func (m *RefTableRebuildTaskKey) GetFailedZone() string {
	if m != nil && m.FailedZone != nil {
		return *m.FailedZone
	}
	return ""
}

func (m *RefTableRebuildTaskKey) GetLocalZone() string {
	if m != nil && m.LocalZone != nil {
		return *m.LocalZone
	}
	return ""
}

type RefTableRebuildDoneMarkerKey struct {
	ZoneToRebuild    *string `protobuf:"bytes,1,req,name=zoneToRebuild" json:"zoneToRebuild,omitempty"`
	RebuildDoneZone  *string `protobuf:"bytes,2,req,name=rebuildDoneZone" json:"rebuildDoneZone,omitempty"`
	IsFailed         *bool   `protobuf:"varint,3,opt,name=isFailed,def=1" json:"isFailed,omitempty"`
	Version          *int32  `protobuf:"varint,4,opt,name=version,def=0" json:"version,omitempty"`
	RgId             *string `protobuf:"bytes,5,opt,name=rgId" json:"rgId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RefTableRebuildDoneMarkerKey) Reset()                    { *m = RefTableRebuildDoneMarkerKey{} }
func (m *RefTableRebuildDoneMarkerKey) String() string            { return proto.CompactTextString(m) }
func (*RefTableRebuildDoneMarkerKey) ProtoMessage()               {}
func (*RefTableRebuildDoneMarkerKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{110} }

const Default_RefTableRebuildDoneMarkerKey_IsFailed bool = true
const Default_RefTableRebuildDoneMarkerKey_Version int32 = 0

func (m *RefTableRebuildDoneMarkerKey) GetZoneToRebuild() string {
	if m != nil && m.ZoneToRebuild != nil {
		return *m.ZoneToRebuild
	}
	return ""
}

func (m *RefTableRebuildDoneMarkerKey) GetRebuildDoneZone() string {
	if m != nil && m.RebuildDoneZone != nil {
		return *m.RebuildDoneZone
	}
	return ""
}

func (m *RefTableRebuildDoneMarkerKey) GetIsFailed() bool {
	if m != nil && m.IsFailed != nil {
		return *m.IsFailed
	}
	return Default_RefTableRebuildDoneMarkerKey_IsFailed
}

func (m *RefTableRebuildDoneMarkerKey) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return Default_RefTableRebuildDoneMarkerKey_Version
}

func (m *RefTableRebuildDoneMarkerKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

type TokenKey struct {
	TokenId          *string `protobuf:"bytes,1,req,name=tokenId" json:"tokenId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TokenKey) Reset()                    { *m = TokenKey{} }
func (m *TokenKey) String() string            { return proto.CompactTextString(m) }
func (*TokenKey) ProtoMessage()               {}
func (*TokenKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{111} }

func (m *TokenKey) GetTokenId() string {
	if m != nil && m.TokenId != nil {
		return *m.TokenId
	}
	return ""
}

type LoginKey struct {
	LoginId          *string `protobuf:"bytes,1,req,name=loginId" json:"loginId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LoginKey) Reset()                    { *m = LoginKey{} }
func (m *LoginKey) String() string            { return proto.CompactTextString(m) }
func (*LoginKey) ProtoMessage()               {}
func (*LoginKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{112} }

func (m *LoginKey) GetLoginId() string {
	if m != nil && m.LoginId != nil {
		return *m.LoginId
	}
	return ""
}

type AuthProviderKey struct {
	ProviderId       *string `protobuf:"bytes,1,req,name=providerId" json:"providerId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthProviderKey) Reset()                    { *m = AuthProviderKey{} }
func (m *AuthProviderKey) String() string            { return proto.CompactTextString(m) }
func (*AuthProviderKey) ProtoMessage()               {}
func (*AuthProviderKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{113} }

func (m *AuthProviderKey) GetProviderId() string {
	if m != nil && m.ProviderId != nil {
		return *m.ProviderId
	}
	return ""
}

type DynamicConfigKey struct {
	Type             *DynamicConfigKey_KeyType `protobuf:"varint,1,req,name=type,enum=or.DynamicConfigKey_KeyType" json:"type,omitempty"`
	Gencount         *int64                    `protobuf:"varint,2,opt,name=gencount" json:"gencount,omitempty"`
	Name             *string                   `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Version          *int64                    `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *DynamicConfigKey) Reset()                    { *m = DynamicConfigKey{} }
func (m *DynamicConfigKey) String() string            { return proto.CompactTextString(m) }
func (*DynamicConfigKey) ProtoMessage()               {}
func (*DynamicConfigKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{114} }

func (m *DynamicConfigKey) GetType() DynamicConfigKey_KeyType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DynamicConfigKey_GENCOUNT
}

func (m *DynamicConfigKey) GetGencount() int64 {
	if m != nil && m.Gencount != nil {
		return *m.Gencount
	}
	return 0
}

func (m *DynamicConfigKey) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *DynamicConfigKey) GetVersion() int64 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

type DtCleanupKey struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *DtCleanupKey) Reset()                    { *m = DtCleanupKey{} }
func (m *DtCleanupKey) String() string            { return proto.CompactTextString(m) }
func (*DtCleanupKey) ProtoMessage()               {}
func (*DtCleanupKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{115} }

type MTLeftoverNegRefTaskKey struct {
	// done or running
	Type             *string `protobuf:"bytes,1,req,name=type" json:"type,omitempty"`
	Cos              *string `protobuf:"bytes,2,req,name=cos" json:"cos,omitempty"`
	DtId             *string `protobuf:"bytes,3,req,name=dtId" json:"dtId,omitempty"`
	InsertTimestamp  *int64  `protobuf:"varint,4,req,name=insertTimestamp" json:"insertTimestamp,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MTLeftoverNegRefTaskKey) Reset()                    { *m = MTLeftoverNegRefTaskKey{} }
func (m *MTLeftoverNegRefTaskKey) String() string            { return proto.CompactTextString(m) }
func (*MTLeftoverNegRefTaskKey) ProtoMessage()               {}
func (*MTLeftoverNegRefTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{116} }

func (m *MTLeftoverNegRefTaskKey) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *MTLeftoverNegRefTaskKey) GetCos() string {
	if m != nil && m.Cos != nil {
		return *m.Cos
	}
	return ""
}

func (m *MTLeftoverNegRefTaskKey) GetDtId() string {
	if m != nil && m.DtId != nil {
		return *m.DtId
	}
	return ""
}

func (m *MTLeftoverNegRefTaskKey) GetInsertTimestamp() int64 {
	if m != nil && m.InsertTimestamp != nil {
		return *m.InsertTimestamp
	}
	return 0
}

type StatsBackupKey struct {
	NodeId           *string `protobuf:"bytes,1,req,name=nodeId" json:"nodeId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StatsBackupKey) Reset()                    { *m = StatsBackupKey{} }
func (m *StatsBackupKey) String() string            { return proto.CompactTextString(m) }
func (*StatsBackupKey) ProtoMessage()               {}
func (*StatsBackupKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{117} }

func (m *StatsBackupKey) GetNodeId() string {
	if m != nil && m.NodeId != nil {
		return *m.NodeId
	}
	return ""
}

// deprecated, not used anymore
type EcsVersionKey struct {
	Version          *string `protobuf:"bytes,1,req,name=version" json:"version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EcsVersionKey) Reset()                    { *m = EcsVersionKey{} }
func (m *EcsVersionKey) String() string            { return proto.CompactTextString(m) }
func (*EcsVersionKey) ProtoMessage()               {}
func (*EcsVersionKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{118} }

func (m *EcsVersionKey) GetVersion() string {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return ""
}

type RepoChunkProgressKey struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *RepoChunkProgressKey) Reset()                    { *m = RepoChunkProgressKey{} }
func (m *RepoChunkProgressKey) String() string            { return proto.CompactTextString(m) }
func (*RepoChunkProgressKey) ProtoMessage()               {}
func (*RepoChunkProgressKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{119} }

type AuthTokenCountKey struct {
	UserId           *string `protobuf:"bytes,1,req,name=userId" json:"userId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AuthTokenCountKey) Reset()                    { *m = AuthTokenCountKey{} }
func (m *AuthTokenCountKey) String() string            { return proto.CompactTextString(m) }
func (*AuthTokenCountKey) ProtoMessage()               {}
func (*AuthTokenCountKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{120} }

func (m *AuthTokenCountKey) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

type RepoUsageKey struct {
	// Total used size
	TotalUsedSize *int64 `protobuf:"varint,1,req,name=totalUsedSize" json:"totalUsedSize,omitempty"`
	// Used size without spillover meta data
	ObjDataUsedSize  *int64  `protobuf:"varint,2,req,name=objDataUsedSize" json:"objDataUsedSize,omitempty"`
	ChunkId          *string `protobuf:"bytes,3,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RepoUsageKey) Reset()                    { *m = RepoUsageKey{} }
func (m *RepoUsageKey) String() string            { return proto.CompactTextString(m) }
func (*RepoUsageKey) ProtoMessage()               {}
func (*RepoUsageKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{121} }

func (m *RepoUsageKey) GetTotalUsedSize() int64 {
	if m != nil && m.TotalUsedSize != nil {
		return *m.TotalUsedSize
	}
	return 0
}

func (m *RepoUsageKey) GetObjDataUsedSize() int64 {
	if m != nil && m.ObjDataUsedSize != nil {
		return *m.ObjDataUsedSize
	}
	return 0
}

func (m *RepoUsageKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

type RepoUsageChunkKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RepoUsageChunkKey) Reset()                    { *m = RepoUsageChunkKey{} }
func (m *RepoUsageChunkKey) String() string            { return proto.CompactTextString(m) }
func (*RepoUsageChunkKey) ProtoMessage()               {}
func (*RepoUsageChunkKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{122} }

func (m *RepoUsageChunkKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

type RepoUsagePartialGCContextKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	DstChunkId       *string `protobuf:"bytes,2,req,name=dstChunkId" json:"dstChunkId,omitempty"`
	PartSeq          *int32  `protobuf:"varint,3,req,name=partSeq" json:"partSeq,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RepoUsagePartialGCContextKey) Reset()                    { *m = RepoUsagePartialGCContextKey{} }
func (m *RepoUsagePartialGCContextKey) String() string            { return proto.CompactTextString(m) }
func (*RepoUsagePartialGCContextKey) ProtoMessage()               {}
func (*RepoUsagePartialGCContextKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{123} }

func (m *RepoUsagePartialGCContextKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

func (m *RepoUsagePartialGCContextKey) GetDstChunkId() string {
	if m != nil && m.DstChunkId != nil {
		return *m.DstChunkId
	}
	return ""
}

func (m *RepoUsagePartialGCContextKey) GetPartSeq() int32 {
	if m != nil && m.PartSeq != nil {
		return *m.PartSeq
	}
	return 0
}

type PartialGCTaskKey struct {
	Order            *int64                               `protobuf:"varint,1,req,name=order" json:"order,omitempty"`
	State            *PartialGCTaskKey_PartialGCTaskState `protobuf:"varint,2,req,name=state,enum=or.PartialGCTaskKey_PartialGCTaskState" json:"state,omitempty"`
	TaskId           *string                              `protobuf:"bytes,3,req,name=taskId" json:"taskId,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *PartialGCTaskKey) Reset()                    { *m = PartialGCTaskKey{} }
func (m *PartialGCTaskKey) String() string            { return proto.CompactTextString(m) }
func (*PartialGCTaskKey) ProtoMessage()               {}
func (*PartialGCTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{124} }

func (m *PartialGCTaskKey) GetOrder() int64 {
	if m != nil && m.Order != nil {
		return *m.Order
	}
	return 0
}

func (m *PartialGCTaskKey) GetState() PartialGCTaskKey_PartialGCTaskState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return PartialGCTaskKey_ALL
}

func (m *PartialGCTaskKey) GetTaskId() string {
	if m != nil && m.TaskId != nil {
		return *m.TaskId
	}
	return ""
}

type MIEntryKey struct {
	KeypoolId    *string                     `protobuf:"bytes,1,req,name=keypoolId" json:"keypoolId,omitempty"`
	MetadataType *SecondaryIndexMetadataType `protobuf:"varint,2,req,name=metadataType,enum=or.SecondaryIndexMetadataType" json:"metadataType,omitempty"`
	MetadataKey  *string                     `protobuf:"bytes,3,req,name=metadataKey" json:"metadataKey,omitempty"`
	ValueType    *SecondaryIndexValueType    `protobuf:"varint,4,req,name=valueType,enum=or.SecondaryIndexValueType" json:"valueType,omitempty"`
	IntegerValue *int64                      `protobuf:"varint,5,opt,name=integerValue" json:"integerValue,omitempty"`
	DecimalValue *float64                    `protobuf:"fixed64,6,opt,name=decimalValue" json:"decimalValue,omitempty"`
	StringValue  *string                     `protobuf:"bytes,7,opt,name=stringValue" json:"stringValue,omitempty"`
	// objectId is made optional for listing prefix.
	ObjectId *string `protobuf:"bytes,8,opt,name=objectId" json:"objectId,omitempty"`
	// versionId is made optional for listing prefix.
	VersionId        *string `protobuf:"bytes,9,opt,name=versionId" json:"versionId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MIEntryKey) Reset()                    { *m = MIEntryKey{} }
func (m *MIEntryKey) String() string            { return proto.CompactTextString(m) }
func (*MIEntryKey) ProtoMessage()               {}
func (*MIEntryKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{125} }

func (m *MIEntryKey) GetKeypoolId() string {
	if m != nil && m.KeypoolId != nil {
		return *m.KeypoolId
	}
	return ""
}

func (m *MIEntryKey) GetMetadataType() SecondaryIndexMetadataType {
	if m != nil && m.MetadataType != nil {
		return *m.MetadataType
	}
	return SecondaryIndexMetadataType_SYSTEM
}

func (m *MIEntryKey) GetMetadataKey() string {
	if m != nil && m.MetadataKey != nil {
		return *m.MetadataKey
	}
	return ""
}

func (m *MIEntryKey) GetValueType() SecondaryIndexValueType {
	if m != nil && m.ValueType != nil {
		return *m.ValueType
	}
	return SecondaryIndexValueType_INTEGER_TYPE
}

func (m *MIEntryKey) GetIntegerValue() int64 {
	if m != nil && m.IntegerValue != nil {
		return *m.IntegerValue
	}
	return 0
}

func (m *MIEntryKey) GetDecimalValue() float64 {
	if m != nil && m.DecimalValue != nil {
		return *m.DecimalValue
	}
	return 0
}

func (m *MIEntryKey) GetStringValue() string {
	if m != nil && m.StringValue != nil {
		return *m.StringValue
	}
	return ""
}

func (m *MIEntryKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *MIEntryKey) GetVersionId() string {
	if m != nil && m.VersionId != nil {
		return *m.VersionId
	}
	return ""
}

type MIRejoinTaskKey struct {
	TsoId            *string     `protobuf:"bytes,1,req,name=tsoId" json:"tsoId,omitempty"`
	RgId             *string     `protobuf:"bytes,2,req,name=rgId" json:"rgId,omitempty"`
	TaskType         *string     `protobuf:"bytes,3,req,name=taskType" json:"taskType,omitempty"`
	MIEntryKey       *MIEntryKey `protobuf:"bytes,4,opt,name=mIEntryKey" json:"mIEntryKey,omitempty"`
	RemoteZone       *string     `protobuf:"bytes,5,opt,name=remoteZone" json:"remoteZone,omitempty"`
	BlockingKey      *bool       `protobuf:"varint,6,opt,name=blockingKey" json:"blockingKey,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *MIRejoinTaskKey) Reset()                    { *m = MIRejoinTaskKey{} }
func (m *MIRejoinTaskKey) String() string            { return proto.CompactTextString(m) }
func (*MIRejoinTaskKey) ProtoMessage()               {}
func (*MIRejoinTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{126} }

func (m *MIRejoinTaskKey) GetTsoId() string {
	if m != nil && m.TsoId != nil {
		return *m.TsoId
	}
	return ""
}

func (m *MIRejoinTaskKey) GetRgId() string {
	if m != nil && m.RgId != nil {
		return *m.RgId
	}
	return ""
}

func (m *MIRejoinTaskKey) GetTaskType() string {
	if m != nil && m.TaskType != nil {
		return *m.TaskType
	}
	return ""
}

func (m *MIRejoinTaskKey) GetMIEntryKey() *MIEntryKey {
	if m != nil {
		return m.MIEntryKey
	}
	return nil
}

func (m *MIRejoinTaskKey) GetRemoteZone() string {
	if m != nil && m.RemoteZone != nil {
		return *m.RemoteZone
	}
	return ""
}

func (m *MIRejoinTaskKey) GetBlockingKey() bool {
	if m != nil && m.BlockingKey != nil {
		return *m.BlockingKey
	}
	return false
}

// Hdfs DT related info in RT table
// keyId == principal-bucket-namespace-creationtimestamp, e.g. "hdfs@KDC.EMC.COM-kerbbucket-namespace"
type HdfsDelegationTokenKey struct {
	KeyId            *string `protobuf:"bytes,1,req,name=keyId" json:"keyId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HdfsDelegationTokenKey) Reset()                    { *m = HdfsDelegationTokenKey{} }
func (m *HdfsDelegationTokenKey) String() string            { return proto.CompactTextString(m) }
func (*HdfsDelegationTokenKey) ProtoMessage()               {}
func (*HdfsDelegationTokenKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{127} }

func (m *HdfsDelegationTokenKey) GetKeyId() string {
	if m != nil && m.KeyId != nil {
		return *m.KeyId
	}
	return ""
}

type HdfsSaltDataKey struct {
	KeyId            *string `protobuf:"bytes,1,req,name=keyId" json:"keyId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HdfsSaltDataKey) Reset()                    { *m = HdfsSaltDataKey{} }
func (m *HdfsSaltDataKey) String() string            { return proto.CompactTextString(m) }
func (*HdfsSaltDataKey) ProtoMessage()               {}
func (*HdfsSaltDataKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{128} }

func (m *HdfsSaltDataKey) GetKeyId() string {
	if m != nil && m.KeyId != nil {
		return *m.KeyId
	}
	return ""
}

type ListableTagKey struct {
	// bucket id
	KeypoolId *string `protobuf:"bytes,1,req,name=keypoolId" json:"keypoolId,omitempty"`
	// having uid as a separate field helps in elegant prefix searches
	UserId *string `protobuf:"bytes,2,req,name=userId" json:"userId,omitempty"`
	// tag name delimited by "/"
	TagName          *string `protobuf:"bytes,3,req,name=tagName" json:"tagName,omitempty"`
	ObjectId         *string `protobuf:"bytes,4,opt,name=objectId" json:"objectId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListableTagKey) Reset()                    { *m = ListableTagKey{} }
func (m *ListableTagKey) String() string            { return proto.CompactTextString(m) }
func (*ListableTagKey) ProtoMessage()               {}
func (*ListableTagKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{129} }

func (m *ListableTagKey) GetKeypoolId() string {
	if m != nil && m.KeypoolId != nil {
		return *m.KeypoolId
	}
	return ""
}

func (m *ListableTagKey) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *ListableTagKey) GetTagName() string {
	if m != nil && m.TagName != nil {
		return *m.TagName
	}
	return ""
}

func (m *ListableTagKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

type ListableTagUpgradeLSTaskKey struct {
	// key pool hash id
	KeypoolHashId    *string `protobuf:"bytes,1,req,name=keypoolHashId" json:"keypoolHashId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListableTagUpgradeLSTaskKey) Reset()                    { *m = ListableTagUpgradeLSTaskKey{} }
func (m *ListableTagUpgradeLSTaskKey) String() string            { return proto.CompactTextString(m) }
func (*ListableTagUpgradeLSTaskKey) ProtoMessage()               {}
func (*ListableTagUpgradeLSTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{130} }

func (m *ListableTagUpgradeLSTaskKey) GetKeypoolHashId() string {
	if m != nil && m.KeypoolHashId != nil {
		return *m.KeypoolHashId
	}
	return ""
}

type ListableTagUpgradeRTTaskKey struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ListableTagUpgradeRTTaskKey) Reset()                    { *m = ListableTagUpgradeRTTaskKey{} }
func (m *ListableTagUpgradeRTTaskKey) String() string            { return proto.CompactTextString(m) }
func (*ListableTagUpgradeRTTaskKey) ProtoMessage()               {}
func (*ListableTagUpgradeRTTaskKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{131} }

type FileKeyValKey struct {
	KeyId            *string `protobuf:"bytes,1,req,name=keyId" json:"keyId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileKeyValKey) Reset()                    { *m = FileKeyValKey{} }
func (m *FileKeyValKey) String() string            { return proto.CompactTextString(m) }
func (*FileKeyValKey) ProtoMessage()               {}
func (*FileKeyValKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{132} }

func (m *FileKeyValKey) GetKeyId() string {
	if m != nil && m.KeyId != nil {
		return *m.KeyId
	}
	return ""
}

type LockMgrKey struct {
	Type *LockMgrKey_Type `protobuf:"varint,1,req,name=type,enum=or.LockMgrKey_Type" json:"type,omitempty"`
	// Only for lock keys
	LockSpace        *string `protobuf:"bytes,2,opt,name=lockSpace" json:"lockSpace,omitempty"`
	ObjectId         *string `protobuf:"bytes,3,opt,name=objectId" json:"objectId,omitempty"`
	LockSequence     *int64  `protobuf:"varint,4,opt,name=lockSequence" json:"lockSequence,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *LockMgrKey) Reset()                    { *m = LockMgrKey{} }
func (m *LockMgrKey) String() string            { return proto.CompactTextString(m) }
func (*LockMgrKey) ProtoMessage()               {}
func (*LockMgrKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{133} }

func (m *LockMgrKey) GetType() LockMgrKey_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return LockMgrKey_GRANTED
}

func (m *LockMgrKey) GetLockSpace() string {
	if m != nil && m.LockSpace != nil {
		return *m.LockSpace
	}
	return ""
}

func (m *LockMgrKey) GetObjectId() string {
	if m != nil && m.ObjectId != nil {
		return *m.ObjectId
	}
	return ""
}

func (m *LockMgrKey) GetLockSequence() int64 {
	if m != nil && m.LockSequence != nil {
		return *m.LockSequence
	}
	return 0
}

type RepoReferenceCollectorKey struct {
	ChunkId          *string `protobuf:"bytes,1,req,name=chunkId" json:"chunkId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RepoReferenceCollectorKey) Reset()                    { *m = RepoReferenceCollectorKey{} }
func (m *RepoReferenceCollectorKey) String() string            { return proto.CompactTextString(m) }
func (*RepoReferenceCollectorKey) ProtoMessage()               {}
func (*RepoReferenceCollectorKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{134} }

func (m *RepoReferenceCollectorKey) GetChunkId() string {
	if m != nil && m.ChunkId != nil {
		return *m.ChunkId
	}
	return ""
}

type UserTagKey struct {
	UserId           *string `protobuf:"bytes,1,opt,name=userId" json:"userId,omitempty"`
	TagName          *string `protobuf:"bytes,2,req,name=tagName" json:"tagName,omitempty"`
	TagValue         *string `protobuf:"bytes,3,opt,name=tagValue" json:"tagValue,omitempty"`
	Namespace        *string `protobuf:"bytes,4,opt,name=namespace" json:"namespace,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UserTagKey) Reset()                    { *m = UserTagKey{} }
func (m *UserTagKey) String() string            { return proto.CompactTextString(m) }
func (*UserTagKey) ProtoMessage()               {}
func (*UserTagKey) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{135} }

func (m *UserTagKey) GetUserId() string {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return ""
}

func (m *UserTagKey) GetTagName() string {
	if m != nil && m.TagName != nil {
		return *m.TagName
	}
	return ""
}

func (m *UserTagKey) GetTagValue() string {
	if m != nil && m.TagValue != nil {
		return *m.TagValue
	}
	return ""
}

func (m *UserTagKey) GetNamespace() string {
	if m != nil && m.Namespace != nil {
		return *m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*SchemaKey)(nil), "or.SchemaKey")
	proto.RegisterType((*DefaultSchemaKey)(nil), "or.DefaultSchemaKey")
	proto.RegisterType((*DTRecordKey)(nil), "or.DTRecordKey")
	proto.RegisterType((*DTRecordJournalRegionSubKey)(nil), "or.DTRecordJournalRegionSubKey")
	proto.RegisterType((*DTRecordBPTreeInfoSubKey)(nil), "or.DTRecordBPTreeInfoSubKey")
	proto.RegisterType((*DTRecordBPTreeBootstrapSubKey)(nil), "or.DTRecordBPTreeBootstrapSubKey")
	proto.RegisterType((*DTRecordBPTreeBootstrapJournalSubKey)(nil), "or.DTRecordBPTreeBootstrapJournalSubKey")
	proto.RegisterType((*DTOwnerKey)(nil), "or.DTOwnerKey")
	proto.RegisterType((*TaskOrder)(nil), "or.TaskOrder")
	proto.RegisterType((*MTTableRecordKey)(nil), "or.MTTableRecordKey")
	proto.RegisterType((*MTStorageStatKey)(nil), "or.MTStorageStatKey")
	proto.RegisterType((*MTAggregatedStorageStatKey)(nil), "or.MTAggregatedStorageStatKey")
	proto.RegisterType((*MTBandwidthStatKey)(nil), "or.MTBandwidthStatKey")
	proto.RegisterType((*MTAggregatedBandwidthStatKey)(nil), "or.MTAggregatedBandwidthStatKey")
	proto.RegisterType((*MTRecordKey)(nil), "or.MTRecordKey")
	proto.RegisterType((*MTAggregateRecordKey)(nil), "or.MTAggregateRecordKey")
	proto.RegisterType((*MTNamespaceAggregationThresholdSubKey)(nil), "or.MTNamespaceAggregationThresholdSubKey")
	proto.RegisterType((*MTCheckForAggregationIssuesSubKey)(nil), "or.MTCheckForAggregationIssuesSubKey")
	proto.RegisterType((*MTBucketStatSubKey)(nil), "or.MTBucketStatSubKey")
	proto.RegisterType((*MTBandwidthStatSubKey)(nil), "or.MTBandwidthStatSubKey")
	proto.RegisterType((*MTBucketIntermediateStatSubKey)(nil), "or.MTBucketIntermediateStatSubKey")
	proto.RegisterType((*MTBucketFinalStatSubKey)(nil), "or.MTBucketFinalStatSubKey")
	proto.RegisterType((*MTFixAggregateStatSubKey)(nil), "or.MTFixAggregateStatSubKey")
	proto.RegisterType((*MTNamespaceIntermediateStatSubKey)(nil), "or.MTNamespaceIntermediateStatSubKey")
	proto.RegisterType((*MTNamespaceStatSubKey)(nil), "or.MTNamespaceStatSubKey")
	proto.RegisterType((*MTNamespaceFixAggregateStatSubKey)(nil), "or.MTNamespaceFixAggregateStatSubKey")
	proto.RegisterType((*MTNodeFinalStatSubKey)(nil), "or.MTNodeFinalStatSubKey")
	proto.RegisterType((*MTZoneStatSubKey)(nil), "or.MTZoneStatSubKey")
	proto.RegisterType((*MTZoneFinalStatSubKey)(nil), "or.MTZoneFinalStatSubKey")
	proto.RegisterType((*MTObjectDeltaSubKey)(nil), "or.MTObjectDeltaSubKey")
	proto.RegisterType((*MTAggregatedObjectDeltaSubKey)(nil), "or.MTAggregatedObjectDeltaSubKey")
	proto.RegisterType((*MTPosRefProcessingMarkerSubKey)(nil), "or.MTPosRefProcessingMarkerSubKey")
	proto.RegisterType((*MTProgressMarkerSubKey)(nil), "or.MTProgressMarkerSubKey")
	proto.RegisterType((*MTBlobPosStartMajorKey)(nil), "or.MTBlobPosStartMajorKey")
	proto.RegisterType((*MTGeoMetricsNodeStatKey)(nil), "or.MTGeoMetricsNodeStatKey")
	proto.RegisterType((*MTGeoMetricsNodeStatTrashKey)(nil), "or.MTGeoMetricsNodeStatTrashKey")
	proto.RegisterType((*MTGeoMetricsRGFinalStatKey)(nil), "or.MTGeoMetricsRGFinalStatKey")
	proto.RegisterType((*MTGeoMetricsZoneFinalStatKey)(nil), "or.MTGeoMetricsZoneFinalStatKey")
	proto.RegisterType((*RMTaskKey)(nil), "or.RMTaskKey")
	proto.RegisterType((*ObjectTableKey)(nil), "or.ObjectTableKey")
	proto.RegisterType((*RMTaskJournalEntryGeoSendKey)(nil), "or.RMTaskJournalEntryGeoSendKey")
	proto.RegisterType((*RMTaskRecoveryPointSendKey)(nil), "or.RMTaskRecoveryPointSendKey")
	proto.RegisterType((*SSTableRecordKey)(nil), "or.SSTableRecordKey")
	proto.RegisterType((*SSTableDeviceEntryKey)(nil), "or.SSTableDeviceEntryKey")
	proto.RegisterType((*SSTablePartitionEntryKey)(nil), "or.SSTablePartitionEntryKey")
	proto.RegisterType((*SSTableFreeBlockEntryKey)(nil), "or.SSTableFreeBlockEntryKey")
	proto.RegisterType((*SSTableBusyBlockEntryKey)(nil), "or.SSTableBusyBlockEntryKey")
	proto.RegisterType((*SSTableBlockBinEntryKey)(nil), "or.SSTableBlockBinEntryKey")
	proto.RegisterType((*SSTableBlockLevelTaskKey)(nil), "or.SSTableBlockLevelTaskKey")
	proto.RegisterType((*DTBootstrapTaskKey)(nil), "or.DTBootstrapTaskKey")
	proto.RegisterType((*GCRefCollectionKey)(nil), "or.GCRefCollectionKey")
	proto.RegisterType((*ChunkTagKey)(nil), "or.ChunkTagKey")
	proto.RegisterType((*ChunkKey)(nil), "or.ChunkKey")
	proto.RegisterType((*RepoChunkGarbageInfoKey)(nil), "or.RepoChunkGarbageInfoKey")
	proto.RegisterType((*CMTaskKey)(nil), "or.CMTaskKey")
	proto.RegisterType((*BTreeReclaimProgress)(nil), "or.BTreeReclaimProgress")
	proto.RegisterType((*CMTaskProgress)(nil), "or.CMTaskProgress")
	proto.RegisterType((*CMEcTaskKey)(nil), "or.CMEcTaskKey")
	proto.RegisterType((*CMGeoInfoSendTaskKey)(nil), "or.CMGeoInfoSendTaskKey")
	proto.RegisterType((*CMGeoDataSendTaskValue)(nil), "or.CMGeoDataSendTaskValue")
	proto.RegisterType((*CMGeoDataSendTaskKey)(nil), "or.CMGeoDataSendTaskKey")
	proto.RegisterType((*CMGeoCopyTaskKey)(nil), "or.CMGeoCopyTaskKey")
	proto.RegisterType((*CMXorGroupTaskKey)(nil), "or.CMXorGroupTaskKey")
	proto.RegisterType((*CMXorEncodeTaskKey)(nil), "or.CMXorEncodeTaskKey")
	proto.RegisterType((*CMXorDecodeTaskKey)(nil), "or.CMXorDecodeTaskKey")
	proto.RegisterType((*CMJobKey)(nil), "or.CMJobKey")
	proto.RegisterType((*CMProgressKey)(nil), "or.CMProgressKey")
	proto.RegisterType((*ChunkSequenceKey)(nil), "or.ChunkSequenceKey")
	proto.RegisterType((*RgReconfigTaskKey)(nil), "or.RgReconfigTaskKey")
	proto.RegisterType((*ListEntryKey)(nil), "or.ListEntryKey")
	proto.RegisterType((*DeleteJobTableKey)(nil), "or.DeleteJobTableKey")
	proto.RegisterType((*ReconcileTaskKey)(nil), "or.ReconcileTaskKey")
	proto.RegisterType((*BtreeReferenceKey)(nil), "or.BtreeReferenceKey")
	proto.RegisterType((*RepoReferenceKey)(nil), "or.RepoReferenceKey")
	proto.RegisterType((*NamespaceKey)(nil), "or.NamespaceKey")
	proto.RegisterType((*AlertKey)(nil), "or.AlertKey")
	proto.RegisterType((*AlertStatsKey)(nil), "or.AlertStatsKey")
	proto.RegisterType((*AuditKey)(nil), "or.AuditKey")
	proto.RegisterType((*FabricSequenceKey)(nil), "or.FabricSequenceKey")
	proto.RegisterType((*BucketKey)(nil), "or.BucketKey")
	proto.RegisterType((*DeletedBucketKey)(nil), "or.DeletedBucketKey")
	proto.RegisterType((*UserKey)(nil), "or.UserKey")
	proto.RegisterType((*ConfigKey)(nil), "or.ConfigKey")
	proto.RegisterType((*RGKey)(nil), "or.RGKey")
	proto.RegisterType((*RGUpdateKey)(nil), "or.RGUpdateKey")
	proto.RegisterType((*ResourceTableBootstrapTaskKey)(nil), "or.ResourceTableBootstrapTaskKey")
	proto.RegisterType((*NKEntryKey)(nil), "or.NKEntryKey")
	proto.RegisterType((*NKEntryReplicationTaskKey)(nil), "or.NKEntryReplicationTaskKey")
	proto.RegisterType((*ZKConfigKey)(nil), "or.ZKConfigKey")
	proto.RegisterType((*ZoneInfoKey)(nil), "or.ZoneInfoKey")
	proto.RegisterType((*ViprNestKey)(nil), "or.ViprNestKey")
	proto.RegisterType((*ViprNestSystemKey)(nil), "or.ViprNestSystemKey")
	proto.RegisterType((*GcProgressKey)(nil), "or.GcProgressKey")
	proto.RegisterType((*CachedChunkKey)(nil), "or.CachedChunkKey")
	proto.RegisterType((*VNestTaskKey)(nil), "or.VNestTaskKey")
	proto.RegisterType((*VNestLeaderElectionKey)(nil), "or.VNestLeaderElectionKey")
	proto.RegisterType((*PaxosTaskKey)(nil), "or.PaxosTaskKey")
	proto.RegisterType((*PaxosDeleteSubKey)(nil), "or.PaxosDeleteSubKey")
	proto.RegisterType((*PaxosPurgeSubKey)(nil), "or.PaxosPurgeSubKey")
	proto.RegisterType((*PaxosElectionNotificationSubKey)(nil), "or.PaxosElectionNotificationSubKey")
	proto.RegisterType((*PaxosCommitNotificationSubKey)(nil), "or.PaxosCommitNotificationSubKey")
	proto.RegisterType((*VNestReconfigKey)(nil), "or.VNestReconfigKey")
	proto.RegisterType((*ChunkReferenceScanProgressKey)(nil), "or.ChunkReferenceScanProgressKey")
	proto.RegisterType((*BTreeCorruptionScanProgressKey)(nil), "or.BTreeCorruptionScanProgressKey")
	proto.RegisterType((*ChunkGcScanStatusKey)(nil), "or.ChunkGcScanStatusKey")
	proto.RegisterType((*ChunkGcScanStatusTaskKey)(nil), "or.ChunkGcScanStatusTaskKey")
	proto.RegisterType((*OBMeteringCollectorTaskKey)(nil), "or.OBMeteringCollectorTaskKey")
	proto.RegisterType((*RejoinTaskKey)(nil), "or.RejoinTaskKey")
	proto.RegisterType((*TempFailedZoneStatusTransitionTaskKey)(nil), "or.TempFailedZoneStatusTransitionTaskKey")
	proto.RegisterType((*RefTableRebuildTaskKey)(nil), "or.RefTableRebuildTaskKey")
	proto.RegisterType((*RefTableRebuildDoneMarkerKey)(nil), "or.RefTableRebuildDoneMarkerKey")
	proto.RegisterType((*TokenKey)(nil), "or.TokenKey")
	proto.RegisterType((*LoginKey)(nil), "or.LoginKey")
	proto.RegisterType((*AuthProviderKey)(nil), "or.AuthProviderKey")
	proto.RegisterType((*DynamicConfigKey)(nil), "or.DynamicConfigKey")
	proto.RegisterType((*DtCleanupKey)(nil), "or.DtCleanupKey")
	proto.RegisterType((*MTLeftoverNegRefTaskKey)(nil), "or.MTLeftoverNegRefTaskKey")
	proto.RegisterType((*StatsBackupKey)(nil), "or.StatsBackupKey")
	proto.RegisterType((*EcsVersionKey)(nil), "or.EcsVersionKey")
	proto.RegisterType((*RepoChunkProgressKey)(nil), "or.RepoChunkProgressKey")
	proto.RegisterType((*AuthTokenCountKey)(nil), "or.AuthTokenCountKey")
	proto.RegisterType((*RepoUsageKey)(nil), "or.RepoUsageKey")
	proto.RegisterType((*RepoUsageChunkKey)(nil), "or.RepoUsageChunkKey")
	proto.RegisterType((*RepoUsagePartialGCContextKey)(nil), "or.RepoUsagePartialGCContextKey")
	proto.RegisterType((*PartialGCTaskKey)(nil), "or.PartialGCTaskKey")
	proto.RegisterType((*MIEntryKey)(nil), "or.MIEntryKey")
	proto.RegisterType((*MIRejoinTaskKey)(nil), "or.MIRejoinTaskKey")
	proto.RegisterType((*HdfsDelegationTokenKey)(nil), "or.HdfsDelegationTokenKey")
	proto.RegisterType((*HdfsSaltDataKey)(nil), "or.HdfsSaltDataKey")
	proto.RegisterType((*ListableTagKey)(nil), "or.ListableTagKey")
	proto.RegisterType((*ListableTagUpgradeLSTaskKey)(nil), "or.ListableTagUpgradeLSTaskKey")
	proto.RegisterType((*ListableTagUpgradeRTTaskKey)(nil), "or.ListableTagUpgradeRTTaskKey")
	proto.RegisterType((*FileKeyValKey)(nil), "or.FileKeyValKey")
	proto.RegisterType((*LockMgrKey)(nil), "or.LockMgrKey")
	proto.RegisterType((*RepoReferenceCollectorKey)(nil), "or.RepoReferenceCollectorKey")
	proto.RegisterType((*UserTagKey)(nil), "or.UserTagKey")
	proto.RegisterEnum("or.SchemaKeyType", SchemaKeyType_name, SchemaKeyType_value)
	proto.RegisterEnum("or.GeoDataSendPurpose", GeoDataSendPurpose_name, GeoDataSendPurpose_value)
	proto.RegisterEnum("or.SecondaryIndexMetadataType", SecondaryIndexMetadataType_name, SecondaryIndexMetadataType_value)
	proto.RegisterEnum("or.SecondaryIndexValueType", SecondaryIndexValueType_name, SecondaryIndexValueType_value)
	proto.RegisterEnum("or.DTRecordKey_DTRecordKeyType", DTRecordKey_DTRecordKeyType_name, DTRecordKey_DTRecordKeyType_value)
	proto.RegisterEnum("or.MTTableRecordKey_Type", MTTableRecordKey_Type_name, MTTableRecordKey_Type_value)
	proto.RegisterEnum("or.MTStorageStatKey_State", MTStorageStatKey_State_name, MTStorageStatKey_State_value)
	proto.RegisterEnum("or.MTRecordKey_MTRecordKeyType", MTRecordKey_MTRecordKeyType_name, MTRecordKey_MTRecordKeyType_value)
	proto.RegisterEnum("or.MTAggregateRecordKey_MTAggregateRecordKeyType", MTAggregateRecordKey_MTAggregateRecordKeyType_name, MTAggregateRecordKey_MTAggregateRecordKeyType_value)
	proto.RegisterEnum("or.RMTaskKey_RMTaskType", RMTaskKey_RMTaskType_name, RMTaskKey_RMTaskType_value)
	proto.RegisterEnum("or.ObjectTableKey_ObjectTableKeyType", ObjectTableKey_ObjectTableKeyType_name, ObjectTableKey_ObjectTableKeyType_value)
	proto.RegisterEnum("or.ObjectTableKey_ObjectIndexKeySubType", ObjectTableKey_ObjectIndexKeySubType_name, ObjectTableKey_ObjectIndexKeySubType_value)
	proto.RegisterEnum("or.SSTableRecordKey_Type", SSTableRecordKey_Type_name, SSTableRecordKey_Type_value)
	proto.RegisterEnum("or.SSTableBlockLevelTaskKey_Type", SSTableBlockLevelTaskKey_Type_name, SSTableBlockLevelTaskKey_Type_value)
	proto.RegisterEnum("or.GCRefCollectionKey_GCRefType", GCRefCollectionKey_GCRefType_name, GCRefCollectionKey_GCRefType_value)
	proto.RegisterEnum("or.CMTaskKey_CMTaskType", CMTaskKey_CMTaskType_name, CMTaskKey_CMTaskType_value)
	proto.RegisterEnum("or.CMTaskProgress_TaskStatus", CMTaskProgress_TaskStatus_name, CMTaskProgress_TaskStatus_value)
	proto.RegisterEnum("or.CMEcTaskKey_ChunkType", CMEcTaskKey_ChunkType_name, CMEcTaskKey_ChunkType_value)
	proto.RegisterEnum("or.CMGeoInfoSendTaskKey_UpdateType", CMGeoInfoSendTaskKey_UpdateType_name, CMGeoInfoSendTaskKey_UpdateType_value)
	proto.RegisterEnum("or.CMJobKey_CMJobType", CMJobKey_CMJobType_name, CMJobKey_CMJobType_value)
	proto.RegisterEnum("or.CMProgressKey_CMProgressType", CMProgressKey_CMProgressType_name, CMProgressKey_CMProgressType_value)
	proto.RegisterEnum("or.RgReconfigTaskKey_ReconfigType", RgReconfigTaskKey_ReconfigType_name, RgReconfigTaskKey_ReconfigType_value)
	proto.RegisterEnum("or.ListEntryKey_ListEntryType", ListEntryKey_ListEntryType_name, ListEntryKey_ListEntryType_value)
	proto.RegisterEnum("or.DeleteJobTableKey_DeleteJobTableKeyType", DeleteJobTableKey_DeleteJobTableKeyType_name, DeleteJobTableKey_DeleteJobTableKeyType_value)
	proto.RegisterEnum("or.DeleteJobTableKey_KeyVersionType", DeleteJobTableKey_KeyVersionType_name, DeleteJobTableKey_KeyVersionType_value)
	proto.RegisterEnum("or.RepoReferenceKey_ReferenceType", RepoReferenceKey_ReferenceType_name, RepoReferenceKey_ReferenceType_value)
	proto.RegisterEnum("or.RepoReferenceKey_CrossType", RepoReferenceKey_CrossType_name, RepoReferenceKey_CrossType_value)
	proto.RegisterEnum("or.NKEntryReplicationTaskKey_NKTaskType", NKEntryReplicationTaskKey_NKTaskType_name, NKEntryReplicationTaskKey_NKTaskType_value)
	proto.RegisterEnum("or.ZKConfigKey_ConfigKeyType", ZKConfigKey_ConfigKeyType_name, ZKConfigKey_ConfigKeyType_value)
	proto.RegisterEnum("or.ViprNestSystemKey_SystemKeyType", ViprNestSystemKey_SystemKeyType_name, ViprNestSystemKey_SystemKeyType_value)
	proto.RegisterEnum("or.VNestTaskKey_VNestTaskType", VNestTaskKey_VNestTaskType_name, VNestTaskKey_VNestTaskType_value)
	proto.RegisterEnum("or.PaxosTaskKey_PaxosTaskType", PaxosTaskKey_PaxosTaskType_name, PaxosTaskKey_PaxosTaskType_value)
	proto.RegisterEnum("or.ChunkReferenceScanProgressKey_ChunkDataType", ChunkReferenceScanProgressKey_ChunkDataType_name, ChunkReferenceScanProgressKey_ChunkDataType_value)
	proto.RegisterEnum("or.BTreeCorruptionScanProgressKey_ProgressType", BTreeCorruptionScanProgressKey_ProgressType_name, BTreeCorruptionScanProgressKey_ProgressType_value)
	proto.RegisterEnum("or.ChunkGcScanStatusTaskKey_ChunkDataType", ChunkGcScanStatusTaskKey_ChunkDataType_name, ChunkGcScanStatusTaskKey_ChunkDataType_value)
	proto.RegisterEnum("or.DynamicConfigKey_KeyType", DynamicConfigKey_KeyType_name, DynamicConfigKey_KeyType_value)
	proto.RegisterEnum("or.PartialGCTaskKey_PartialGCTaskState", PartialGCTaskKey_PartialGCTaskState_name, PartialGCTaskKey_PartialGCTaskState_value)
	proto.RegisterEnum("or.LockMgrKey_Type", LockMgrKey_Type_name, LockMgrKey_Type_value)
}

func init() { proto.RegisterFile("SchemaKeyRecords.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 7349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x7c, 0xdf, 0x6f, 0xe4, 0xc8,
	0x71, 0xf0, 0x72, 0x66, 0xf4, 0x63, 0x4a, 0xbf, 0x28, 0xae, 0x56, 0xab, 0xd3, 0xee, 0xea, 0xb4,
	0xbc, 0xbd, 0xdb, 0xf5, 0xae, 0x4f, 0xde, 0xdd, 0xf3, 0xd9, 0xbe, 0xf3, 0xd9, 0x67, 0x0e, 0xc9,
	0x19, 0x71, 0x35, 0x43, 0x8e, 0x49, 0x8e, 0x6e, 0x75, 0x0f, 0xdf, 0x80, 0x3b, 0xd3, 0x92, 0xe6,
	0x34, 0x1a, 0x8e, 0x39, 0x9c, 0xf5, 0xea, 0xe0, 0x0f, 0xf8, 0x80, 0xef, 0x83, 0x81, 0xef, 0x83,
	0xbf, 0x1f, 0xfe, 0x80, 0x18, 0xc9, 0x43, 0xe0, 0xc7, 0x3c, 0x04, 0x09, 0x0c, 0x24, 0x40, 0x92,
	0x97, 0x00, 0x7e, 0x0a, 0x1c, 0x20, 0x09, 0x02, 0x23, 0xff, 0x45, 0x80, 0xf8, 0xd5, 0x4f, 0x09,
	0xaa, 0xbb, 0x49, 0x36, 0x47, 0x23, 0xed, 0x7a, 0xcf, 0x36, 0xf2, 0x20, 0x88, 0x55, 0x5d, 0xdd,
	0x5d, 0xac, 0xae, 0xae, 0xae, 0xaa, 0x2e, 0x0e, 0xac, 0x7b, 0x9d, 0x63, 0x72, 0x1a, 0xec, 0x91,
	0x33, 0x97, 0x74, 0xc2, 0xa8, 0x3b, 0xda, 0x19, 0x46, 0x61, 0x1c, 0x2a, 0x85, 0x30, 0x52, 0xeb,
	0x50, 0x4e, 0x5b, 0x95, 0xb7, 0xa1, 0x14, 0x9f, 0x0d, 0xc9, 0x86, 0xb4, 0x5d, 0xb8, 0xb7, 0xfc,
	0x78, 0x75, 0x27, 0x8c, 0x76, 0xd2, 0x46, 0xff, 0x6c, 0x48, 0x5c, 0xda, 0xac, 0x6c, 0xc0, 0xdc,
	0x78, 0x44, 0xa2, 0x3d, 0x72, 0xb6, 0x51, 0xd8, 0x2e, 0xdc, 0x5b, 0x74, 0x13, 0x50, 0xf5, 0x41,
	0x36, 0xc8, 0x61, 0x30, 0xee, 0xc7, 0xd9, 0xa0, 0xeb, 0x30, 0x3b, 0x0c, 0x22, 0x32, 0x88, 0xe9,
	0xb0, 0x65, 0x97, 0x43, 0x8a, 0xc2, 0x27, 0x2b, 0x50, 0x2c, 0x1b, 0x79, 0x0d, 0x66, 0x3a, 0xc7,
	0xbd, 0x7e, 0x77, 0xa3, 0x48, 0x91, 0x0c, 0x50, 0x7f, 0x32, 0x03, 0x0b, 0x86, 0xcf, 0x78, 0xc7,
	0x11, 0xdf, 0xcb, 0xb1, 0xf9, 0x26, 0xb2, 0x29, 0x34, 0x8b, 0xcf, 0x02, 0xd3, 0x0a, 0x94, 0xba,
	0xb1, 0xd5, 0x4d, 0xa6, 0xc3, 0x67, 0xc4, 0x7d, 0x1e, 0x0e, 0x08, 0x9f, 0x8d, 0x3e, 0x23, 0xbb,
	0xa3, 0xf1, 0x33, 0x7c, 0xb7, 0x12, 0x7d, 0x37, 0x0e, 0xa9, 0x3f, 0x2e, 0xc1, 0xca, 0xc4, 0xc8,
	0x8a, 0x02, 0xcb, 0x4f, 0x9c, 0x96, 0x6b, 0x6b, 0xf5, 0xb6, 0x6b, 0xd6, 0x2c, 0xc7, 0x96, 0xaf,
	0x28, 0x6f, 0xc0, 0xb5, 0x04, 0xd7, 0xd4, 0x5c, 0xcf, 0x74, 0xdb, 0x0d, 0xcd, 0xdd, 0x33, 0x5d,
	0x59, 0x52, 0x6e, 0xc1, 0x1b, 0x79, 0xf2, 0x76, 0xcd, 0x74, 0x92, 0xe6, 0x82, 0x72, 0x13, 0x36,
	0x26, 0x9b, 0xf5, 0xa4, 0xb5, 0x88, 0x73, 0x55, 0x9a, 0xf5, 0x96, 0xe7, 0xbb, 0xa6, 0xd9, 0xb6,
	0xec, 0xaa, 0x23, 0x97, 0x70, 0xae, 0x0c, 0x67, 0xb4, 0x1a, 0xcd, 0x84, 0x7c, 0x46, 0xb9, 0x01,
	0xd7, 0xb3, 0xa6, 0x3c, 0x23, 0xb3, 0xca, 0x9b, 0x70, 0xc3, 0xa9, 0x3c, 0x31, 0x75, 0xbf, 0x6d,
	0xd9, 0x86, 0xf9, 0xb4, 0x5d, 0x75, 0xdc, 0x86, 0xe6, 0xb7, 0xf7, 0x4d, 0xd7, 0xc3, 0x97, 0x98,
	0x53, 0xee, 0xc3, 0x3b, 0x35, 0xd3, 0x71, 0xcd, 0x66, 0x5d, 0x3b, 0x30, 0xdd, 0x36, 0x3e, 0x58,
	0xba, 0xe6, 0x23, 0x4f, 0xfa, 0xae, 0xa9, 0xef, 0x65, 0x83, 0xcd, 0x4f, 0xd2, 0xea, 0x8e, 0xed,
	0x59, 0x9e, 0x6f, 0xda, 0xfa, 0xc1, 0x24, 0x6d, 0x59, 0x79, 0x0c, 0x3b, 0x19, 0x57, 0xe2, 0xa8,
	0x15, 0xc7, 0xf1, 0x3d, 0xdf, 0xd5, 0x9a, 0xed, 0x44, 0x04, 0xbc, 0x0f, 0x28, 0x5b, 0xb0, 0x99,
	0xf5, 0xc9, 0xe8, 0x78, 0xfb, 0x42, 0xbe, 0xdd, 0x35, 0x75, 0x67, 0xdf, 0x74, 0x0f, 0xda, 0xbe,
	0xab, 0xe1, 0xd4, 0xf2, 0xa2, 0xb2, 0x02, 0x0b, 0xce, 0x27, 0xb6, 0xe9, 0xb6, 0xcd, 0xa6, 0xa3,
	0xef, 0xca, 0x4b, 0xca, 0x1d, 0xd8, 0xce, 0x3a, 0x38, 0x95, 0x86, 0xe9, 0x9b, 0xae, 0x65, 0xd7,
	0xda, 0x9e, 0xae, 0xd9, 0xc9, 0xb0, 0xcb, 0x8a, 0x0a, 0x5b, 0x69, 0xcb, 0xf4, 0x05, 0x5d, 0x51,
	0x2d, 0xb8, 0x91, 0xa8, 0xc4, 0x93, 0x70, 0x1c, 0x0d, 0x82, 0xbe, 0x4b, 0x8e, 0x7a, 0xe1, 0xc0,
	0xa3, 0x2a, 0x83, 0xda, 0x7c, 0x1a, 0x7c, 0x16, 0x46, 0x5c, 0xf1, 0x19, 0x40, 0xb1, 0xbd, 0x41,
	0x18, 0x71, 0x4d, 0x64, 0x80, 0x5a, 0x85, 0x8d, 0x64, 0xa8, 0x4a, 0xd3, 0x8f, 0x08, 0xb1, 0x06,
	0x87, 0xe1, 0x6b, 0x8c, 0xf3, 0x01, 0xdc, 0xca, 0x8f, 0x53, 0x09, 0xc3, 0x78, 0x14, 0x47, 0xc1,
	0x90, 0x0f, 0xb6, 0x01, 0x73, 0xdd, 0x51, 0xfc, 0x29, 0xaa, 0x3d, 0x1b, 0x2e, 0x01, 0xd5, 0x0f,
	0xe1, 0xce, 0x05, 0x5d, 0xf9, 0xcb, 0xf1, 0x11, 0x14, 0x28, 0x45, 0x47, 0x56, 0x97, 0x77, 0xa7,
	0xcf, 0xea, 0x37, 0x00, 0x0c, 0xdf, 0xf9, 0xfe, 0x80, 0x9a, 0x01, 0xdc, 0x43, 0xdd, 0xd8, 0x4f,
	0xb6, 0x68, 0xd9, 0xe5, 0xd0, 0xb4, 0x3d, 0xa8, 0xde, 0x86, 0xb2, 0x1f, 0x8c, 0x4e, 0x9c, 0xa8,
	0x4b, 0xe8, 0x3b, 0x85, 0xf8, 0x40, 0xfb, 0x15, 0x5d, 0x06, 0xa8, 0x7f, 0x22, 0x81, 0xdc, 0xf0,
	0xfd, 0xe0, 0x59, 0x9f, 0x64, 0x46, 0xe0, 0xdd, 0x9c, 0x11, 0x78, 0x03, 0x8d, 0xc0, 0x24, 0xcd,
	0x8e, 0xb0, 0xfd, 0xb3, 0x6d, 0x5d, 0xc8, 0x6d, 0xeb, 0x3a, 0x94, 0x28, 0x6b, 0x32, 0x2c, 0x7a,
	0xbe, 0xe3, 0x6a, 0x35, 0xb3, 0xed, 0xf9, 0x9a, 0x2f, 0x5f, 0x51, 0xd6, 0x40, 0xd6, 0x6a, 0xb5,
	0x76, 0x0e, 0x5b, 0x50, 0x16, 0x60, 0xae, 0xf2, 0x09, 0x03, 0x8a, 0xa8, 0x5a, 0x48, 0x92, 0x20,
	0x4a, 0xea, 0x5f, 0x52, 0x4e, 0xbd, 0x38, 0x8c, 0x82, 0x23, 0xe2, 0xc5, 0x41, 0xcc, 0xe5, 0x65,
	0xc4, 0x99, 0xbc, 0xf0, 0x59, 0xf9, 0x06, 0x94, 0xb1, 0x19, 0xff, 0xd0, 0x02, 0x4a, 0xf7, 0x96,
	0x1f, 0x6f, 0xb2, 0x57, 0xc8, 0x77, 0xde, 0xa1, 0x14, 0x6e, 0x46, 0xac, 0xdc, 0x07, 0x59, 0x0f,
	0xfb, 0x7d, 0xd2, 0x89, 0xc3, 0x68, 0x9f, 0x44, 0xa3, 0x5e, 0x38, 0xa0, 0xf6, 0xab, 0xe8, 0x9e,
	0xc3, 0xab, 0xef, 0xc0, 0x0c, 0xeb, 0xb4, 0x0c, 0x60, 0x0d, 0x9a, 0x51, 0x78, 0x14, 0x91, 0xd1,
	0x48, 0xbe, 0xa2, 0x2c, 0x41, 0x59, 0x0f, 0x4f, 0x87, 0x7d, 0x12, 0x93, 0xae, 0x2c, 0xa9, 0x4f,
	0x60, 0xb3, 0xe1, 0x6b, 0x47, 0x47, 0x11, 0x39, 0x0a, 0x62, 0xd2, 0x9d, 0xe0, 0xff, 0xcb, 0xb0,
	0x9a, 0xb4, 0x65, 0x53, 0xb2, 0x05, 0x3a, 0xdf, 0xa0, 0x3e, 0x05, 0xa5, 0xe1, 0x57, 0x82, 0x41,
	0xf7, 0xfb, 0xbd, 0x6e, 0x7c, 0x9c, 0x8c, 0xb1, 0x0e, 0xb3, 0x76, 0xd8, 0x25, 0xa9, 0x14, 0x38,
	0x84, 0x6f, 0x93, 0xd2, 0x26, 0x43, 0x17, 0xd8, 0xdb, 0x4c, 0xe2, 0xd5, 0x3a, 0xdc, 0x14, 0xb9,
	0x3c, 0x37, 0xc7, 0x6f, 0xc6, 0xe7, 0x3f, 0x14, 0x61, 0xa1, 0x71, 0xf9, 0xa1, 0x22, 0x34, 0x8b,
	0xcf, 0xaf, 0xa0, 0x55, 0xbf, 0x2a, 0xc0, 0xca, 0x44, 0x0f, 0x54, 0x96, 0x4a, 0x4b, 0xdf, 0x33,
	0xfd, 0x44, 0xc1, 0x6e, 0xc2, 0x06, 0x47, 0x58, 0xb6, 0x6f, 0xba, 0x0d, 0xd3, 0xb0, 0x34, 0x9f,
	0x2b, 0x9a, 0x44, 0xed, 0xbd, 0x66, 0x1b, 0x9f, 0x58, 0x86, 0xbf, 0x9b, 0x28, 0x9f, 0x0c, 0x8b,
	0xdc, 0x6e, 0x1b, 0x66, 0xdd, 0xd7, 0xe4, 0xa2, 0x72, 0x0d, 0x56, 0x85, 0x41, 0xd1, 0xea, 0x79,
	0xbb, 0x72, 0x49, 0xd9, 0x80, 0xb5, 0x7c, 0x67, 0xde, 0x32, 0x93, 0x68, 0x75, 0x6e, 0x18, 0x7a,
	0x20, 0xd8, 0x5a, 0xc3, 0xf4, 0x9a, 0x9a, 0x6e, 0x4e, 0xe1, 0x86, 0x1e, 0x08, 0x17, 0x10, 0x68,
	0xb5, 0x9a, 0x6b, 0xd6, 0x34, 0xdf, 0x34, 0x18, 0xed, 0xbc, 0xf2, 0x16, 0xbc, 0x99, 0xd1, 0x26,
	0xcd, 0x68, 0xe4, 0xfd, 0x5d, 0xd7, 0xf4, 0x76, 0x9d, 0xba, 0x21, 0x97, 0x95, 0xeb, 0x70, 0xb5,
	0xe9, 0x78, 0x96, 0x6f, 0xed, 0xa3, 0xd1, 0xae, 0x66, 0xe6, 0xfe, 0x26, 0x6c, 0xa4, 0x76, 0xb7,
	0xe9, 0x3a, 0x35, 0xd7, 0xf4, 0xbc, 0xcc, 0xd8, 0xe3, 0x8b, 0xd5, 0x9d, 0x4a, 0xbb, 0xe9, 0x78,
	0x38, 0x9d, 0xeb, 0xb7, 0x1b, 0xda, 0x13, 0xc7, 0x95, 0x17, 0xd5, 0x1f, 0xce, 0xc0, 0x9a, 0xa0,
	0x1e, 0xd9, 0xc2, 0x9a, 0xb9, 0x85, 0x7d, 0xc4, 0x16, 0xf6, 0x3c, 0xdd, 0x54, 0xe4, 0x2b, 0x2c,
	0xf5, 0xff, 0x29, 0xc1, 0xc6, 0x45, 0x5d, 0x2f, 0x5d, 0xe2, 0x2b, 0x78, 0xc4, 0x5c, 0xd4, 0xca,
	0xd7, 0x4b, 0x52, 0xd6, 0x41, 0xa9, 0x5a, 0x4f, 0x33, 0x29, 0x27, 0xaa, 0x90, 0x2d, 0x7c, 0xd5,
	0xc2, 0xa3, 0x89, 0x5b, 0x24, 0x05, 0x96, 0x33, 0xd9, 0x33, 0xa3, 0xf4, 0xb2, 0xc5, 0x9d, 0x51,
	0xde, 0x86, 0xdb, 0x97, 0x10, 0x70, 0x56, 0x66, 0x95, 0x6d, 0xb8, 0x89, 0xac, 0x9c, 0x5f, 0xdb,
	0x54, 0x4b, 0xae, 0xc2, 0x8a, 0xed, 0x18, 0xbc, 0x1b, 0xe5, 0x8b, 0xad, 0xb4, 0xb7, 0x6b, 0x35,
	0xdb, 0x59, 0x8b, 0xaf, 0x79, 0x7b, 0x32, 0xa0, 0x11, 0xfa, 0xd4, 0xb1, 0x79, 0xe7, 0x05, 0xec,
	0x9c, 0x82, 0x7c, 0xce, 0xc5, 0x3c, 0x92, 0x8d, 0xb8, 0x84, 0x8c, 0x50, 0xcf, 0x02, 0xfd, 0x96,
	0x9c, 0x82, 0x59, 0x9e, 0xd7, 0x32, 0x3d, 0x79, 0x19, 0x1d, 0x23, 0xea, 0x5a, 0x99, 0xbe, 0x6b,
	0xe9, 0x5e, 0x36, 0xb5, 0xbc, 0x82, 0xd2, 0x98, 0xda, 0xc4, 0xa7, 0x94, 0x27, 0x09, 0x26, 0xa7,
	0x5f, 0x45, 0x37, 0x4e, 0x24, 0x70, 0x6b, 0x62, 0xb3, 0xa2, 0x7e, 0x13, 0xde, 0x6e, 0xf8, 0x76,
	0x70, 0x4a, 0x46, 0xc3, 0xa0, 0x43, 0x12, 0xc5, 0xe8, 0x85, 0x03, 0xff, 0x38, 0x22, 0xa3, 0xe3,
	0xb0, 0xdf, 0xcd, 0xce, 0xd1, 0xae, 0x70, 0x2e, 0xd0, 0xd3, 0xf0, 0xeb, 0x70, 0xbb, 0xe1, 0xeb,
	0xc7, 0xa4, 0x73, 0x52, 0x0d, 0x23, 0xa1, 0xaf, 0x35, 0x1a, 0x8d, 0xc9, 0xe8, 0x92, 0x8e, 0xff,
	0xa3, 0x40, 0xed, 0xee, 0xb8, 0x73, 0x42, 0xe8, 0x41, 0xc1, 0x49, 0x6f, 0x42, 0x79, 0x90, 0xb0,
	0xc2, 0xe9, 0x33, 0x04, 0xea, 0xf4, 0x33, 0xda, 0x83, 0x9f, 0xc8, 0x1c, 0xa2, 0xae, 0x79, 0xef,
	0x94, 0xf0, 0x73, 0x85, 0x3e, 0xa7, 0x93, 0x96, 0x04, 0xff, 0x79, 0x0b, 0x20, 0x22, 0xa3, 0x70,
	0x1c, 0x75, 0xd0, 0xb2, 0xcf, 0xd0, 0x16, 0x01, 0x83, 0xe3, 0x87, 0x87, 0x87, 0x23, 0x12, 0x6f,
	0xcc, 0x6e, 0x4b, 0xf7, 0x8a, 0x2e, 0x87, 0x94, 0x4d, 0x98, 0x8f, 0x82, 0x41, 0x37, 0x3c, 0xb5,
	0xba, 0x1b, 0x73, 0xdb, 0xd2, 0xbd, 0xb2, 0x9b, 0xc2, 0xc8, 0x31, 0x19, 0x74, 0x1d, 0xd6, 0x6d,
	0x9e, 0x76, 0xcb, 0x10, 0x38, 0xe3, 0x20, 0x8c, 0xf5, 0x70, 0x3c, 0x88, 0x49, 0x77, 0xa3, 0xbc,
	0x2d, 0xdd, 0x9b, 0x77, 0x05, 0x8c, 0x7a, 0x06, 0xd7, 0x26, 0x4e, 0x9f, 0xdf, 0xba, 0x20, 0xd6,
	0x61, 0x76, 0xc0, 0x8e, 0x32, 0x26, 0x0a, 0x0e, 0xa9, 0x3f, 0x94, 0x60, 0x2b, 0x59, 0x01, 0x6b,
	0x10, 0x93, 0xe8, 0x94, 0x74, 0x7b, 0x41, 0x4c, 0x7e, 0x27, 0x4c, 0x88, 0x12, 0x64, 0x6c, 0xa4,
	0xb0, 0xda, 0x81, 0xeb, 0x09, 0x1f, 0xd5, 0x1e, 0xba, 0x6d, 0xbf, 0x03, 0x06, 0xd4, 0x2e, 0x5a,
	0xbd, 0x6a, 0xef, 0x45, 0x6a, 0xf8, 0x7e, 0x27, 0xb3, 0xfc, 0x4f, 0x09, 0xf7, 0x43, 0xba, 0x99,
	0x5e, 0x4b, 0xac, 0xc9, 0xb8, 0x85, 0xfc, 0x1a, 0x72, 0x1e, 0x8a, 0x39, 0x1e, 0x2e, 0x13, 0xab,
	0x85, 0xaa, 0x95, 0xb2, 0xf2, 0x45, 0xa6, 0x57, 0x5b, 0xb9, 0xb7, 0x7a, 0x2d, 0x29, 0x4e, 0x1b,
	0xf6, 0x63, 0xca, 0x61, 0xd8, 0x25, 0x93, 0xcb, 0xae, 0x40, 0x09, 0x95, 0x34, 0x31, 0x18, 0xf8,
	0x3c, 0x75, 0x80, 0x27, 0xe8, 0xbd, 0x62, 0x2c, 0x90, 0xef, 0x4b, 0xe9, 0x24, 0x41, 0x7c, 0x2a,
	0x2c, 0x8e, 0x48, 0x27, 0x1c, 0x74, 0x83, 0xe8, 0x0c, 0x4f, 0x44, 0x26, 0xc4, 0x1c, 0x4e, 0x7d,
	0x80, 0xcc, 0xe0, 0x58, 0x53, 0x98, 0x99, 0x1c, 0x50, 0x3d, 0x81, 0xab, 0x0d, 0xdf, 0x79, 0xf6,
	0x19, 0xe9, 0xc4, 0x06, 0xe9, 0xc7, 0x41, 0x26, 0x02, 0x6c, 0x1e, 0xc5, 0xc1, 0xe9, 0x70, 0x43,
	0x62, 0xb6, 0x20, 0x45, 0xe0, 0x62, 0x85, 0xb4, 0x0b, 0x8d, 0x28, 0xa8, 0x15, 0x49, 0x60, 0x6c,
	0x1b, 0x91, 0xef, 0x8d, 0xc9, 0xa0, 0x83, 0x0a, 0x85, 0x1d, 0x53, 0x58, 0xfd, 0xb1, 0x04, 0xb7,
	0x44, 0x47, 0x72, 0xea, 0xbc, 0xa2, 0xe8, 0xa5, 0xbc, 0xe8, 0x37, 0x60, 0xee, 0x84, 0x9c, 0x0d,
	0xc3, 0xb0, 0xcf, 0xa7, 0x4d, 0xc0, 0x3c, 0xbf, 0xc5, 0x29, 0xfc, 0x0a, 0xca, 0x95, 0xb3, 0x7a,
	0xea, 0x31, 0xda, 0x8e, 0x66, 0x38, 0x72, 0xc9, 0x61, 0x33, 0x0a, 0x3b, 0x64, 0x34, 0xea, 0x0d,
	0x8e, 0x1a, 0x41, 0x74, 0x42, 0xa2, 0x8b, 0x8d, 0xbe, 0xf2, 0x18, 0xd6, 0x68, 0x2c, 0x68, 0x8f,
	0x4f, 0x9f, 0x91, 0x88, 0x77, 0x24, 0x5d, 0xbe, 0xa6, 0x53, 0xdb, 0xd4, 0x2f, 0xc3, 0x7a, 0xc3,
	0x4f, 0x42, 0x81, 0x97, 0xcd, 0xc0, 0xa8, 0x2b, 0xfd, 0xf0, 0x59, 0x33, 0x1c, 0x79, 0x71, 0x10,
	0xc5, 0x0d, 0x1c, 0xf3, 0x22, 0x6a, 0x0f, 0x2d, 0x4f, 0x8d, 0x84, 0x0d, 0x12, 0x47, 0xbd, 0xce,
	0x08, 0x55, 0x51, 0x08, 0x82, 0x5e, 0x45, 0x05, 0x15, 0x19, 0x8a, 0xc3, 0x5e, 0x92, 0xff, 0xc1,
	0x47, 0xf5, 0x29, 0xba, 0xfd, 0xe7, 0x07, 0xf5, 0xa3, 0x60, 0x74, 0xfc, 0x45, 0x47, 0xde, 0x14,
	0x47, 0x76, 0x6b, 0xa9, 0xaa, 0x5e, 0x10, 0xe6, 0x4e, 0x1d, 0x77, 0x4a, 0x12, 0x49, 0xad, 0xe6,
	0x79, 0xce, 0x6d, 0x03, 0x3e, 0xf6, 0xe7, 0x59, 0x04, 0xce, 0x12, 0x4f, 0xd3, 0x36, 0xe4, 0xbf,
	0x48, 0x50, 0x76, 0x1b, 0x18, 0x1f, 0xb3, 0x00, 0x47, 0xf4, 0x64, 0x37, 0xd0, 0x93, 0x4d, 0x1b,
	0xf9, 0x93, 0xe0, 0xb0, 0x3e, 0x80, 0x72, 0x9c, 0x04, 0xd6, 0x74, 0xd0, 0x85, 0xc7, 0x4b, 0xd8,
	0x25, 0x8d, 0xb6, 0xdd, 0xac, 0x3d, 0x5d, 0xcd, 0xa2, 0xa0, 0x5d, 0x17, 0x65, 0xc2, 0x34, 0x80,
	0x6c, 0x32, 0x65, 0x13, 0xd6, 0x93, 0xf4, 0x88, 0x69, 0xfb, 0xee, 0x01, 0xcd, 0x69, 0x79, 0xa6,
	0x6d, 0xc8, 0x57, 0xd0, 0xf5, 0x4b, 0x13, 0x32, 0x4d, 0xc7, 0xb2, 0x7d, 0xd6, 0x20, 0xa9, 0x7f,
	0x36, 0x0b, 0xcb, 0x6c, 0xdb, 0xd1, 0x88, 0x1d, 0x5f, 0x4e, 0xdc, 0xcd, 0x4c, 0x2c, 0xd9, 0x6e,
	0xfe, 0x20, 0x4d, 0x15, 0x62, 0xa0, 0xfc, 0x36, 0xbe, 0x45, 0xbe, 0xf7, 0x04, 0x28, 0x48, 0xe1,
	0x26, 0x94, 0x9f, 0xb3, 0x88, 0x8f, 0xbe, 0x1d, 0xdd, 0x92, 0x29, 0x42, 0xf9, 0x2f, 0x70, 0x8d,
	0x4f, 0x32, 0xe8, 0x92, 0x17, 0x7b, 0xe4, 0xcc, 0x1b, 0x3f, 0xa3, 0x79, 0x8b, 0x12, 0x9d, 0xe9,
	0xde, 0x85, 0x33, 0x4d, 0xd0, 0xbb, 0xd3, 0x87, 0x11, 0x1c, 0xa0, 0x99, 0x49, 0x07, 0x28, 0x35,
	0x4f, 0xb3, 0x79, 0xf3, 0x84, 0x6d, 0xe3, 0x61, 0x3f, 0x0c, 0xba, 0x99, 0x73, 0x94, 0xc0, 0x68,
	0x7a, 0x86, 0x41, 0x14, 0xdb, 0xe3, 0x53, 0xea, 0x1a, 0xcd, 0xb8, 0x09, 0x98, 0xb4, 0x78, 0xe4,
	0x7b, 0xd4, 0x2b, 0x2a, 0xba, 0x09, 0x88, 0x12, 0xe0, 0xf6, 0xc9, 0xea, 0x6e, 0x00, 0x33, 0x66,
	0x29, 0x02, 0x03, 0xf0, 0x4e, 0x14, 0x8e, 0xd0, 0xf0, 0x90, 0x08, 0xe7, 0xb7, 0xba, 0x1b, 0x0b,
	0x94, 0xe8, 0x1c, 0x1e, 0xe7, 0xe8, 0x1c, 0x8f, 0x07, 0x27, 0x56, 0x77, 0x63, 0x91, 0x19, 0x3e,
	0x0e, 0x2a, 0x77, 0x60, 0xa9, 0x87, 0xaf, 0xee, 0x25, 0x2f, 0xb5, 0x44, 0x79, 0xc8, 0x23, 0xd5,
	0x9f, 0x4a, 0xa0, 0x9c, 0x5f, 0x28, 0x0c, 0x65, 0x74, 0xa7, 0xd1, 0xd4, 0x74, 0xea, 0xc3, 0xf3,
	0x50, 0xef, 0x8a, 0x52, 0x86, 0x19, 0x9a, 0x9d, 0x94, 0x25, 0x05, 0x60, 0xb6, 0xd5, 0x34, 0x34,
	0xdf, 0x94, 0x0b, 0xca, 0x22, 0xcc, 0x37, 0x9a, 0xad, 0x76, 0x53, 0x73, 0x31, 0xde, 0xe1, 0x50,
	0xdd, 0xf2, 0x30, 0xd2, 0x59, 0x06, 0x40, 0x28, 0x4d, 0x82, 0x5e, 0x85, 0x15, 0xdd, 0x75, 0x3c,
	0x0f, 0x23, 0x4c, 0xd3, 0x35, 0x6d, 0xdd, 0x94, 0x67, 0x51, 0x61, 0xeb, 0x8e, 0xbe, 0xd7, 0x3e,
	0x3f, 0xe7, 0x9c, 0xfa, 0x07, 0x12, 0x5c, 0x9b, 0xba, 0xc0, 0xca, 0x2a, 0x2c, 0xed, 0x9a, 0x9a,
	0x81, 0x5e, 0xbf, 0x66, 0x68, 0xbe, 0x26, 0x5f, 0xc1, 0xd1, 0xbd, 0x03, 0xcf, 0x37, 0x1b, 0x19,
	0x52, 0x42, 0xba, 0x16, 0xcd, 0x11, 0x26, 0xa8, 0x02, 0xbe, 0x88, 0xab, 0xd9, 0x35, 0x53, 0x2e,
	0x62, 0x17, 0xc3, 0xac, 0x9b, 0xe2, 0xa4, 0x25, 0xec, 0xe2, 0x9a, 0x0d, 0x67, 0xdf, 0xcc, 0x18,
	0x5f, 0x06, 0xa0, 0x3c, 0xb2, 0x7e, 0xb3, 0xea, 0xff, 0x92, 0xe0, 0x26, 0xdb, 0x73, 0x3c, 0x15,
	0x67, 0x0e, 0xe2, 0xe8, 0xac, 0x46, 0x42, 0x8f, 0x0c, 0xba, 0x17, 0xa7, 0x08, 0x85, 0x5c, 0x5f,
	0x21, 0x97, 0xeb, 0x43, 0x63, 0xd8, 0x09, 0x47, 0x89, 0x31, 0xec, 0x84, 0xa3, 0xd4, 0xdc, 0x95,
	0x04, 0x73, 0x97, 0xa6, 0x18, 0x67, 0xe8, 0x72, 0xf3, 0x14, 0xe3, 0x0f, 0x60, 0x93, 0xf1, 0x82,
	0xb1, 0xee, 0x73, 0x12, 0x9d, 0x35, 0xc3, 0xde, 0x20, 0x4e, 0x38, 0xd9, 0x02, 0x38, 0x0c, 0x7a,
	0x7d, 0xd2, 0x15, 0x52, 0x8c, 0x02, 0x26, 0x99, 0xb9, 0x70, 0x7e, 0xe6, 0xa2, 0x30, 0xb3, 0xc0,
	0x79, 0x29, 0x9f, 0xa5, 0xfc, 0x53, 0x09, 0x64, 0xcf, 0x7b, 0x79, 0x32, 0x70, 0x92, 0xe6, 0x55,
	0x92, 0x81, 0x4d, 0x9e, 0x0c, 0x5c, 0x06, 0xa8, 0xd2, 0x6c, 0x33, 0x2e, 0x82, 0x7c, 0x05, 0xe1,
	0x4a, 0xcb, 0x3b, 0xe0, 0x30, 0xd5, 0x47, 0xc3, 0xdc, 0xb7, 0x74, 0xd4, 0xc7, 0x25, 0x28, 0xa3,
	0x2e, 0x5a, 0xb8, 0xa6, 0x72, 0x11, 0x41, 0x4a, 0xd5, 0xae, 0x58, 0xb6, 0x5c, 0x52, 0xdf, 0x83,
	0x6b, 0x9c, 0x11, 0x83, 0x3c, 0xef, 0x75, 0x08, 0x5d, 0x37, 0x6e, 0xee, 0xba, 0x14, 0x93, 0x99,
	0xbb, 0x04, 0x56, 0x9f, 0xc2, 0x06, 0xef, 0xd4, 0x0c, 0xa2, 0xb8, 0x87, 0xf1, 0xdf, 0xab, 0xf4,
	0x53, 0xb6, 0x61, 0x61, 0x98, 0x74, 0x48, 0xb3, 0xac, 0x22, 0x4a, 0xfd, 0x73, 0x29, 0x1d, 0xba,
	0x1a, 0x11, 0x52, 0xe9, 0x87, 0x9d, 0x93, 0xdf, 0xce, 0xd0, 0xb8, 0xee, 0xcf, 0x70, 0xb8, 0x4a,
	0x6f, 0x90, 0xae, 0xa5, 0x80, 0x11, 0x4c, 0x61, 0x89, 0x1e, 0x70, 0x89, 0x29, 0xbc, 0x09, 0xe5,
	0xc3, 0x88, 0x90, 0xae, 0x8f, 0x67, 0x1f, 0xb3, 0x92, 0x19, 0x42, 0xfd, 0x7f, 0x19, 0xc3, 0x95,
	0xf1, 0xe8, 0xec, 0x3f, 0x01, 0xc3, 0xea, 0xf7, 0xe1, 0x7a, 0xc2, 0x11, 0x27, 0xfe, 0xfd, 0x30,
	0xa4, 0xfe, 0xac, 0x90, 0xc9, 0x02, 0xb1, 0x75, 0xf2, 0x9c, 0xf4, 0x13, 0xdf, 0xe0, 0xfd, 0xdc,
	0x0e, 0xb8, 0x2d, 0xec, 0x80, 0x73, 0xb4, 0xe2, 0x4e, 0x10, 0x39, 0x2e, 0x5c, 0xce, 0x71, 0xf1,
	0x65, 0x1c, 0x97, 0x2e, 0x11, 0xe1, 0x4c, 0x4e, 0x84, 0x47, 0x7c, 0x9f, 0x5d, 0x87, 0xab, 0x6c,
	0xb3, 0x68, 0xf5, 0xba, 0xa3, 0x6b, 0xbe, 0xc9, 0x52, 0x43, 0xd4, 0xb4, 0xb2, 0x06, 0xba, 0x0d,
	0x29, 0x52, 0xa2, 0xb7, 0x5d, 0xcc, 0x2a, 0x9a, 0x75, 0xcb, 0xfe, 0x6e, 0xcb, 0xf2, 0x76, 0x59,
	0x53, 0x41, 0x59, 0x07, 0x25, 0x69, 0xd2, 0x4d, 0x6b, 0x9f, 0x77, 0x29, 0xaa, 0x3f, 0x91, 0x40,
	0x31, 0xfc, 0xf4, 0x1e, 0x23, 0x11, 0x96, 0x22, 0x08, 0xab, 0x9c, 0xdd, 0x0f, 0x52, 0x2b, 0x54,
	0x10, 0xac, 0xd0, 0x79, 0x2b, 0x79, 0xa1, 0x5d, 0x4a, 0x3d, 0xa8, 0x19, 0xc1, 0x83, 0xda, 0x80,
	0xb9, 0x51, 0xd4, 0xa1, 0xd4, 0xb3, 0x8c, 0x9a, 0x83, 0xea, 0x2f, 0x24, 0x50, 0x6a, 0xba, 0x4b,
	0x0e, 0x79, 0xce, 0xbe, 0x17, 0x0e, 0x90, 0xb1, 0xaf, 0xe6, 0x56, 0x71, 0x1b, 0x57, 0xf1, 0x3c,
	0x15, 0x43, 0xe5, 0xaf, 0x36, 0x3b, 0xc2, 0xb5, 0x4a, 0xe7, 0xa2, 0xab, 0xcd, 0x69, 0x26, 0x5e,
	0x81, 0x52, 0xf8, 0x2c, 0x63, 0x1b, 0x9f, 0xd5, 0x77, 0xa1, 0x9c, 0x4e, 0xa1, 0xcc, 0x43, 0xc9,
	0x35, 0x9b, 0x0e, 0x3b, 0x90, 0x2b, 0xbe, 0x6b, 0x9a, 0xb2, 0xa4, 0x2c, 0xc0, 0x1c, 0x77, 0xfa,
	0xe4, 0x82, 0x7a, 0x17, 0x16, 0x74, 0xf4, 0x03, 0xfc, 0xe0, 0x88, 0x5f, 0x30, 0x25, 0x5e, 0x02,
	0xbf, 0x60, 0xe2, 0xa0, 0x7a, 0x07, 0xe6, 0x29, 0xe1, 0xe5, 0x54, 0xef, 0xc1, 0x75, 0x97, 0x0c,
	0x43, 0x4a, 0x59, 0x0b, 0xa2, 0x67, 0xc1, 0x11, 0xbd, 0x0b, 0xbb, 0xbc, 0xd3, 0x2f, 0x8b, 0x50,
	0xd6, 0x2f, 0x73, 0x94, 0xd3, 0x46, 0xfe, 0xf4, 0xba, 0x8e, 0xb2, 0xc0, 0x42, 0x31, 0xc7, 0xc2,
	0x85, 0xee, 0xf2, 0x5f, 0x17, 0x00, 0xb2, 0x39, 0x51, 0x9e, 0x9e, 0xa9, 0xd5, 0xe5, 0x2b, 0xca,
	0x2c, 0x14, 0x4c, 0x5d, 0x96, 0xf0, 0xbf, 0xae, 0xcb, 0x05, 0x3c, 0x55, 0x5c, 0xb3, 0xa9, 0x59,
	0xae, 0x5c, 0x44, 0x59, 0x7b, 0x9f, 0x98, 0x66, 0x93, 0xb9, 0x07, 0xe8, 0x52, 0x5b, 0x76, 0x95,
	0xfb, 0xd5, 0x33, 0x09, 0x0a, 0xfd, 0x0b, 0x86, 0x9a, 0x45, 0x47, 0x08, 0x51, 0xba, 0xd3, 0x3c,
	0x90, 0xe7, 0xf0, 0xc0, 0xa2, 0x04, 0xe8, 0x6b, 0x98, 0xf2, 0x3c, 0x9e, 0x4a, 0x4f, 0x1d, 0xb7,
	0x5d, 0x73, 0x9d, 0x56, 0x53, 0x2e, 0x63, 0x33, 0x82, 0xa6, 0xad, 0x3b, 0x86, 0x29, 0x43, 0x02,
	0x1b, 0x26, 0x85, 0x17, 0x94, 0x15, 0x58, 0xc8, 0xce, 0x3f, 0x4f, 0x5e, 0xc4, 0x09, 0x59, 0xc6,
	0x35, 0x59, 0xf5, 0x25, 0xa4, 0x61, 0x28, 0xa6, 0x13, 0xcb, 0xb8, 0x07, 0xd1, 0x8d, 0xf1, 0xcd,
	0xb6, 0xbe, 0xdb, 0xb2, 0xf7, 0xda, 0xba, 0xa6, 0xef, 0x9a, 0xf2, 0x4a, 0x92, 0x8b, 0x4d, 0x99,
	0x4d, 0xaf, 0x66, 0x65, 0x64, 0xcb, 0x35, 0x2b, 0x5a, 0x5d, 0x43, 0xcf, 0x6c, 0x15, 0x87, 0x34,
	0xf5, 0x34, 0xe9, 0x2f, 0x2b, 0xea, 0x7f, 0x97, 0x60, 0xad, 0xe2, 0x47, 0x04, 0x4f, 0xf1, 0x7e,
	0xd0, 0x3b, 0x4d, 0xc2, 0x56, 0xe5, 0x5d, 0x80, 0xce, 0x31, 0xe9, 0x9c, 0x0c, 0xd1, 0xf3, 0xa0,
	0x11, 0x3a, 0x5f, 0xb3, 0x74, 0x99, 0x5d, 0x81, 0x20, 0x1f, 0x97, 0x63, 0x10, 0x51, 0x12, 0xe3,
	0xf2, 0x2d, 0x80, 0xde, 0x28, 0xb9, 0x0e, 0xa3, 0x31, 0xc2, 0xbc, 0x2b, 0x60, 0xd4, 0xff, 0x2d,
	0xc1, 0x32, 0x1b, 0x37, 0x9d, 0xff, 0x7d, 0x98, 0x1d, 0xc5, 0x41, 0x3c, 0x1e, 0x71, 0x15, 0xbb,
	0x95, 0xcd, 0x9d, 0xd0, 0x50, 0xf5, 0xf1, 0x28, 0x91, 0xcb, 0x89, 0x55, 0x03, 0x20, 0xc3, 0xe2,
	0x26, 0x6a, 0x92, 0x41, 0xb7, 0x37, 0x38, 0x62, 0x2e, 0x86, 0x70, 0x43, 0x47, 0x5d, 0x8c, 0x2a,
	0x75, 0x9a, 0x98, 0x8b, 0x91, 0xdd, 0xd6, 0x15, 0xd5, 0xbf, 0x92, 0x60, 0x41, 0x6f, 0x98, 0x9d,
	0x44, 0xdb, 0xbf, 0x0e, 0x65, 0xaa, 0x83, 0xfc, 0xc2, 0x55, 0x4a, 0x3c, 0x20, 0x81, 0x66, 0x47,
	0x4f, 0x08, 0xdc, 0x8c, 0x56, 0xb9, 0x07, 0x2b, 0xbd, 0x91, 0x1f, 0x05, 0x9d, 0x94, 0x69, 0x2a,
	0x9c, 0x79, 0x77, 0x12, 0xad, 0x9a, 0x50, 0x4e, 0x47, 0x40, 0xdd, 0x44, 0x6b, 0x8d, 0x2a, 0x4c,
	0x55, 0x16, 0xd7, 0x5c, 0x96, 0x50, 0xb1, 0xa9, 0xf6, 0xd1, 0x3b, 0x52, 0xa6, 0x5a, 0x86, 0x5c,
	0x44, 0x92, 0xa6, 0xe6, 0x5a, 0xfe, 0x81, 0x5c, 0x52, 0x7f, 0x5d, 0x80, 0x35, 0xbd, 0x51, 0x23,
	0x21, 0xbd, 0xdc, 0x26, 0x83, 0x6e, 0xf2, 0x0a, 0xf4, 0x18, 0xca, 0xdd, 0x4a, 0xa7, 0xf0, 0x2b,
	0x3a, 0x8c, 0x3a, 0xc0, 0x78, 0xd8, 0x0d, 0x62, 0xc2, 0xc3, 0x37, 0x5c, 0x95, 0xb7, 0x98, 0x14,
	0xce, 0xcf, 0xb7, 0xd3, 0x4a, 0x49, 0x5d, 0xa1, 0x1b, 0xea, 0x49, 0x9a, 0xc3, 0xe2, 0x16, 0x31,
	0x43, 0x28, 0x2a, 0x2c, 0xf6, 0x46, 0x2e, 0x19, 0xf6, 0x7b, 0x9d, 0x20, 0x26, 0x5d, 0x6a, 0xd2,
	0xe7, 0xdd, 0x1c, 0x8e, 0x65, 0xc6, 0x82, 0x3e, 0xe9, 0xd6, 0xc9, 0xe0, 0x28, 0x3e, 0xa6, 0x01,
	0xdc, 0x8c, 0x9b, 0xc3, 0x29, 0x5b, 0x30, 0xdf, 0x09, 0x86, 0x41, 0xa7, 0x17, 0x9f, 0xb1, 0x28,
	0xee, 0xc3, 0xc2, 0xbb, 0x8f, 0xdc, 0x14, 0x87, 0x63, 0xa0, 0xbf, 0x8c, 0xae, 0x35, 0x15, 0x48,
	0x99, 0x3a, 0xdf, 0x39, 0x9c, 0xfa, 0x10, 0x20, 0x7b, 0x07, 0x94, 0xb1, 0xee, 0x9a, 0x18, 0x1f,
	0x5d, 0x61, 0xbe, 0x29, 0xdd, 0xf6, 0xb9, 0xb8, 0x49, 0xfd, 0x01, 0xac, 0x53, 0x51, 0x18, 0x41,
	0x1c, 0x24, 0xa2, 0xd8, 0x0f, 0xfa, 0x63, 0xa2, 0x3c, 0x84, 0xb9, 0xe1, 0x38, 0x1a, 0x86, 0xa3,
	0x44, 0x7b, 0xd6, 0xe9, 0xb9, 0x93, 0x91, 0x36, 0x59, 0xab, 0x9b, 0x90, 0x29, 0x0f, 0xe1, 0x2a,
	0x6a, 0xf4, 0x48, 0xeb, 0x74, 0xc2, 0xf1, 0x20, 0xee, 0x0d, 0x8e, 0x78, 0x8c, 0x81, 0x8c, 0x4e,
	0x6b, 0x52, 0xff, 0x50, 0xe2, 0x2b, 0x2f, 0x4e, 0xcf, 0x53, 0x6d, 0x99, 0xc8, 0xa5, 0x49, 0x91,
	0x0b, 0xac, 0x15, 0xbe, 0x10, 0x6b, 0xc5, 0x8b, 0x59, 0x7b, 0x07, 0x64, 0xca, 0x99, 0x1e, 0x0e,
	0xcf, 0x04, 0x07, 0x21, 0x1c, 0x66, 0xb9, 0x1f, 0x7c, 0x56, 0x35, 0x58, 0xd5, 0x1b, 0x4f, 0xc3,
	0xa8, 0x16, 0x85, 0x63, 0xd1, 0x93, 0x38, 0x97, 0x24, 0xc2, 0x50, 0x3c, 0xea, 0x9d, 0xe2, 0x0b,
	0xf1, 0xa8, 0x8b, 0x83, 0xea, 0x3d, 0x50, 0xe8, 0x10, 0xe6, 0xa0, 0x13, 0x76, 0xc9, 0x25, 0x63,
	0xa8, 0x3f, 0x92, 0x38, 0xa9, 0x41, 0x5e, 0x42, 0xfa, 0x7b, 0x91, 0xd1, 0xcf, 0x0a, 0x30, 0xaf,
	0x37, 0x9e, 0x84, 0xcf, 0x2e, 0x3d, 0x85, 0x95, 0xfb, 0x42, 0x49, 0x17, 0xe7, 0x23, 0xe9, 0xc5,
	0x1e, 0x84, 0x53, 0x77, 0x0d, 0x66, 0x3e, 0xa3, 0x9e, 0x07, 0x2f, 0xf5, 0xa2, 0x80, 0xfa, 0x77,
	0x12, 0x9e, 0xe3, 0x9c, 0x52, 0x99, 0x83, 0xa2, 0x56, 0x47, 0x3b, 0xb3, 0x08, 0xf3, 0xf4, 0xb0,
	0xf1, 0x5a, 0x0d, 0x59, 0x52, 0xd6, 0x40, 0xae, 0x5a, 0xb6, 0xd1, 0xc6, 0x73, 0xb4, 0x5d, 0x37,
	0xed, 0x9a, 0xbf, 0x2b, 0x17, 0xd0, 0x67, 0xc4, 0x73, 0x46, 0xa8, 0x2a, 0x92, 0x8b, 0x13, 0x07,
	0x61, 0x89, 0x07, 0xd6, 0x5a, 0x9d, 0x1d, 0x94, 0x34, 0xd0, 0x36, 0xf5, 0xa4, 0x6a, 0x48, 0x9e,
	0xe5, 0x67, 0xf2, 0x9c, 0xb2, 0x09, 0xeb, 0xd8, 0xaf, 0x65, 0xd3, 0x39, 0xc4, 0x31, 0xe7, 0x95,
	0x6b, 0xb0, 0x2a, 0xb4, 0xe9, 0x4e, 0xa3, 0x61, 0xf9, 0x72, 0x39, 0x7f, 0x98, 0x81, 0xfa, 0x73,
	0x09, 0x96, 0xf4, 0x46, 0x62, 0x41, 0x2f, 0x70, 0xee, 0x72, 0x04, 0x02, 0x94, 0xc9, 0x49, 0xfd,
	0x1c, 0x0f, 0x1f, 0x11, 0xcf, 0xfd, 0x05, 0xea, 0x3f, 0xd4, 0x74, 0x6e, 0x78, 0x1b, 0xd4, 0x83,
	0x40, 0xaf, 0xc1, 0xd7, 0x7c, 0x4f, 0x2e, 0x62, 0xa3, 0x5b, 0x91, 0x4b, 0x94, 0xd8, 0x93, 0x67,
	0xd0, 0x26, 0xeb, 0x5e, 0xdb, 0x70, 0x6c, 0x93, 0xbf, 0xa5, 0x27, 0xcf, 0x51, 0x43, 0xcd, 0x91,
	0xf3, 0x78, 0xc6, 0x57, 0x92, 0x1a, 0xaa, 0xba, 0x66, 0x35, 0xe4, 0xb2, 0x5a, 0x01, 0x99, 0x9a,
	0xfd, 0x24, 0x83, 0x73, 0x91, 0x0a, 0xa2, 0xf9, 0x0e, 0xe2, 0xc0, 0x4f, 0x72, 0x74, 0x68, 0xbe,
	0x39, 0xac, 0xfe, 0xa3, 0x04, 0xab, 0xee, 0x11, 0x86, 0xe1, 0x83, 0xc3, 0xde, 0xd1, 0x65, 0x8a,
	0xfc, 0xb5, 0x9c, 0xf6, 0xa8, 0x34, 0xbd, 0x39, 0xd9, 0x71, 0x27, 0x85, 0x73, 0xee, 0xef, 0x34,
	0x57, 0x77, 0xf2, 0xb6, 0x52, 0x35, 0x61, 0x51, 0xec, 0x9d, 0x69, 0x17, 0x3e, 0x18, 0x06, 0xb3,
	0x97, 0x2c, 0x13, 0x23, 0x17, 0x50, 0xaa, 0x55, 0xcd, 0xaa, 0xb3, 0x90, 0x9e, 0x1d, 0x72, 0x48,
	0x54, 0x52, 0xff, 0x5d, 0x82, 0xc5, 0x7a, 0x6f, 0x14, 0xa7, 0x51, 0xdf, 0xe3, 0xdc, 0xba, 0x6e,
	0x21, 0xdf, 0x62, 0x7b, 0x06, 0xe4, 0x33, 0x10, 0xbc, 0x28, 0xb2, 0x90, 0x2b, 0x8a, 0x9c, 0x5a,
	0x00, 0xa9, 0xdc, 0x85, 0x85, 0x51, 0x6f, 0x70, 0xd4, 0x27, 0xb4, 0xc2, 0x8a, 0x26, 0x27, 0xe7,
	0x3f, 0x9c, 0x39, 0x0c, 0xfa, 0x23, 0xe2, 0x8a, 0x2d, 0x6a, 0x17, 0x96, 0x72, 0xb3, 0xe1, 0x0a,
	0xef, 0x99, 0x07, 0x4d, 0xc7, 0xe1, 0xbb, 0xa8, 0xea, 0xd9, 0x5e, 0xdb, 0xb0, 0x5c, 0x59, 0xc2,
	0xd7, 0xa2, 0x50, 0xd5, 0xaa, 0xe3, 0xfb, 0x6e, 0xc0, 0x1a, 0x2f, 0x0a, 0x61, 0xd5, 0x72, 0xbb,
	0x96, 0xe7, 0x3b, 0xee, 0x01, 0xab, 0x72, 0xe2, 0x2d, 0x34, 0xfd, 0x51, 0x52, 0x7f, 0x55, 0x82,
	0x55, 0x83, 0xa0, 0x3b, 0x82, 0x1b, 0x35, 0x49, 0xe0, 0x7e, 0x9c, 0x13, 0xc3, 0x03, 0x5a, 0x95,
	0x39, 0x49, 0x74, 0x1e, 0x23, 0xc8, 0x64, 0x0b, 0x80, 0xbc, 0x18, 0xf6, 0x22, 0xe2, 0x67, 0x69,
	0x70, 0x01, 0x93, 0xcb, 0x10, 0x17, 0x27, 0xee, 0x7b, 0x1e, 0x42, 0x99, 0x3d, 0x33, 0xff, 0x1b,
	0xfd, 0x41, 0xe5, 0x7c, 0xf2, 0xd6, 0xcd, 0x88, 0xf2, 0x69, 0xd1, 0x99, 0xc9, 0xb4, 0x28, 0xbb,
	0xe3, 0xb1, 0x83, 0x53, 0x96, 0x9f, 0x65, 0x77, 0x3c, 0x08, 0x2a, 0x06, 0xc0, 0x09, 0x39, 0x4b,
	0xca, 0x8b, 0xe6, 0xa8, 0xc5, 0xbd, 0x33, 0xfd, 0x65, 0xf7, 0x52, 0x3a, 0xe6, 0x69, 0x64, 0xfd,
	0xf2, 0x69, 0xe9, 0x79, 0x36, 0x7b, 0x96, 0x96, 0x3e, 0x97, 0x4e, 0x2d, 0x4f, 0x49, 0xa7, 0xa2,
	0xfb, 0xc6, 0x19, 0xae, 0x8e, 0xfb, 0x7d, 0xca, 0x2b, 0x4b, 0xef, 0x4e, 0xa2, 0xd5, 0xff, 0x2b,
	0xc1, 0xb5, 0xa9, 0x92, 0x47, 0xfb, 0xc7, 0x6c, 0x63, 0xfb, 0x89, 0x53, 0x91, 0xaf, 0x50, 0xaf,
	0xbe, 0x6e, 0x6a, 0x76, 0xab, 0x49, 0x11, 0x34, 0xe8, 0xe6, 0x04, 0x75, 0xcb, 0xf3, 0x79, 0x8a,
	0x1f, 0x9b, 0x0a, 0xca, 0x16, 0x6c, 0x6a, 0x86, 0xd1, 0x16, 0xcb, 0x78, 0x58, 0x92, 0x95, 0xb6,
	0x17, 0xd1, 0x86, 0xf2, 0xae, 0x5a, 0xbd, 0xde, 0xb6, 0x6c, 0xc3, 0xd2, 0x4d, 0x8f, 0xb6, 0x95,
	0xd4, 0x1d, 0x58, 0xce, 0x4b, 0x07, 0xd5, 0x91, 0x0b, 0xe0, 0xf1, 0x63, 0x56, 0xa1, 0xc6, 0xc1,
	0xf7, 0x1e, 0xc9, 0x92, 0xfa, 0x1c, 0x64, 0xba, 0x77, 0x3b, 0xbd, 0x3e, 0x11, 0x9c, 0xc6, 0x0b,
	0x6f, 0x0c, 0xee, 0xc0, 0xd2, 0x28, 0x66, 0x09, 0x70, 0x26, 0x41, 0xa6, 0x4e, 0x79, 0xa4, 0xb2,
	0x0d, 0x0b, 0x64, 0xd0, 0xf5, 0xb2, 0x8b, 0x42, 0xa4, 0x11, 0x51, 0x6a, 0x0b, 0x56, 0x2b, 0x31,
	0x0d, 0x40, 0x78, 0x1a, 0xfc, 0xf2, 0x03, 0xf0, 0xf2, 0x22, 0x63, 0x29, 0xbd, 0x1f, 0xfa, 0x69,
	0x09, 0xdf, 0x67, 0x18, 0xbe, 0xe2, 0xb0, 0xd3, 0x2c, 0xe3, 0x44, 0xef, 0x9d, 0x14, 0x10, 0x76,
	0xd4, 0x47, 0x50, 0xa6, 0x49, 0x7c, 0x6a, 0x98, 0x8b, 0x99, 0x79, 0x3a, 0xd7, 0x59, 0x4f, 0xa8,
	0xdc, 0xac, 0x43, 0x4e, 0xbe, 0xa5, 0x09, 0xf9, 0xe6, 0xf4, 0x97, 0x7b, 0xca, 0x99, 0xfe, 0xbe,
	0x03, 0xcb, 0xc3, 0xe3, 0xb3, 0x51, 0xaf, 0x13, 0xf4, 0x9d, 0xa4, 0xfe, 0x03, 0x45, 0x3b, 0x81,
	0x15, 0xe9, 0x52, 0x7f, 0x39, 0x47, 0xc7, 0x3d, 0xe6, 0x3b, 0xb0, 0xd4, 0x0f, 0x8f, 0x84, 0xe1,
	0xe6, 0xd9, 0x6a, 0xe6, 0x90, 0x02, 0x15, 0x1f, 0xac, 0x9c, 0xa3, 0xe2, 0x63, 0xbd, 0x03, 0xcb,
	0x2c, 0x0b, 0x65, 0x0d, 0x98, 0x71, 0xa0, 0x9b, 0xa6, 0xe8, 0x4e, 0x60, 0xf1, 0xed, 0x7b, 0x23,
	0x6d, 0x38, 0x24, 0x03, 0x76, 0x21, 0x32, 0xef, 0xa6, 0xb0, 0xfa, 0x55, 0x58, 0xca, 0x89, 0x3b,
	0xe7, 0xa8, 0x24, 0xfb, 0x41, 0x96, 0x10, 0xb2, 0x69, 0x6d, 0x12, 0x9e, 0x28, 0xea, 0x03, 0x28,
	0xa7, 0x72, 0xa6, 0x3d, 0xec, 0x03, 0xe6, 0xaf, 0xdb, 0x8e, 0xdb, 0xd0, 0xea, 0xb2, 0x84, 0xe7,
	0x37, 0xbd, 0xaf, 0x90, 0x0b, 0xea, 0x43, 0x58, 0x4c, 0x0b, 0x04, 0x50, 0x39, 0xb6, 0x61, 0x21,
	0xbd, 0x81, 0x4e, 0x15, 0x44, 0x44, 0xa9, 0x15, 0x98, 0xd7, 0xfa, 0x24, 0x8a, 0xa7, 0x5c, 0x9c,
	0x17, 0xf2, 0x17, 0xd1, 0x1b, 0x30, 0x17, 0x20, 0x65, 0xaa, 0xa8, 0x09, 0xa8, 0xbe, 0x07, 0x4b,
	0x74, 0x0c, 0x8c, 0x50, 0xa9, 0xcf, 0xa2, 0xc2, 0x62, 0x90, 0x22, 0xd2, 0x79, 0x73, 0x38, 0x3a,
	0xf1, 0xb8, 0xdb, 0x7b, 0xc5, 0x89, 0x91, 0x52, 0x98, 0x98, 0x81, 0xea, 0xc7, 0xb0, 0x5a, 0x0d,
	0x9e, 0x45, 0xbd, 0x8e, 0xe8, 0x6a, 0xdc, 0x07, 0xf9, 0x30, 0x87, 0x4c, 0x19, 0x38, 0x87, 0x57,
	0xef, 0x42, 0x99, 0x95, 0xbc, 0x70, 0xcb, 0xc0, 0x0a, 0x3a, 0x32, 0xcb, 0x90, 0xc0, 0xaa, 0x0b,
	0x32, 0x33, 0x85, 0xdd, 0x57, 0xa2, 0x47, 0x09, 0xb0, 0xe7, 0xdd, 0x60, 0x74, 0x9c, 0x32, 0x9e,
	0xc3, 0xa9, 0x1f, 0xc3, 0x5c, 0x8b, 0x7d, 0x01, 0xf1, 0x92, 0xd2, 0x81, 0x75, 0x98, 0x1d, 0x8f,
	0x48, 0x94, 0x0e, 0xc3, 0x21, 0xe4, 0x5e, 0xa7, 0x8e, 0x09, 0xe7, 0x86, 0x79, 0x29, 0x19, 0x37,
	0x09, 0xac, 0xde, 0x80, 0x19, 0xb7, 0x76, 0x51, 0xd0, 0x70, 0x1b, 0x16, 0xdc, 0x1a, 0x0b, 0x0b,
	0x2f, 0x22, 0x09, 0xe0, 0x96, 0xcb, 0xeb, 0xb3, 0x58, 0x72, 0xf8, 0x75, 0x53, 0xa3, 0x17, 0x5f,
	0xd0, 0x54, 0x00, 0xec, 0xbd, 0xd4, 0x39, 0x7a, 0xad, 0x5a, 0x20, 0xf5, 0xd7, 0x12, 0xbc, 0xc1,
	0x07, 0x49, 0x82, 0x6b, 0x3c, 0x27, 0x38, 0x8f, 0xb9, 0x84, 0x9d, 0xf4, 0x92, 0x84, 0x5d, 0x8e,
	0x81, 0xc2, 0xc5, 0x0c, 0xe4, 0x0b, 0x81, 0x2e, 0xce, 0xf3, 0x7e, 0xc4, 0x05, 0x34, 0x43, 0xcd,
	0x29, 0xbd, 0x21, 0xbe, 0x90, 0xd3, 0x1d, 0x7b, 0x2f, 0x9f, 0x6b, 0x54, 0x6f, 0xa3, 0x70, 0xd2,
	0x5c, 0xe0, 0x34, 0xc7, 0x53, 0xfd, 0x51, 0x01, 0x16, 0x3e, 0xdd, 0xcb, 0xd4, 0xe1, 0x51, 0xce,
	0xaf, 0xa2, 0x99, 0x26, 0xa1, 0x79, 0x27, 0x7d, 0xca, 0xc7, 0x56, 0x27, 0xe4, 0x2c, 0x5d, 0x31,
	0x06, 0xa8, 0x7f, 0x81, 0x11, 0x89, 0x48, 0xad, 0x28, 0xb0, 0x4c, 0x2f, 0x35, 0xfd, 0x83, 0x26,
	0xff, 0xa6, 0x84, 0xa6, 0xde, 0xb9, 0xb7, 0x57, 0xd1, 0x3c, 0xb3, 0xdd, 0x72, 0xeb, 0xac, 0x18,
	0xd9, 0xb2, 0x6b, 0xa6, 0xc7, 0xca, 0x78, 0x59, 0xce, 0x1d, 0x60, 0x76, 0x5f, 0x73, 0x5d, 0xed,
	0x80, 0xdd, 0x6b, 0xb2, 0xb0, 0x8a, 0xde, 0x7d, 0xf2, 0xaf, 0x53, 0xd6, 0x41, 0xd1, 0x5a, 0xfe,
	0x6e, 0xbb, 0xe9, 0x3a, 0xfb, 0x96, 0x91, 0xe0, 0x67, 0x68, 0xb2, 0xde, 0x71, 0x5d, 0xe7, 0x13,
	0xd3, 0x68, 0xfb, 0xce, 0x9e, 0x69, 0xb7, 0xf7, 0xcc, 0x03, 0x79, 0x96, 0x96, 0x26, 0x23, 0x3d,
	0xc3, 0xe9, 0x4e, 0xcb, 0xf6, 0xe5, 0x39, 0xf5, 0x2d, 0x58, 0x40, 0xb9, 0x27, 0x29, 0xe0, 0x35,
	0x98, 0x79, 0xde, 0xed, 0xa4, 0x5a, 0xcd, 0x00, 0x35, 0x86, 0x85, 0xfd, 0xde, 0x30, 0xb2, 0xc9,
	0x28, 0xe6, 0x44, 0x64, 0x18, 0x76, 0x8e, 0x79, 0xcd, 0x10, 0x03, 0x50, 0x8d, 0x87, 0x41, 0x7c,
	0xcc, 0x23, 0x14, 0xfa, 0xac, 0xbc, 0x09, 0xc5, 0x13, 0x5a, 0xc0, 0x94, 0x66, 0x10, 0xb3, 0x6f,
	0xa5, 0xb0, 0x85, 0x1d, 0x03, 0x1e, 0xe9, 0x8c, 0x23, 0x56, 0x14, 0x40, 0x8f, 0x01, 0x06, 0xab,
	0xff, 0x5f, 0x82, 0xd5, 0x64, 0x5a, 0xef, 0x6c, 0x14, 0x93, 0x53, 0x96, 0x8e, 0x13, 0xd7, 0x8b,
	0xe6, 0xa0, 0xce, 0x11, 0xed, 0xa4, 0x4f, 0x2f, 0x5d, 0xb5, 0x1d, 0x58, 0xca, 0x11, 0x63, 0x60,
	0x62, 0x63, 0xc4, 0x46, 0x13, 0xf2, 0x2c, 0xa3, 0x2b, 0x31, 0xa4, 0x81, 0xea, 0xb3, 0x02, 0x4b,
	0xb5, 0x8e, 0x10, 0x55, 0xaa, 0xf7, 0x61, 0x59, 0x0f, 0x3a, 0xc7, 0xa4, 0xfb, 0x0a, 0xb9, 0xf7,
	0x5f, 0x48, 0xb0, 0xb8, 0x8f, 0x9c, 0x26, 0x5b, 0x6d, 0x4a, 0x6c, 0x23, 0xb6, 0x67, 0xc0, 0xeb,
	0xe6, 0xd3, 0xb3, 0xac, 0x79, 0x31, 0x97, 0x35, 0xff, 0x0e, 0x2c, 0xe5, 0xc6, 0x16, 0x5e, 0x1b,
	0x95, 0xcd, 0xd4, 0x50, 0xa1, 0xcc, 0xba, 0x49, 0x2f, 0xf0, 0x65, 0x49, 0x91, 0x61, 0x71, 0xcf,
	0x3c, 0xa0, 0x91, 0xbc, 0x5d, 0xb5, 0x6a, 0x72, 0x41, 0xfd, 0x0c, 0xd6, 0xe9, 0x08, 0x75, 0x12,
	0x74, 0x49, 0x64, 0x0a, 0xb7, 0x2c, 0x82, 0x7a, 0x14, 0x32, 0xf5, 0x58, 0x87, 0xd9, 0x3e, 0x25,
	0x4d, 0x6c, 0x11, 0x83, 0x92, 0x74, 0x1c, 0xe9, 0xb2, 0x81, 0xb8, 0x1f, 0x97, 0xc3, 0xa9, 0x7f,
	0x54, 0x80, 0xc5, 0x66, 0xf0, 0x22, 0x1c, 0x5d, 0x22, 0x37, 0xb1, 0x3d, 0x03, 0x5e, 0x57, 0x6e,
	0x2f, 0x55, 0x5c, 0xf1, 0x3a, 0x42, 0x12, 0x04, 0x1b, 0xc2, 0x52, 0x6e, 0x72, 0x94, 0x5c, 0x53,
	0x7b, 0xea, 0x78, 0x49, 0x92, 0x84, 0x7e, 0x98, 0xc0, 0x30, 0x54, 0xbe, 0x6d, 0xdb, 0xf1, 0xad,
	0x6a, 0x92, 0xfe, 0xa0, 0x5f, 0xb1, 0xb1, 0x56, 0x96, 0xf9, 0xc8, 0x37, 0x17, 0x30, 0x82, 0x60,
	0xcd, 0xcd, 0x96, 0x5b, 0x33, 0xe5, 0xa2, 0xfa, 0x08, 0x56, 0xe9, 0x84, 0xec, 0xd4, 0xcd, 0x2a,
	0xec, 0x22, 0x3c, 0xbc, 0x47, 0xec, 0xc8, 0xa5, 0xc7, 0x64, 0x8a, 0x50, 0x1f, 0x82, 0x4c, 0xbb,
	0x34, 0xc7, 0xd1, 0xd1, 0xab, 0xf5, 0x68, 0xc1, 0x9b, 0xb4, 0x47, 0xb2, 0xcc, 0x76, 0x18, 0xf7,
	0x0e, 0xb9, 0x31, 0x7e, 0x95, 0x01, 0x32, 0x9d, 0x28, 0x08, 0x26, 0x43, 0xfd, 0x16, 0xdc, 0xa2,
	0xc3, 0xea, 0xe1, 0xe9, 0x69, 0x2f, 0xfe, 0x4d, 0x07, 0x55, 0x1f, 0x80, 0x4c, 0x55, 0x30, 0x49,
	0x3b, 0x60, 0x8f, 0xeb, 0x39, 0xdb, 0xf4, 0xa1, 0xf4, 0x30, 0x99, 0xeb, 0x9f, 0x25, 0xb8, 0x45,
	0xb7, 0x68, 0xea, 0x5a, 0x7a, 0x9d, 0x60, 0x20, 0x26, 0x90, 0xa6, 0x95, 0x00, 0x36, 0xc4, 0xe4,
	0x3f, 0x8b, 0x0f, 0xbe, 0x42, 0x33, 0x4b, 0x97, 0x8d, 0xc4, 0x5a, 0x0d, 0x9e, 0xa2, 0x11, 0xaf,
	0x04, 0x26, 0xeb, 0x26, 0x67, 0x84, 0xba, 0xc9, 0x47, 0xb0, 0x94, 0xeb, 0x27, 0x5c, 0x0d, 0x0a,
	0xf7, 0x81, 0x52, 0x76, 0x4f, 0x58, 0x50, 0xff, 0x46, 0x82, 0x2d, 0x7a, 0x81, 0xa3, 0x87, 0x51,
	0x34, 0x1e, 0x52, 0xc1, 0xbd, 0xc2, 0x4b, 0x79, 0xb0, 0x38, 0x14, 0x32, 0x5e, 0xe2, 0x7b, 0x5d,
	0x3e, 0xda, 0x4e, 0x2e, 0x81, 0x96, 0x1b, 0x44, 0xdd, 0x81, 0xc5, 0x5c, 0x1a, 0x2d, 0xf5, 0xd9,
	0x17, 0x60, 0xce, 0xb1, 0x6b, 0x8e, 0x65, 0xd7, 0x98, 0x21, 0xad, 0x6b, 0x9e, 0x2f, 0x17, 0xd4,
	0xa7, 0xb0, 0xc6, 0xee, 0x20, 0x3b, 0x38, 0x09, 0xbb, 0xb3, 0xf9, 0x22, 0xd1, 0x5f, 0x56, 0x1d,
	0xf8, 0x4f, 0x12, 0x6c, 0x9c, 0x1b, 0x5a, 0x70, 0xc0, 0xce, 0x95, 0x06, 0x7e, 0x3b, 0x57, 0xff,
	0x76, 0x3f, 0x5d, 0xdf, 0x29, 0xfd, 0x27, 0x96, 0x36, 0x75, 0xe0, 0x78, 0x69, 0xb5, 0x94, 0x96,
	0x2d, 0x0a, 0xaf, 0x51, 0xca, 0x1f, 0x02, 0xaf, 0xb1, 0xce, 0xff, 0x4d, 0x82, 0x4d, 0xa7, 0xd2,
	0x20, 0x31, 0x89, 0x7a, 0x83, 0xa3, 0xf4, 0x3b, 0xb4, 0xcb, 0x9c, 0xca, 0xa9, 0xd7, 0x3a, 0xe7,
	0x6a, 0x10, 0xef, 0xc1, 0x4a, 0x6f, 0x30, 0x22, 0x51, 0xec, 0xa7, 0x51, 0x05, 0xab, 0xc6, 0x98,
	0x44, 0xab, 0x7f, 0x5c, 0xc0, 0xa0, 0xec, 0xb3, 0xb0, 0x37, 0xf8, 0x4d, 0x5d, 0x59, 0xfa, 0x15,
	0xc3, 0x69, 0x18, 0x93, 0x4f, 0xb3, 0x85, 0x12, 0x30, 0xf9, 0x4c, 0x11, 0x93, 0xd5, 0xf4, 0x4c,
	0x11, 0x8b, 0x83, 0xd3, 0x4c, 0x51, 0x2e, 0x16, 0x9a, 0x9d, 0xac, 0x06, 0xfe, 0x10, 0x36, 0x86,
	0x11, 0x79, 0xde, 0x0b, 0xc7, 0x23, 0x9a, 0xbb, 0x33, 0x85, 0x44, 0xc4, 0x1c, 0x25, 0xbe, 0xb0,
	0x1d, 0x83, 0x41, 0x31, 0x1f, 0x38, 0x4f, 0xfd, 0x12, 0x11, 0x85, 0xd2, 0x0d, 0x7b, 0x5d, 0x7e,
	0x75, 0x84, 0x8f, 0xea, 0x11, 0xbc, 0xed, 0x93, 0xd3, 0x61, 0x35, 0xad, 0xc4, 0xe2, 0x6a, 0x13,
	0x05, 0x83, 0x51, 0x4f, 0xf4, 0xae, 0xa7, 0xa5, 0x66, 0xef, 0x83, 0x1c, 0xe7, 0x3a, 0xa7, 0x22,
	0x3c, 0x87, 0x57, 0xf7, 0x61, 0xdd, 0x25, 0x87, 0xbc, 0xf8, 0xea, 0xd9, 0xb8, 0xd7, 0x4f, 0xef,
	0x7a, 0x5e, 0x56, 0x1a, 0x76, 0x13, 0xca, 0xfd, 0xb0, 0x13, 0xf4, 0x85, 0x82, 0xb5, 0x0c, 0xa1,
	0xfe, 0x5c, 0x82, 0x9b, 0x13, 0x03, 0x1b, 0xe1, 0x80, 0xb0, 0x12, 0x66, 0x1c, 0xfe, 0x0e, 0x2c,
	0xe1, 0x6e, 0xf1, 0x43, 0xde, 0xca, 0x67, 0xc8, 0x23, 0x51, 0xa3, 0xa2, 0xac, 0xb7, 0x30, 0xd5,
	0x24, 0x5a, 0xd9, 0x46, 0xd7, 0x8f, 0xbd, 0x1a, 0xbb, 0x15, 0xfe, 0xb0, 0x14, 0x47, 0x63, 0xe2,
	0xa6, 0x58, 0xe5, 0x06, 0xcc, 0xf1, 0xa4, 0x07, 0x3d, 0x64, 0x67, 0xd0, 0x9a, 0x27, 0x98, 0x54,
	0x8e, 0x2c, 0xb7, 0xc8, 0xc2, 0xaf, 0x3b, 0x30, 0xef, 0x87, 0x27, 0x64, 0xc0, 0xed, 0x48, 0x8c,
	0xcf, 0x99, 0x1d, 0xe1, 0x20, 0x52, 0xd5, 0xc3, 0xa3, 0x5e, 0x42, 0xd5, 0xc7, 0xe7, 0x8c, 0x8a,
	0x83, 0xea, 0x23, 0x58, 0xd1, 0xc6, 0xf1, 0x71, 0x33, 0x0a, 0x9f, 0xf7, 0xba, 0x4c, 0x02, 0x5b,
	0x00, 0x43, 0x0e, 0xa6, 0xf4, 0x02, 0x46, 0xfd, 0x5b, 0x09, 0x64, 0xe3, 0x6c, 0x10, 0x9c, 0xf6,
	0x3a, 0x59, 0x7c, 0xf1, 0x30, 0xe7, 0xaa, 0xdc, 0xa4, 0xa9, 0xcc, 0x09, 0x9a, 0x9d, 0xbc, 0xa3,
	0xba, 0x09, 0xf3, 0x47, 0x64, 0x40, 0x2f, 0x88, 0xf8, 0x71, 0x99, 0xc2, 0xb4, 0x1a, 0x3b, 0x38,
	0x4d, 0xb3, 0x5d, 0xf8, 0x8c, 0xef, 0x20, 0x8a, 0xa9, 0x98, 0xca, 0x48, 0xdd, 0x81, 0xb9, 0xc4,
	0xad, 0xa5, 0x05, 0x0c, 0x36, 0xf3, 0xfa, 0xa9, 0x6d, 0xd9, 0xd7, 0xea, 0x2d, 0x93, 0xc5, 0x19,
	0xfc, 0x12, 0xb3, 0xa8, 0x2e, 0xc3, 0xa2, 0x11, 0xeb, 0x7d, 0x12, 0x0c, 0xc6, 0x43, 0x74, 0x66,
	0xfe, 0x2b, 0x5c, 0x6f, 0xf8, 0x75, 0x72, 0x18, 0x87, 0xcf, 0x49, 0x64, 0x93, 0x23, 0xaa, 0x1f,
	0xbf, 0x3f, 0x9b, 0x73, 0x0f, 0x96, 0x69, 0x12, 0xa4, 0x12, 0x74, 0x4e, 0x28, 0x43, 0xc2, 0xc7,
	0x41, 0x52, 0xee, 0xe3, 0xa0, 0x2f, 0xc1, 0x92, 0xd9, 0x19, 0xf1, 0x7c, 0x27, 0x5f, 0xd7, 0xe7,
	0xc2, 0x27, 0xaa, 0xe5, 0x4c, 0x26, 0xeb, 0xb0, 0x96, 0xd6, 0xbf, 0x88, 0x7e, 0xfc, 0x03, 0x58,
	0xc5, 0xf5, 0xa6, 0xfa, 0x43, 0x3f, 0x77, 0xe2, 0xf3, 0xf1, 0x84, 0x82, 0x94, 0x4b, 0x28, 0xbc,
	0x80, 0x45, 0x1c, 0xa4, 0x35, 0x0a, 0x8e, 0x08, 0xdf, 0x1b, 0x71, 0x18, 0x07, 0xfd, 0xd6, 0x88,
	0x74, 0xbd, 0xde, 0xe7, 0xc9, 0xd7, 0x17, 0x79, 0x24, 0xbe, 0x79, 0xf8, 0xec, 0x33, 0xb4, 0xfb,
	0x29, 0x1d, 0xcb, 0x9b, 0x4e, 0xa2, 0x2f, 0x2e, 0x83, 0x51, 0xdf, 0x85, 0xd5, 0x74, 0xe6, 0x57,
	0x88, 0x38, 0x22, 0xdc, 0xd4, 0x9c, 0x9c, 0x56, 0x3b, 0x06, 0xfd, 0x9a, 0xae, 0x87, 0x83, 0x98,
	0xbc, 0x88, 0x2f, 0x3f, 0x6d, 0xb7, 0x00, 0xba, 0xa3, 0x58, 0xe7, 0x8d, 0x6c, 0x4d, 0x05, 0x8c,
	0x58, 0x11, 0x8d, 0x2c, 0xce, 0xa4, 0x15, 0xd1, 0xea, 0xbf, 0x4a, 0xe8, 0x5f, 0xf2, 0xb9, 0x12,
	0x7d, 0x99, 0xfa, 0xe9, 0xb9, 0xf2, 0x2d, 0x98, 0x19, 0xf1, 0x6f, 0xb4, 0x71, 0x77, 0xdc, 0x65,
	0x8e, 0x7c, 0xbe, 0x6b, 0x1e, 0xc1, 0x3e, 0xd8, 0x66, 0xbd, 0x70, 0x79, 0xd0, 0x65, 0x4f, 0xa5,
	0xc4, 0x21, 0xf5, 0x04, 0x94, 0xf3, 0x9d, 0x32, 0x8f, 0x64, 0x19, 0x80, 0xd7, 0xd0, 0x38, 0xcd,
	0x03, 0x59, 0x9a, 0x76, 0xb5, 0x49, 0xab, 0x42, 0x9c, 0x4a, 0x3b, 0xd9, 0x1a, 0xec, 0xfe, 0x86,
	0x83, 0xed, 0x7d, 0xad, 0x6e, 0x19, 0x8c, 0xb0, 0xa4, 0xfe, 0x5b, 0x01, 0xa0, 0x61, 0x89, 0x19,
	0x99, 0xec, 0x38, 0x93, 0x26, 0x8f, 0xb3, 0x0a, 0x2c, 0x9e, 0x92, 0x38, 0x10, 0xae, 0xf3, 0xd2,
	0x00, 0xc6, 0x4b, 0xae, 0xe5, 0x69, 0x6d, 0x74, 0x43, 0xa0, 0x72, 0x73, 0x7d, 0xf0, 0x78, 0x4a,
	0xe0, 0xec, 0xeb, 0x20, 0x11, 0xa5, 0x7c, 0x00, 0xe5, 0xe7, 0x41, 0x7f, 0x2c, 0x16, 0x6b, 0xdc,
	0x38, 0x3f, 0xc5, 0x7e, 0x42, 0xe2, 0x66, 0xd4, 0xb4, 0x0a, 0x63, 0x10, 0x93, 0x23, 0x12, 0xd1,
	0x66, 0x5e, 0x32, 0x9a, 0xc3, 0x21, 0x4d, 0x97, 0x74, 0x7a, 0xa7, 0x41, 0x9f, 0xd1, 0xe0, 0xe1,
	0x2b, 0xb9, 0x39, 0x1c, 0x3d, 0x43, 0x63, 0xf4, 0x56, 0x18, 0x09, 0xab, 0xb4, 0x17, 0x51, 0xb9,
	0xfc, 0xf7, 0xfc, 0xc4, 0x7d, 0x53, 0x2e, 0xff, 0x5d, 0x9e, 0xb8, 0xbf, 0xc1, 0x30, 0x7a, 0xa5,
	0x61, 0xe5, 0xbd, 0x91, 0x35, 0x98, 0x89, 0x47, 0x61, 0x96, 0xb8, 0xa0, 0xc0, 0x54, 0x7f, 0x64,
	0x13, 0xe6, 0x63, 0x1e, 0x9c, 0x71, 0xd9, 0xa5, 0xb0, 0xb2, 0x03, 0x70, 0x9a, 0x2e, 0x25, 0xbf,
	0xe8, 0x5a, 0xa6, 0x9f, 0x34, 0xa7, 0x58, 0x57, 0xa0, 0x98, 0xf0, 0x6d, 0xd8, 0x51, 0x24, 0xfa,
	0x36, 0xdb, 0xb0, 0x40, 0xeb, 0x35, 0x7b, 0x03, 0xb4, 0xf3, 0x54, 0x50, 0xf3, 0xae, 0x88, 0x52,
	0x77, 0x60, 0x7d, 0xb7, 0x7b, 0x48, 0xa3, 0x37, 0xfe, 0x19, 0x6b, 0x72, 0x80, 0xa5, 0xf9, 0x0a,
	0x49, 0xcc, 0x57, 0xdc, 0x85, 0x15, 0xa4, 0xf7, 0x82, 0x7e, 0x6c, 0xf0, 0xd5, 0x9e, 0x4e, 0xf8,
	0x03, 0x58, 0xae, 0xf7, 0x46, 0x31, 0x1e, 0xe7, 0xbc, 0x72, 0xf0, 0x72, 0xcd, 0xbc, 0x20, 0x77,
	0x4a, 0xcf, 0xd1, 0xe0, 0xc8, 0x0e, 0x4e, 0x13, 0x69, 0x25, 0xe0, 0xc4, 0x05, 0x46, 0x6e, 0x01,
	0x55, 0x1d, 0x6e, 0x08, 0xb3, 0xb7, 0x86, 0x47, 0x51, 0xd0, 0x25, 0x75, 0x2f, 0x59, 0xad, 0x3b,
	0xb0, 0xc4, 0x67, 0xe6, 0x69, 0x5f, 0xee, 0x4b, 0xe4, 0x90, 0xea, 0xad, 0x69, 0x83, 0xb8, 0x3e,
	0x1f, 0x44, 0x7d, 0x1b, 0x96, 0xaa, 0x3d, 0x7a, 0xd7, 0xb6, 0x1f, 0xf4, 0x2f, 0x16, 0xc4, 0x2f,
	0x25, 0x80, 0x7a, 0xd8, 0x39, 0x69, 0x1c, 0xd1, 0x43, 0xfc, 0x6e, 0xee, 0x3c, 0xbe, 0x4a, 0xaf,
	0x93, 0xd3, 0xd6, 0x9d, 0xfc, 0xa7, 0x2d, 0xb8, 0x4e, 0x1e, 0xcf, 0x6c, 0x4a, 0xdc, 0x5d, 0x62,
	0x88, 0x4b, 0x6f, 0x4b, 0x55, 0x58, 0xa4, 0x84, 0x89, 0xbf, 0xc9, 0x4e, 0xe5, 0x1c, 0x4e, 0xfd,
	0x36, 0xaf, 0xd1, 0x5d, 0x80, 0xb9, 0x9a, 0xab, 0xd9, 0xbe, 0x69, 0x30, 0xff, 0xff, 0x13, 0xcd,
	0xf2, 0x59, 0xa8, 0x84, 0x56, 0xca, 0xb1, 0xf7, 0x4d, 0x97, 0xc2, 0xf4, 0xcb, 0x8c, 0x96, 0x5d,
	0x77, 0xf4, 0x3d, 0xd3, 0x90, 0x8b, 0xea, 0xfb, 0xf0, 0x46, 0xee, 0x9a, 0x29, 0x0d, 0x0a, 0x2e,
	0x3f, 0x0f, 0x5e, 0x00, 0xb4, 0x46, 0x24, 0xe2, 0x1a, 0x21, 0x1e, 0x6f, 0xd2, 0xf4, 0x35, 0x2f,
	0x9c, 0x5b, 0xf3, 0x38, 0xe0, 0x7b, 0x9a, 0xbf, 0x76, 0x02, 0xe7, 0x53, 0xc1, 0xa5, 0x89, 0xdc,
	0xfc, 0xfd, 0xbf, 0x97, 0x61, 0x29, 0xf7, 0x6b, 0x47, 0xca, 0x0a, 0x2c, 0x18, 0x66, 0x55, 0x6b,
	0xd5, 0x7d, 0x9a, 0xa1, 0xa4, 0xbf, 0xed, 0x63, 0x58, 0xae, 0xa9, 0xfb, 0x8e, 0x7b, 0xe0, 0x6b,
	0x95, 0x3a, 0xfb, 0xbd, 0x19, 0xd7, 0x90, 0x25, 0x34, 0xbf, 0x13, 0x4d, 0xf4, 0x1a, 0x9d, 0x55,
	0xc3, 0xb9, 0x0d, 0x5e, 0x90, 0xac, 0xac, 0x81, 0x6c, 0xf8, 0xd9, 0x8f, 0xd8, 0x50, 0x6c, 0x89,
	0xde, 0xfb, 0xa0, 0xbd, 0xe7, 0x75, 0x1a, 0x9c, 0x7a, 0x96, 0xd6, 0x75, 0x35, 0xe8, 0x8d, 0xe9,
	0x1c, 0xbd, 0x99, 0x6d, 0x64, 0xc5, 0x91, 0xf3, 0x8a, 0x02, 0xcb, 0xec, 0x90, 0xf0, 0xcc, 0xef,
	0xb6, 0xe8, 0xb7, 0x2d, 0x65, 0x1c, 0xde, 0xad, 0xa5, 0x49, 0xb0, 0xe4, 0x43, 0xfb, 0x15, 0x58,
	0xf0, 0x3c, 0xc6, 0x14, 0xbe, 0xc7, 0x02, 0x92, 0x25, 0x08, 0x24, 0xa1, 0xd8, 0x45, 0xc4, 0xf2,
	0xcc, 0x6f, 0x46, 0xbb, 0x44, 0x5f, 0x2c, 0xbd, 0x21, 0x16, 0x5a, 0x96, 0x91, 0xbb, 0x06, 0x93,
	0xcc, 0x0a, 0x2d, 0xd8, 0xe6, 0xc5, 0x23, 0xc9, 0x97, 0x36, 0x32, 0x2d, 0xb6, 0x49, 0x2f, 0x8d,
	0xe5, 0x55, 0x5a, 0x38, 0xa3, 0xd3, 0x5f, 0x7b, 0xd0, 0x9d, 0x7a, 0x92, 0xba, 0x53, 0xf0, 0x45,
	0x30, 0xbc, 0x14, 0xba, 0x5e, 0x55, 0x56, 0x61, 0x29, 0xfb, 0x9d, 0x01, 0x9c, 0x62, 0x8d, 0x7d,
	0x84, 0x41, 0x7f, 0xf1, 0x00, 0xe1, 0x6b, 0x54, 0xdd, 0x3c, 0xd3, 0xa5, 0xd0, 0x3a, 0xfb, 0x88,
	0xa6, 0xc9, 0x2a, 0x5c, 0x29, 0xea, 0x3a, 0x4e, 0x97, 0xa1, 0x5a, 0x4d, 0x83, 0xa2, 0x37, 0x28,
	0xda, 0x6f, 0x4f, 0xac, 0xc1, 0x1b, 0x8a, 0x0c, 0x8b, 0xf6, 0x1e, 0xbf, 0xdf, 0x46, 0xc2, 0x4d,
	0x94, 0x87, 0xbd, 0x47, 0x0f, 0xdd, 0x4c, 0x4a, 0x37, 0xb8, 0xd6, 0xa3, 0x74, 0x11, 0xbe, 0x89,
	0x13, 0x7f, 0x8a, 0x07, 0x75, 0x8a, 0xba, 0x45, 0x51, 0x8e, 0xcd, 0x32, 0xea, 0x14, 0xb5, 0x85,
	0x52, 0x64, 0x8b, 0x55, 0xd3, 0xd9, 0xef, 0x0c, 0x79, 0xbe, 0xe6, 0xb7, 0x3c, 0xf9, 0x4d, 0xe5,
	0x36, 0xdc, 0x62, 0x2d, 0xd9, 0xf5, 0x39, 0x25, 0x48, 0x57, 0x7a, 0x1b, 0xc7, 0x6b, 0xf8, 0x8f,
	0xb5, 0x5a, 0x2d, 0x51, 0xb7, 0xdb, 0xf4, 0x4b, 0x27, 0xff, 0x71, 0x02, 0xab, 0xca, 0x2d, 0x78,
	0x43, 0xf8, 0x25, 0x23, 0x2e, 0x5e, 0xc7, 0x65, 0x2f, 0xf7, 0x16, 0x6a, 0x40, 0x4d, 0xa8, 0xac,
	0xbd, 0x83, 0xfc, 0xec, 0x5b, 0x4d, 0xb7, 0x6d, 0x9b, 0x9e, 0xdf, 0xe6, 0x5f, 0x31, 0x21, 0xa7,
	0x6f, 0xe3, 0x6a, 0x64, 0x2d, 0xb4, 0xfb, 0x3b, 0xc8, 0x40, 0x86, 0x43, 0xb2, 0xbb, 0xb8, 0xe0,
	0xae, 0xf9, 0xc4, 0xb1, 0xec, 0x4c, 0x36, 0xf7, 0x94, 0xaf, 0xc0, 0x03, 0xdf, 0x6c, 0x34, 0xdb,
	0x55, 0xcd, 0xaa, 0x9b, 0x46, 0xf6, 0xd3, 0x09, 0x2d, 0xaf, 0xed, 0xbb, 0x9a, 0xed, 0x59, 0xe9,
	0xfd, 0x01, 0xed, 0xf0, 0x25, 0xdc, 0x50, 0xae, 0x59, 0x4d, 0xb6, 0x52, 0xa5, 0x65, 0xd5, 0x0d,
	0x36, 0xe7, 0x7d, 0x65, 0x1b, 0x6e, 0x9e, 0x6b, 0x32, 0x70, 0x40, 0xfe, 0x91, 0xd4, 0x03, 0x74,
	0x80, 0xb4, 0xba, 0xe9, 0x32, 0x8e, 0xbe, 0x4c, 0xc1, 0x96, 0x61, 0x31, 0xf0, 0x5d, 0xa6, 0x55,
	0xba, 0x63, 0xeb, 0x16, 0xd7, 0x72, 0x79, 0x07, 0x49, 0xb2, 0x0b, 0x87, 0xaf, 0x20, 0x58, 0x77,
	0x6a, 0x16, 0x03, 0x1f, 0xe2, 0x7a, 0xd3, 0x9a, 0x65, 0x83, 0x17, 0x30, 0x23, 0xf6, 0x11, 0xaa,
	0x4b, 0xfe, 0x16, 0x03, 0xd1, 0x8f, 0x69, 0x4d, 0x2e, 0xa5, 0xf2, 0xb5, 0x9a, 0xfc, 0x1e, 0xce,
	0x66, 0xf8, 0xed, 0xa4, 0x74, 0x02, 0x49, 0xbe, 0xaa, 0xdc, 0x81, 0xed, 0x86, 0xdf, 0xae, 0x9b,
	0x55, 0xbf, 0x6d, 0x9b, 0x35, 0x54, 0xfb, 0x56, 0xb3, 0xe6, 0x6a, 0x06, 0x5f, 0x60, 0xca, 0xd3,
	0xfb, 0x28, 0x48, 0x53, 0xf7, 0x92, 0xdf, 0xde, 0xa2, 0x5d, 0xbf, 0x86, 0xcb, 0xcb, 0x92, 0xa8,
	0x94, 0xe8, 0xeb, 0xca, 0x3a, 0x28, 0xc6, 0x81, 0xad, 0x35, 0x2c, 0x5d, 0xd4, 0xb4, 0x6f, 0x50,
	0x3c, 0xdd, 0x9c, 0x46, 0x5b, 0xd8, 0x1b, 0x1f, 0xb0, 0x0f, 0x2f, 0x9b, 0x0e, 0x7f, 0x91, 0x74,
	0xdd, 0x3f, 0x44, 0x3d, 0x99, 0xa6, 0x87, 0x6c, 0x9e, 0x6f, 0xe2, 0xbc, 0xb4, 0x5f, 0xcb, 0xd3,
	0x6a, 0xa6, 0xfc, 0x91, 0xb2, 0x09, 0xeb, 0x19, 0xcc, 0x47, 0x63, 0x1f, 0xe5, 0x7d, 0x8b, 0x2d,
	0x50, 0xda, 0x46, 0xbf, 0x81, 0xd2, 0xea, 0x35, 0xca, 0xa0, 0x6f, 0x3e, 0xf5, 0xe5, 0x6f, 0xe3,
	0xab, 0x71, 0x34, 0x4e, 0x47, 0xa7, 0xf8, 0x98, 0x7e, 0xb1, 0x67, 0x71, 0x93, 0xf0, 0x1d, 0x94,
	0x5b, 0xd5, 0xaa, 0x9b, 0x7b, 0xe6, 0xc1, 0xbe, 0x56, 0xa7, 0xcc, 0x6b, 0xb8, 0x13, 0xe9, 0xb7,
	0x1c, 0x8d, 0x1a, 0x13, 0x76, 0x25, 0x9d, 0x2a, 0xdb, 0x22, 0x99, 0x86, 0x23, 0x85, 0x8e, 0x6b,
	0x87, 0xa6, 0x86, 0x9b, 0x34, 0x26, 0x1e, 0x03, 0x57, 0x20, 0x87, 0x4d, 0xe4, 0x5f, 0xf7, 0x32,
	0x25, 0x34, 0x2f, 0xa4, 0x72, 0xfd, 0x8c, 0xaa, 0x8a, 0x22, 0xa5, 0x3a, 0xcc, 0x7e, 0x2b, 0x8d,
	0xfe, 0xda, 0x88, 0x5d, 0x75, 0x64, 0xa2, 0xdc, 0x85, 0xb7, 0x26, 0x1a, 0xcc, 0xa7, 0xa6, 0xde,
	0x62, 0xe3, 0x65, 0xf6, 0xe4, 0x50, 0xd9, 0x81, 0xfb, 0x2f, 0x23, 0x74, 0x4d, 0x2f, 0x39, 0x6d,
	0x8e, 0x90, 0xaf, 0x49, 0x7a, 0xbb, 0xd5, 0x30, 0xdd, 0xe4, 0x19, 0x25, 0x78, 0xac, 0x6c, 0xc1,
	0xe6, 0x04, 0x15, 0x5b, 0x26, 0xd6, 0xde, 0x53, 0xde, 0x01, 0x75, 0xa2, 0xbd, 0x65, 0xbb, 0xa6,
	0x66, 0x24, 0x3f, 0x01, 0xc4, 0xe8, 0x4e, 0xe8, 0x99, 0xe0, 0x6b, 0xbe, 0xd7, 0xae, 0x68, 0xfa,
	0x1e, 0xd7, 0xe1, 0x3e, 0x4a, 0x7e, 0xa2, 0x77, 0x43, 0x6b, 0x36, 0xd1, 0xc6, 0xb0, 0x7e, 0xa7,
	0xca, 0x0d, 0xb8, 0x2e, 0xa8, 0x5a, 0x4d, 0x73, 0x2b, 0xa8, 0x0e, 0x54, 0x36, 0x03, 0xe5, 0x2d,
	0x78, 0x73, 0xd7, 0xa8, 0xb2, 0xab, 0x85, 0xe4, 0x47, 0x80, 0xe8, 0x06, 0xcc, 0xe4, 0x12, 0x2a,
	0x37, 0x61, 0x83, 0x12, 0x79, 0x5a, 0xdd, 0x67, 0x9f, 0x09, 0x64, 0xad, 0x43, 0x54, 0x22, 0xb6,
	0xcb, 0x19, 0x77, 0x88, 0xfc, 0x9e, 0xa2, 0xc2, 0xd6, 0x04, 0x5b, 0x49, 0x85, 0x9a, 0xc5, 0x2d,
	0x54, 0x44, 0x7f, 0x5d, 0x87, 0x1e, 0x49, 0xba, 0xe3, 0xba, 0xad, 0x26, 0xa5, 0xca, 0x5b, 0xd6,
	0x11, 0x2e, 0x6a, 0x55, 0xab, 0xb8, 0x96, 0x9e, 0x1e, 0xa2, 0xb4, 0x73, 0x4c, 0x37, 0x10, 0x5f,
	0xfe, 0x86, 0xe9, 0x51, 0x0d, 0xc7, 0x86, 0x31, 0xb2, 0xd3, 0xb0, 0xda, 0xdc, 0xf4, 0x31, 0x19,
	0xbc, 0x40, 0x8d, 0xa5, 0x47, 0x51, 0xa2, 0x79, 0x67, 0xf7, 0xc7, 0xa0, 0x9c, 0xaf, 0xc0, 0x15,
	0xee, 0xb0, 0x16, 0x61, 0x1e, 0x8d, 0x24, 0xad, 0x3a, 0xa5, 0xa5, 0x78, 0xe9, 0x79, 0x24, 0x17,
	0x26, 0x8a, 0x56, 0x8b, 0x2c, 0xff, 0xaa, 0x19, 0x72, 0x29, 0xad, 0xb1, 0xa7, 0xbf, 0xe3, 0xd4,
	0x74, 0x1d, 0xfa, 0xb9, 0x85, 0xef, 0xb4, 0x59, 0x3d, 0xfe, 0xec, 0xfd, 0x8f, 0x60, 0xf3, 0xe2,
	0x28, 0x0d, 0x0f, 0x6c, 0x66, 0xea, 0xe5, 0x2b, 0x38, 0x12, 0xb2, 0xcc, 0x32, 0xde, 0xbb, 0x38,
	0x7a, 0xe1, 0x7e, 0x00, 0xd7, 0x2f, 0x08, 0xc0, 0xf0, 0x0d, 0x2d, 0xdb, 0x37, 0x6b, 0xf8, 0x92,
	0x07, 0x4d, 0x7c, 0x03, 0x19, 0x16, 0x0d, 0x53, 0xb7, 0x1a, 0x5a, 0x9d, 0x61, 0x24, 0xea, 0x66,
	0xf8, 0xf4, 0xfc, 0xa1, 0x88, 0x02, 0x1e, 0x1b, 0x18, 0x8d, 0xfa, 0x56, 0xc3, 0x64, 0xa8, 0x62,
	0x45, 0xa9, 0xc8, 0x93, 0x3f, 0x46, 0xf9, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x8a, 0x7c,
	0xfe, 0x9f, 0x52, 0x00, 0x00,
}
